% $Id: EHC.lag 199 2004-05-12 19:11:13Z andres $

%%[0
%include lhs2TeX.fmt
%include afp.fmt
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Haskell importable interface to Code
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[8 hs import(EHCommon,List) export(CodeAGItf(..), CModule(..), CExpr(..), CBind(..), CBindL, CBindCateg(..)) 
%%]

%%[8 hs export(CAlt(..), CAltL, CPat(..), CPatL, CPatBind(..), CPatBindL) 
%%]

%%[8 hs export(CPatNm(..), cpatNmEither)
%%]

%%[8 hs export(ctagNone,cpatVarNm,caltTag,caltIsVar,caltPatL,caltPat,caltLPatNms,cvarUndefined) 
%%]

%%[8 hs export(mkCExprLet,mkCExprLetRec,mkCExprLam,mkCExprApp)
%%]

%%[8 hs export(ceStrictIn)
%%]

%%[8 import(EHCodeAbsSyn)
DERIVING *     : Show, Eq
%%]

%%[9 hs import(FiniteMap,EHTy) export(CBindLMap, emptyCBindLMap, Coe(..), mkCoe, coeId, coeIsId, mkAppCoe, mkLamCoe, mkLetRecCoe, mkCBindLForUIDL)
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Tag indicating a non-data
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[8 hs
ctagNone  ::  Int
ctagNone  =   -1
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Binding category
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[8 hs
data CBindCateg = CBindRec | CBindStrict | CBindPlain deriving (Show,Eq)
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Bindings using a pred
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[9 hs
type CBindLMap = FiniteMap PredOccId CBindL

emptyCBindLMap = emptyFM

mkCBindLForUIDL :: CBindLMap -> [UID] -> CBindL
mkCBindLForUIDL cbindLMap = nubBy (\(CBind_Bind n1 _) (CBind_Bind n2 _) -> n1 == n2) . concat . map (maybe [] id . lookupFM cbindLMap)
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Name of a pattern var/con
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[8 hs
data CPatNm = CPatNmOrig {cpatNmNm :: HsName} | CPatNmUniq {cpatNmNm :: HsName} deriving (Ord,Eq)

instance Show CPatNm where
  show pnm = show (cpatNmNm pnm)

cpatNmEither :: (HsName -> a) -> (HsName -> a) -> CPatNm -> a
cpatNmEither o u pnm = case pnm of {CPatNmOrig n -> o n; CPatNmUniq n -> u n}
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Construction
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[8.Let hs
mkCExprLet :: CBindCateg -> CBindL -> CExpr -> CExpr
mkCExprLet c bs e = if null bs then e else CExpr_Let c bs e

mkCExprLetRec :: CBindL -> CExpr -> CExpr
mkCExprLetRec = mkCExprLet CBindRec
%%]

%%[8_1.Let -8.Let hs
mkCExprLet :: CBindCateg -> CBindL -> CType -> CExpr -> CExpr
mkCExprLet c bs ts e = if null bs then e else CExpr_Let c bs ts e

mkCExprLetRec :: CBindL -> CTypeL -> CExpr -> CExpr
mkCExprLetRec = mkCExprLet CBindRec
%%]

%%[8 hs
mkCExprLam :: [HsName] -> CExpr -> CExpr
mkCExprLam as e = foldr (\n e -> CExpr_Lam n e) e as

mkCExprApp :: CExpr -> [CExpr] -> CExpr
mkCExprApp f as = foldl (\f a -> CExpr_App f a) f as
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Destruction
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[8 hs
cpatVarNm :: CPat -> CPatNm
cpatVarNm (CPat_Var n)        = n
cpatVarNm (CPat_Con n _ _ _)  = n

cpatConTag :: CPat -> Int
cpatConTag (CPat_Con _ t _ _)  = t

caltTag :: CAlt -> Int
caltTag (CAlt_Alt (p : _) _) = cpatConTag p

caltIsVar :: CAlt -> Bool
caltIsVar (CAlt_Alt (CPat_Var _ : _) _)  = True
caltIsVar _                              = False

caltPatL :: CAlt -> CPatL
caltPatL (CAlt_Alt p _) = p

caltPat :: CAlt -> CPat
caltPat = head . caltPatL

caltLPatNms :: CAltL -> [CPatNm]
caltLPatNms = nub . sort . map (cpatVarNm . caltPat)

cvarUndefined :: CExpr
cvarUndefined = CExpr_Var hsnUndefined

ceStrictIn :: HsName -> CExpr -> Ty -> (CExpr -> CExpr) -> CExpr
ceStrictIn nm e t mkC = CExpr_Let CBindStrict [CBind_Bind nm e] [CType_Type nm t] (mkC (CExpr_Var nm))
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Coercion
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[9 hs
data Coe = CoeId | Coe (CExpr -> CExpr) | CoeC CExpr | CoeImplApp ImplsVarId | CoeImplLam ImplsVarId

coeId :: Coe
coeId = CoeC CExpr_CoeArg

coeIsId :: Coe -> Bool
coeIsId (CoeC CExpr_CoeArg) = True
coeIsId _                   = False

mkCoe :: (CExpr -> CExpr) -> Coe
mkCoe = Coe

mkAppCoe :: CBindLMap -> [CExpr] -> Coe
mkAppCoe bL eL = mkCoe (\e -> (concat . eltsFM $ bL) `mkCExprLetRec` (e `mkCExprApp` eL))

mkLamCoe :: HsName -> Coe
mkLamCoe n = mkCoe (\e -> n `CExpr_Lam` e)

mkLetRecCoe :: CBindL -> Coe
mkLetRecCoe b = mkCoe (\e -> mkCExprLet CBindRec b e)

instance Show Coe where
  show _ = "COE"
%%]

