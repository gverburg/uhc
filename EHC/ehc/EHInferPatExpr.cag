% $Id: EHInferPatExpr.cag 269 2005-08-14 12:49:00Z cddouma $

%%[0
%include lhs2TeX.fmt
%include afp.fmt
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Type inferencing for PatExpr
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Arity of pattern app
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[1.arity
ATTR PatExpr [ | | arity: Int ]

SEM PatExpr
  | App         lhs         .  arity                =   @func.arity + 1
  | Con Var AppTop IConst CConst
                lhs         .  arity                =   0
%%]

%%[7
SEM PatExpr
  | Rec         lhs         .  arity                =   0
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Destruction function, known ty
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[2.patFunTy
ATTR PatExpr [ | | patFunTy USE {`const`} {Ty_Any}: Ty ]
%%]

-- generated from ruler rules into EHRulerRules, was 2.patFunTy
%%[5.patFunTy
SEM PatExpr
  | Con         loc         .  patFunTy             =   let  prTy = mkTyFreshProdFrom @lUniq (hsnProdArity @nm)
                                                        in   ([prTy] `mkArrow` prTy)
  | App         lhs         .  patFunTy             =   @func.patFunTy
  | AppTop      loc         .  patFunTy             =   @patExpr.patFunTy
%%]

%%[5.patFunTy
SEM PatExpr
  | Con         loc         .  (knUnTy,nmErrs)      :=  valGamLookupTy (hsnUn @nm) @lhs.valGam
                            .  patFunFo             :=  let  [a,r]  = mkNewTyVarL 2 @lUniq
                                                        in   fitsIn  instFIOpts @fe @lUniq2 @knUnTy ([a] `mkArrow` r)
                            .  patFunTy             :=  foTy @patFunFo
%%]

!!!!!!! fix following later (20050407)
%%[11.patFunTy
SEM PatExpr
  | Con         loc         .  patFunTy             :=  let  [a,r]  = mkNewTyVarL 2 @lUniq
                                                             fo     = fitsIn  (instFIOpts {fioInstCoConst = instCoFixed})
                                                                              @fe @lUniq2 @knUnTy ([a] `mkArrow` r)
                                                        in   foTy fo
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Distribution of known ty
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[1.knTy
ATTR AllPatExpr [ knTy: Ty | | ]
ATTR PatExpr [ knTyL: TyL | | ]
%%]

-- generated from ruler rules into EHRulerRules, was 1.knTy.App
%%[5.knTy.App
SEM PatExpr
  | AppTop      loc         .  knProdTy
                                                    =   @lhs.knTy
                            .  (knTyL,arityErrs)
                                                    =   case tyProdArgs @knProdTy of
                                                            tL | @patExpr.arity == length tL
                                                                ->  (reverse tL,[])
                                                            _   ->  (repeat Ty_Any
                                                                    ,  [Err_PatArity
                                                                         @knProdTy @patExpr.arity])
  | App         loc         .  (knArgTy,knTyL)
                                                    =   hdAndTl @lhs.knTyL
                arg         .  knTy                 =   @knArgTy
%%]

%%[1.knTy.Init
SEM Decl
  | Val         patExpr     .  knTyL                =   []

SEM Expr
  | Lam         arg         .  knTyL                =   []
%%]

-- generated from ruler rules into EHRulerRules, was 1.knTy
%%[5.knTy
SEM PatExpr
  | AppTop      loc         .  (ty_r_,knProdTy)     :=  tyArrowArgRes @patFunTy
%%]

%%[5
SEM CaseAlt
  | Pat         patExpr     .  knTyL                =   []
%%]

%%[7
SEM RecPatExpr
  | Ext Expr    patExpr     .  knTyL                =   []
%%]

%%[9
SEM Expr
  | LamImpl     arg         .  knTyL                =   []
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Type of PatExpr
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[1.valGam
ATTR AllPatExpr [ | valGam: ValGam | ]
%%]
-- generated from ruler rules into EHRulerRules, was 1.xxx
%%[5.xxx
SEM PatExpr
  | Var VarAs   loc         .   ty                  =   @lhs.knTy
                            .   varTy               =   @ty
                            .   addToGam            =   if @lhs.inclVarBind && @nm /= hsnWild
                                                        then  \g ->  gamAdd @nm
                                                                       (ValGamInfo @varTy) g
                                                        else  id
  | Var         lhs         .   valGam              =   @addToGam @lhs.valGam
  | VarAs       lhs         .   valGam              =   @addToGam @patExpr.valGam
%%]

%%[2.tyNtyCnstr
ATTR AllPatExpr [ | tyCnstr: Cnstr | ty: Ty ]
%%]

-- generated from ruler rules into EHRulerRules, was 2.Var
%%[5.Var
SEM PatExpr
  | Var VarAs   loc         .   ty                  :=  tyEnsureNonAny @lUniq @lhs.knTy
  | VarAs       patExpr     .   knTy                =   @ty
%%]

-- generated from ruler rules into EHRulerRules, was 4.Var
%%[5.Var
SEM PatExpr
  | Var VarAs   loc         .   ty                  :=  tyInst1Exists @lUniq2 (tyEnsureNonAny @lUniq @lhs.knTy)
%%]

-- generated from ruler rules into EHRulerRules, was 4_2.Var
%%[99.Var
SEM PatExpr
  | Var VarAs   loc         .   (varTy,varTyCnstr)  :=  tyAsCnstr @lUniq @ty
  | Var         lhs         .   tyCnstr             =   @varTyCnstr |=> @lhs.tyCnstr
  | VarAs       patExpr     .   tyCnstr             =   @varTyCnstr |=> @lhs.tyCnstr

%%]
ATTR AllPatExpr [ | gathPatTyCnstr: Cnstr | ]
SEM PatExpr
  | AppTop TypeAs
                patExpr     .   gathPatTyCnstr      =   foCnstr @fo_ |=> @lhs.gathPatTyCnstr
  | Con         lhs         .   gathPatTyCnstr      =   foCnstr @fo_ |=> @lhs.gathPatTyCnstr
  | Var         lhs         .   gathPatTyCnstr      =   @varTyCnstr |=> @lhs.gathPatTyCnstr
  | VarAs       patExpr     .   gathPatTyCnstr      =   @varTyCnstr |=> @lhs.gathPatTyCnstr

%%[9.Var
SEM PatExpr
  | Var         loc         .   ty                  :=  tyInst1Exists @lUniq2 (tyEnsureNonAnyImpl @lUniq @lhs.knTy)
%%]

-- generated from ruler rules into EHRulerRules, was 4.TypeAs
%%[5.TypeAs
SEM PatExpr
  | TypeAs      loc         .   ty_q_               =   @lhs.tyCnstr |=> @tyExpr.ty
                            .   fo_                 =   fitsIn @lhs.fiOpts @fe @lUniq (@lhs.tyCnstr |=> @lhs.knTy) @ty_q_
                patExpr     .   knTy                =   foTy @fo_
                            .   tyCnstr             =   foCnstr @fo_ |=> @lhs.tyCnstr
%%]

-- generated from ruler rules into EHRulerRules, was 2.Rest
%%[5.Rest
SEM PatExpr
  | AppTop      loc         .   fo_fitR_            =   @lhs.knTy `fitsIn` @ty_r_
                            .   ty                  =   foTy @fo_fitR_
                patExpr     .   tyCnstr             =   foCnstr @fo_fitR_ |=> @lhs.tyCnstr
                lhs         .   ty                  =   @patExpr.tyCnstr |=> @ty
  | App         arg         .   knTy                :=  @func.tyCnstr |=> @knArgTy
  | Con         loc         .   ty                  =   Ty_Any
%%]

-- generated from ruler rules into EHRulerRules, was 2.Rest
%%[5.Rest
SEM PatExpr
  | IConst      loc         .   ty                  =   tyInt
  | CConst      loc         .   ty                  =   tyChar
%%]

-- generated from ruler rules into EHRulerRules, was 4.Rest
%%[5.Rest
SEM PatExpr
  | AppTop Con  loc         .   fo_fitR_            :=  fitsIn @lhs.fiOpts @fe @lUniq (@lhs.tyCnstr |=> @lhs.knTy) @ty_r_
  | Con         loc         .   (ty_r_,_)           =   tyArrowArgRes @patFunTy
                            .   ty                  :=  foTy @fo_fitR_
                lhs         .   tyCnstr             =   foCnstr @fo_fitR_ |=> @lhs.tyCnstr
%%]

%%[11.ApptopCon
SEM PatExpr
  | AppTop Con  loc         .   fo_fitR_            :=  fitsIn  (@lhs.fiOpts {fioAllowEqOpen = True})
                                                                @fe @lUniq (@lhs.tyCnstr |=> @lhs.knTy) @ty_r_
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Gamma/Environment for fitting
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[4.FIEnv
SEM PatExpr
  | *           loc         .   fe                  =   emptyFE
%%]

%%[7.FIEnv
SEM RecPatExpr
  | *           loc         .   fe                  =   emptyFE
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Records
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[7
SEM RecPatExpr
  | Empty       loc         .   fo_                 =   fitsIn (@lhs.fiOpts) @fe @lUniq (@lhs.tyCnstr |=> @lhs.knTy) tyRecEmpty
                            .   ty                  =   foTy @fo_
                lhs         .   tyCnstr             =   foCnstr @fo_ |=> @lhs.tyCnstr
  | Ext         loc         .   recTy               =   let  [r,e] = mkNewTyVarL 2 @lUniq
                                                        in   (hsnRec `mkConApp` [r]) `mkTyRecExt` [(@nm,e)]
                            .   fo_                 =   fitsIn (@lhs.fiOpts) @fe @lUniq2 (@lhs.tyCnstr |=> @lhs.knTy) @recTy
                            .   ty                  =   foTy @fo_
                (loc.knRecTy,patExpr.knTy)          =   maybe (Ty_Any,Ty_Any) id . tyRecExtr @nm $ @ty
                recPatExpr  .   knTy                =   @knRecTy
                            .   tyCnstr             =   foCnstr @fo_ |=> @lhs.tyCnstr
                lhs         .   ty                  =   @patExpr.tyCnstr |=> @ty
%%]

