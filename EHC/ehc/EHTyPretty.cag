% $Id$

%%[0
%include lhs2TeX.fmt
%include afp.fmt
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Haskell importable interface to Ty pretty print
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[1 hs import(UU.Pretty,EHCommon,EHTy) export(ppTy)
%%]

%%[3 hs import(Char)
%%]

%%[9 hs export(ppTyPr)
%%]

%%[1.WRAPPER import(EHTyAbsSyn,EHTyCommonAG)
WRAPPER TyAGItf
%%]

%%[1.ppTy hs
ppTy :: Ty -> PP_Doc
ppTy ty
  =  let  t =  wrap_TyAGItf
                 (sem_TyAGItf (TyAGItf_AGItf ty))
                 Inh_TyAGItf
     in   pp_Syn_TyAGItf t

instance PP Ty where
  pp t = ppTy t
%%]

%%[9.ppTy -1.ppTy hs
ppTy' :: TyCtxt -> Ty -> PP_Doc
ppTy' c ty
  =  let  t =  wrap_TyAGItf
                 (sem_TyAGItf (TyAGItf_AGItf ty))
                 (Inh_TyAGItf {ctxt_Inh_TyAGItf = c})
     in   pp_Syn_TyAGItf t

ppTy :: Ty -> PP_Doc
ppTy = ppTy' TyCtxt_Ty

ppTyPr :: Ty -> PP_Doc
ppTyPr = ppTy' TyCtxt_Pred

instance PP Ty where
  pp t = ppTy t
%%]

%%[4_2 hs
instance PP TyHardness where
  pp h = pp (show h)
%%]

%%[9 hs
instance PP Pred where
  pp p = ppTy (Ty_Pred p)

instance PP Impls where
  pp i = ppTy (Ty_Impls i)

instance PP PredOcc where
  pp po = pp (poPr po) >|< "/" >|< pp (poId po)
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% The context of a type
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[9
ATTR TyAGItf Ty [ ctxt: TyCtxt | | ]

SEM Pred
  | Pred        loc         .   ctxt            =   TyCtxt_Pred
  | * - Pred    loc         .   ctxt            =   TyCtxt_Ty
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% TyVar name
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[3 hs
type TVarNameMap = AssocL TyVarId PP_Doc
%%]

%%[3 hs
ppTnUniq :: Int -> PP_Doc
ppTnUniq u
  =  let  lrepr i     =  if i <= 26
                         then  [repr i]
                         else  let  (d,r) = i `divMod` 26
                               in   (repr d : lrepr r)
          repr        =  (chr . (97+))
     in text (lrepr u)
%%]

%%[3.mkDefaultTvNm hs
mkDefaultTvNm :: String -> TyVarId -> PP_Doc
mkDefaultTvNm pre tv = text (pre ++ "_" ++ show tv)

tvCategPrefix :: TyVarCateg -> String
tvCategPrefix TyVarCateg_Fixed = "c"
tvCategPrefix TyVarCateg_Plain = "v"
%%]
%%[6_4 hs
tvCategPrefix TyVarCateg_Exist = "C"
%%]

%%[3
ATTR AllTy [ | tnUniq: {Int}  tnMap: TVarNameMap | ]

SEM TyAGItf
  | AGItf           ty      .   tnUniq      =   0
                            .   tnMap       =   []

SEM Ty
  | Quant           loc     .   tnPP        =   ppTnUniq @lhs.tnUniq
                    ty      .   tnUniq      =   @lhs.tnUniq + 1
                            .   tnMap       =   (@tv,@tnPP) : @lhs.tnMap
                    lhs     .   tnMap       =   filter (\(v,_) -> v /= @tv) @ty.tnMap
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Pretty printed type
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[1.pp
ATTR TyAGItf AllTy [ | | pp USE {>#<} {empty}: PP_Doc ]

SEM Ty
  | Con             loc     .   pp      =   ppCon @nm
  | App             loc     .   ppDflt  =   @func.pp >#< @arg.pp
                            .   pp      =   if @isSpineRoot
                                            then  ppParNeed  @parNeed @lhs.parNeed
                                                             (ppAppTop (@appFunNm,@appFunPP) @appArgPPL @ppDflt)
                                            else  @ppDflt
  | Any             loc     .   pp      =   pp hsnUnknown
%%]

%%[2.Var
SEM Ty
  | Var             loc     .   pp      =   pp ("v_" ++ show @tv)
%%]

%%[3.Var -2.Var
SEM Ty
  | Var             loc     .   pp      :=  maybe (mkDefaultTvNm (tvCategPrefix @categ.self) @tv) id (lookup @tv @lhs.tnMap)
%%]

%%[3.Quant
SEM Ty
  | Quant           loc     .   pp      =   ppParNeed  @parNeed @lhs.parNeed
                                                       ("forall" >#< @tnPP >#< "." >#< @ty.pp)
%%]

%%[4.Quant -3.Quant
ATTR TyQu [ | | pp: PP_Doc ]

SEM Ty
  | Quant           loc     .   pp      :=  ppParNeed  @parNeed @lhs.parNeed
                                                       (@qu.pp >#< @tnPP >#< "." >#< @ty.pp)
  
SEM TyQu
  | Forall Exists   lhs     .   pp      =   text (showTyQu @self)
%%]

%%[4_2
SEM Ty
  | Alts            loc     .   o       =   "["
                    loc     .   c       =   "]"
  | Both            loc     .   o       =   "<"
                    loc     .   c       =   ">"
  | Alts Both       loc     .   pp      =   ppParNeed  @parNeed @lhs.parNeed
                                                       (maybe (pp @tv) id (lookup @tv @lhs.tnMap) >|< ppListSep @o @c "/" @tyL.ppL)

SEM TyL [ | | ppL: PP_DocL ]
  | Nil             lhs     .   ppL     =   []
  | Cons            lhs     .   ppL     =   @hd.pp : @tl.ppL

SEM TyPlusL [ | | ppL: PP_DocL ]
  | Nil             lhs     .   ppL     =   []
  | Cons            lhs     .   ppL     =   @hd.pp : @tl.ppL

SEM TyPlus
  | Ty              lhs     .   pp      =   pp @hardness >|< ":" >|< @ty.pp
%%]

%%[6
SEM TyQu
  | KiForall KiExists
                    lhs     .   pp      =   text (showTyQu @self)
%%]

%%[7
SEM Ty
  | Ext             loc     .   pp      =   ppAppTop  (hsnRow,mkPPAppFun @appFunNm @appFunPP)
                                                      @appArgPPL empty
%%]

%%[9
SEM Ty
  | *               loc     .   wrapPP  =   if @lhs.ctxt == TyCtxt_Pred then id else (\pp -> hsnOImpl >#< pp >#< hsnCImpl)
  | Pred            loc     .   pp      =   @wrapPP @pr.pp
  | Impls           loc     .   pp      =   @wrapPP @impls.pp
  | Con             loc     .   pp      :=  if @lhs.ctxt == TyCtxt_Pred && hsnIsArrow @nm then ppCon hsnPrArrow else ppCon @nm

SEM Impls
  | Tail Cons       loc     .   ppIv    =   maybe (mkDefaultTvNm "i" @iv) id (lookup @iv @lhs.tnMap)
  | Tail            lhs     .   pp      =   @ppIv
  | Cons            loc     .   ppPv    =   maybe (mkDefaultTvNm "p" (poiId @pv)) id (lookup @iv @lhs.tnMap)
                    lhs     .   pp      =   @ppIv >|< "=" >|< @pr.pp >|< "/" >|< @ppPv >|< "," >|< @tl.pp
  | Nil             lhs     .   pp      =   pp "_"
%%]

%%[9_1
SEM TyPlus
  | Ty              lhs     .   pp      =   pp @plv >|< ";" >|< @ty.pp
%%]

%%[10
SEM Pred
  | Lacks           lhs     .   pp      =   @ty.pp >|< "\\" >|< @nm
%%]

%%[11
SEM Ty
  | Equal           loc     .   pp      =   pp_parens (maybe (mkDefaultTvNm "e" @tv) id (lookup @tv @lhs.tnMap) >|< "=" >|< @ty.pp)
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Records, default (positional) name if absent
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[7
ATTR Ty [ | positionalFldNmL: {[HsName]} | ]

SEM TyAGItf
  | AGItf           ty      .   positionalFldNmL    =   positionalFldNames

SEM Ty
  | Ext             (loc.positionalNm,lhs.positionalFldNmL)
                                                    =   hdAndTl @ty.positionalFldNmL
  | * - Ext         lhs     .   positionalFldNmL    =   @lhs.positionalFldNmL
%%]

%%[7_1
SEM TyL
  | Cons            hd      .   positionalFldNmL    =   positionalFldNames

SEM TyPlus
  | Ty              ty      .   positionalFldNmL    =   positionalFldNames
%%]

%%[9
SEM Pred
  | *               loc     .   positionalFldNmL    =   positionalFldNames
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Ty constr name of app + args, see also EHPretty
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[1.appFunPP
ATTR Ty [ | | appFunPP: PP_Doc  appArgPPL: PP_DocL ]
%%]

%%[1.appFunPP.Ty
SEM Ty
  | App             loc     .  appArgPPL    =   @func.appArgPPL ++ [@arg.pp]
                            .  appFunPP     =   @func.appFunPP
  | * - App         lhs     .  appArgPPL    =   []
                            .  appFunPP     =   @pp
%%]

%%[7 -1.appFunPP.Ty
SEM Ty
  | App             loc     .  (appFunPP,appArgPPL)
                                            :=  mkExtAppPP  (@appFunNm,@func.appFunPP,@func.appArgPPL)
                                                            (@arg.appFunNm,@arg.appFunPP,@arg.appArgPPL,@arg.pp)
  | Ext             loc     .  appArgPPL    :=  @ty.appArgPPL ++ [ppFld "::" @positionalNm @nm @extTy.pp]
                            .  appFunPP     :=  @ty.appFunPP
  | * - App Ext     lhs     .  appArgPPL    :=  []
                            .  appFunPP     :=  @pp
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Need for parenthesis
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[1.ParNeed
ATTR Ty [ parNeed: ParNeed  parNeedL: ParNeedL | | ]

SEM TyAGItf
  | AGItf       ty      .   parNeed             =   ParNotNeeded
                        .   parNeedL            =   []

SEM Ty
  | App         loc     .   (parNeed,argsParNeedL)
                                                =   if @isSpineRoot
                                                    then  parNeedApp @appFunNm
                                                    else  (ParNotNeeded,@lhs.parNeedL)
                (arg.parNeed,func.parNeedL)
                                                =   hdAndTl @argsParNeedL
%%]

%%[3
SEM Ty
  | Quant       loc     .   parNeed             =   ParNotNeeded
%%]

%%[4_2
SEM TyL
  | Cons        hd      .   parNeed             =   ParNotNeeded
                        .   parNeedL            =   []

SEM TyPlus
  | Ty          ty      .   parNeed             =   ParNotNeeded
                        .   parNeedL            =   []

SEM Ty
  | Alts Both   loc     .   parNeed             =   ParNotNeeded
%%]

%%[7
SEM Ty
  | Ext         ty      .   parNeed             =   ParNotNeeded
                extTy   .   parNeed             =   ParNotNeeded
                loc     .   parNeed             =   ParNotNeeded
%%]

%%[9
SEM Pred
  | Pred        loc     .   parNeed             =   ParNeeded
                        .   parNeedL            =   []
  | * - Pred    loc     .   parNeed             =   ParNotNeeded
                        .   parNeedL            =   []
%%]

%%[11
SEM Ty
  | Equal       loc     .   parNeed             =   ParNotNeeded
%%]

