% $Id$

%%[0
%include lhs2TeX.fmt
%include afp.fmt
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Kind inferencing for data, placeholders, known ki use
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[5.tyGam
SEM Decl
  | Data        tyVars      .   tyGam               =   gamPushNew @lhs.patTyGam
                loc         .   (lTyGam,gTyGam)     =   gamPop @tyVars.tyGam
                lhs         .   patTyGam            =   gamAdd @tyNm (TyGamInfo (Ty_Con @tyNm)) @lhs.patTyGam
                constrs     .   tyGam               =   gamPushGam @lTyGam @lhs.tyGam
                lhs         .   tyGam               =   @lhs.tyGam
%%]

%%[6
SEM Decl
  | Data        loc         .   dataTgi             =   mkTGI (Ty_Con @tyNm) (tyEnsureNonAny @lUniq @knKi)
                lhs         .   patTyGam            :=  if @hasKiSig  then @lhs.patTyGam
                                                                      else gamAdd @tyNm @dataTgi @lhs.patTyGam
                loc         .   fo_                 =   fitsIn  strongFIOpts emptyFE @lUniq2
                                                                (@lhs.patKiCnstr |=> (@tyVars.kiL `mkArrow` kiStar))
                                                                (@lhs.patKiCnstr |=> (tgiKi @dataTgi))
                            .   dataKi              =   foTy @fo_
                lhs         .   patKiCnstr          =   foCnstr @fo_ |=> @lhs.patKiCnstr
                constrs     .   tyGam               :=  gamPushGam  (tyGamInst1Exists @lUniq3 (@lhs.kiCnstr |=> @lTyGam))
                                                                    @lhs.tyGam
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Kind inferencing for data
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[6
SEM DataConstr
  | Constr      loc         .   fldsKiCnstr         =   @fields.kiCnstr
                            .   (_,fo_)             =   fitsInL  weakFIOpts emptyFE @lUniq
                                                                 (@fldsKiCnstr |=> @fields.kiL)
                                                                 (repeat kiStar)
                lhs         .   kiCnstr             =   foCnstr @fo_ |=> @fldsKiCnstr
%%]

%%[11
SEM DataConstr
  | Constr      loc         .   fldsKiCnstr         :=  @eqs.kiCnstr

SEM DataConstrEq
  | Eq          loc         .   fo_                 =   fitsIn weakFIOpts emptyFE @lUniq (@tyExpr.kiCnstr |=> @tyVar.ki) (@tyExpr.ki)
                lhs         .   kiCnstr             =   foCnstr @fo_ |=> @tyExpr.kiCnstr
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Gathering tag info for data
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[8
SEM Decl
  | Data        lhs         .   gathDataGam         =   gamAdd @tyNm (mkDGI @constrs.dataTagMp) @lhs.gathDataGam
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Type of data constructors
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[5
ATTR AllDataConstr [ dataTy: Ty | patValGam: ValGam | ]

SEM DataConstr
  | Constr      loc         .   dataConTy           =   @fields.tyL `mkArrow` @lhs.dataTy
                            .   dataConProdTy       =   mkProdApp @fields.tyL
                            .   dataQuUnConTy       =   let  fvD = ftv @lhs.dataTy
                                                             fvU = ftv @dataConProdTy
                                                        in   mkTyQu TyQu_Forall fvD ([@lhs.dataTy] `mkArrow` mkTyQu TyQu_Exists (fvU \\ fvD) @dataConProdTy)
                lhs         .   patValGam           =   gamAdd
                                                          @conNm (ValGamInfo @dataConTy)
                                                          (gamAdd (hsnUn @conNm) (ValGamInfo @dataQuUnConTy) @lhs.patValGam)

SEM Decl
  | Data        loc         .   dataTy              =   @tyNm `mkConApp` @tyVars.tyL
%%]
                            .   dataUnConTy         =   [@lhs.dataTy] `mkArrow` @dataConProdTy
                            .   dataQuUnConTy       =   let  fvD = ftv @lhs.dataTy
                                                             fvU = ftv @dataUnConTy
                                                        in   mkTyQu TyQu_Forall fvD . mkTyQu TyQu_Exists (fvU \\ fvD) $ @dataUnConTy

%%[7
ATTR AllDataConstr [ | | dataAltTyL USE {++} {[]}: {AssocL HsName Ty} ]

SEM DataConstr
  | Constr      loc         .   dataConProdTy       :=  let  lbls = zipWith (\p ml -> maybe p id ml) positionalFldNames @fields.lblL
                                                        in   mkTyRec (zip lbls @fields.tyL)
                lhs         .   dataAltTyL          =   [(@conNm,@dataConProdTy)]

SEM Decl
  | Data        loc         .   dataAltTy           =   mkTySum @constrs.dataAltTyL
                            .   dataTgi             :=  mkTGIData (Ty_Con @tyNm) (tyEnsureNonAny @lUniq @knKi) @dataAltTy
%%]

!!!!! Fix following w.r.t. dataUnConTy
%%[11
SEM DataConstr
  | Constr      loc         .   dataConTy           :=  @eqs.eqTyCnstr |=> (@fields.tyL `mkArrow` @lhs.dataTy)
                            .   eqEqCnstr           =   assocLToCnstr . map (\(v,t) -> (v,Ty_Equal v t)) . cnstrToAssocTyL $ @eqs.eqTyCnstr
                            .   dataUnConTy         :=  [@eqEqCnstr |=> @lhs.dataTy] `mkArrow` (@eqs.eqTyCnstr |=> @dataConProdTy)
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Equal constraints for constructors
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[11
ATTR AllDataConstrEq [ | eqTyCnstr: Cnstr | ]

SEM DataConstr
  | Constr      eqs         .   eqTyCnstr           =   emptyCnstr

SEM DataConstrEq
  | Eq          lhs         .   eqTyCnstr           =   (tyVar @tyVar.ty `cnstrTyUnit` @tyExpr.ty) |=> @lhs.eqTyCnstr
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Ty name
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[8
ATTR AllDataConstr [ tyNm: HsName | | ]

SEM Decl
  | Data        constrs     .   tyNm                =   @tyNm
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Map for tag + arity
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[8
ATTR AllDataConstr [ | | dataTagMp USE {`Map.union`} {Map.empty}: DataTagMp ]

SEM DataConstr
  | Constr      loc         .   tag                 =   tyRecOffset @conNm @lhs.dataAltTy
                            .   arity               =   length @fields.tyL
                            .   ctag                =   CTag @lhs.tyNm @conNm @tag @arity
                lhs         .   dataTagMp           =   @conNm `Map.singleton` @ctag
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Label of data fields
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[7
ATTR AllDataField [ | | lblL USE {++} {[]}: {[Maybe HsName]} ]

SEM DataField
  | Field       lhs         .   lblL                =   maybe [Nothing] (map Just) @mbLabels
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Type of data fields
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[7
ATTR AllDataField [ | | tyL USE {++} {[]}: TyL ]

SEM DataField
  | Field       lhs         .   tyL                 =   replicate (maybe 1 length @mbLabels) @tyExpr.ty
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Kind of data fields
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[7
ATTR AllDataField [ | | kiL USE {++} {[]}: TyL ]

SEM DataField
  | Field       lhs         .   kiL                 =   replicate (maybe 1 length @mbLabels) @tyExpr.ki
%%]
