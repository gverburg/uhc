% $Id$

%%[0
%include lhs2TeX.fmt
%include afp.fmt
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Ty con presence check
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[1.tyGam
ATTR AllTyExpr [ | tyGam: TyGam | ]
%%]

%%[1.check
SEM TyExpr
  | Con         loc         .  (tgi,nmErrs)         =   case tyGamLookup @nm @lhs.tyGam of
                                                          Nothing    ->  (TyGamInfo Ty_Any
                                                                         ,[Err_NamesNotIntrod [@nm]])
                                                          Just tgi   ->  (tgi,[])
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Ty var gathering
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[4 hs
tvGathFlow :: TyGam -> TyGam -> TyGam -> (TyGam,TyGam)
tvGathFlow newG lhsG insideG
  = (insideG',lhsG')
  where  insideG'  = gamPushNew (gamPushGam newG lhsG)
         (l,g)     = gamPop insideG
         lhsG'     = gamAddGam l lhsG
%%]

%%[2.tyVarGather
SEM TyExpr
  | Wild        loc         .   tyVarId             =   @lUniq
                            .   tgi                 =   TyGamInfo (mkNewTyVar @tyVarId)
%%]

%%[3.tyVarGather
SEM TyExpr
  | Var VarWild loc         .   tyVarId             =   @lUniq
                (loc.tgi,lhs.tyGam)                 =   case tyGamLookup @nm @lhs.tyGam of
                                                          Nothing    ->  let  t    =  mkNewTyVar @tyVarId
                                                                              tgi  =  TyGamInfo t
                                                                         in   (tgi,gamAdd @nm tgi @lhs.tyGam)
                                                          Just tgi   ->  (tgi,@lhs.tyGam)
%%]

%%[4.tyVarGather
SEM TyExpr
  | Quant       loc         .   (tv,tgi)            =   let  t = mkTyVar @lUniq
                                                        in   (@lUniq,TyGamInfo t)
                (tyExpr.tyGam,lhs.tyGam)            =   tvGathFlow (@tyVar `gamUnit` @tgi) @lhs.tyGam @tyExpr.tyGam
%%]
                tyExpr      .   tyGam               =   gamPushNew (gamPushGam (@tyVar `gamUnit` @tgi) @lhs.tyGam)
                lhs         .   tyGam               =   let  (l,g) = gamPop @tyExpr.tyGam
                                                        in   gamAddGam l @lhs.tyGam 

%%[5.tyVarGather
ATTR AllTyVar [ | tyGam: TyGam | ]

SEM TyVar
  | Var         (loc.tgi,lhs.tyGam)                 =   case tyGamLookup @nm (gamTop @lhs.tyGam) of
                                                          Nothing    ->  let  t    =  mkNewTyVar @lUniq
                                                                              tgi  =  TyGamInfo t
                                                                         in   (tgi,gamAdd @nm tgi @lhs.tyGam)
                                                          Just tgi   ->  (tgi,@lhs.tyGam)
                loc         .   tv                  =   tyVar . tgiTy $ @tgi
%%]

%%[9.tyVarGather
SEM PrExpr
  | Forall      loc         .   (tv,tgi)            =   let  t = mkTyVar @lUniq
                                                        in   (@lUniq,mkTGI t t)
                (prExpr.tyGam,lhs.tyGam)            =   tvGathFlow (@tyVar `gamUnit` @tgi) @lhs.tyGam @prExpr.tyGam
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Wildcard tvar gathering
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[2.tyVarWildL
ATTR TyExpr [ | | tyVarWildL USE {++} {[]}: TyVarIdL ]

SEM TyExpr
  | Wild        lhs         .   tyVarWildL          =   [@tyVarId]
%%]

%%[3.tyVarWildL
SEM TyExpr
  | VarWild     lhs         .   tyVarWildL          =   [@tyVarId]
%%]

%%[9
SEM TyExpr
  | Impls       lhs         .   tyVarWildL          =   [@implsVarId]
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Kind inferencing for TyExpr
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[6 hs
tyGamLookupOrAdd :: UID -> Cnstr -> HsName -> TyGam -> (TyGamInfo,TyGam)
tyGamLookupOrAdd uniq cnstr nm tyGam
  =  case tyGamLookup nm tyGam of
       Nothing    ->  let  t    =  mkNewTyVar uniq
                           tgi  =  mkTGI t t
                      in   (tgi,gamAdd nm tgi tyGam)
       Just tgi   ->  (cnstr |=> tgi,tyGam)
%%]

%%[6
ATTR AllTyExpr [ | kiCnstr: Cnstr | ]
ATTR TyExpr TyVar [ | | ki: Ty ]
ATTR TyExprs TyVars [ | | kiL: TyL ]

SEM TyExpr
  | Var VarWild
                (loc.tgi,lhs.tyGam)                 :=  tyGamLookupOrAdd @lUniq @lhs.kiCnstr @nm @lhs.tyGam
                loc         .   ki                  =   tgiKi @tgi
  | Wild        loc         .   tgi                 :=  let t = mkNewTyVar @tyVarId in mkTGI t t
                            .   ki                  =   tgiKi @tgi
  | Con         loc         .   (tgi,nmErrs)        :=  case tyGamLookup @nm @lhs.tyGam of
                                                          Nothing    ->  (mkTGI Ty_Any kiStar,[Err_NamesNotIntrod [@nm]])
                                                          Just tgi   ->  (@lhs.kiCnstr |=> tgi,[])
                loc         .   ki                  =   tgiKi @tgi
  | Quant       loc         .   (tv,tgi)            :=  let  t = mkTyVar @lUniq
                                                        in   (@lUniq,mkTGI t t)
  | App         loc         .   knFunKi             =   [@arg.ki] `mkArrow` mkNewTyVar @lUniq
                            .   fo_                 =   fitsIn weakFIOpts emptyFE @lUniq2 (@arg.kiCnstr |=> @func.ki) @knFunKi
                            .   fKi                 =   foTy @fo_
                            .   (_,ki)              =   tyArrowArgRes @fKi
                lhs         .   kiCnstr             =   foCnstr @fo_ |=> @arg.kiCnstr

SEM TyExprs
  | Nil         lhs         .   kiL                 =   []
  | Cons        lhs         .   kiL                 =   @hd.ki : @tl.kiL

SEM TyVar
  | Var         (loc.tgi,lhs.tyGam)                 :=  case tyGamLookup @nm (gamTop @lhs.tyGam) of
                                                          Nothing    ->  let  t    =  Ty_Var @lUniq TyVarCateg_Plain
                                                                              tgi  =  mkTGI t t
                                                                         in   (tgi,gamAdd @nm tgi @lhs.tyGam)
                                                          Just tgi   ->  (tgi,@lhs.tyGam)
                loc         .   ki                  =   tgiKi @tgi

SEM TyVars
  | Nil         lhs         .   kiL                 =   []
  | Cons        lhs         .   kiL                 =   @hd.ki : @tl.kiL
%%]

%%[7
SEM TyExpr
  | Row         loc         .   ki                  =   kiRow
%%]

%%[9
SEM TyExpr
  | Impls       loc         .   implsVarId          =   @lUniq
                            .   tgi                 =   mkTGI (Ty_Impls (Impls_Tail @implsVarId)) kiStar
                            .   ki                  =   tgiKi @tgi
  | NoImpls     loc         .   tgi                 =   mkTGI (Ty_Impls Impls_Nil) kiStar
                            .   ki                  =   tgiKi @tgi

SEM RowTyExpr
  | Var         (loc.tgi,lhs.tyGam)                 =   tyGamLookupOrAdd @lUniq @lhs.kiCnstr @nm @lhs.tyGam
                loc         .   fo_                 =   fitsIn weakFIOpts emptyFE @lUniq2 (tgiKi @tgi) kiRow
                            .   ki                  =   foTy @fo_
%%]

%%[9
ATTR PrExpr [ | | ki: Ty ]

SEM PrExpr
  | *           lhs         .   ki                  =   kiStar
  | Class       loc         .   fo_                 =   if @nmIsDef
                                                        then fitsIn weakFIOpts emptyFE @lUniq
                                                                (@tyExprs.kiCnstr |=> (@tyExprs.kiL `mkArrow` kiStar))
                                                                (@tyExprs.kiCnstr |=> pigiKi @pigi)
                                                        else emptyFO
                lhs         .   kiCnstr             =   foCnstr @fo_ |=> @tyExprs.kiCnstr
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Gamma/Environment for fitting
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[4.FIEnv
SEM TyExpr
  | *           loc         .   fe                  =   emptyFE
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Type of TyExpr, TyVar
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[1.ty
ATTR TyExpr [ | | ty: Ty ]

SEM TyExpr
  | Con         loc         .   ty                  =   Ty_Con @nm
  | App         loc         .   ty                  =   Ty_App @func.ty @arg.ty
%%]

%%[2.ty
SEM TyExpr
  | Wild        loc         .   ty                  =   tgiTy @tgi
%%]

%%[3
SEM TyExpr
  | Var VarWild
                loc         .   ty                  =   tgiTy @tgi
%%]

%%[4
SEM TyExpr
  | Quant       loc         .   ty                  =   Ty_Quant @qu @tv @tyExpr.ty
%%]

%%[5
ATTR TyExprs [ | | tyL: TyL ]

SEM TyExprs
  | Nil         lhs         .   tyL                 =   []
  | Cons        lhs         .   tyL                 =   @hd.ty : @tl.tyL
%%]

%%[5
ATTR TyVar [ | | ty: Ty ]
ATTR TyVars [ | | tyL: TyL ]

SEM TyVar
  | Var         lhs         .   ty                  =   tgiTy @tgi

SEM TyVars
  | Nil         lhs         .   tyL                 =   []
  | Cons        lhs         .   tyL                 =   @hd.ty : @tl.tyL
%%]

%%[9
SEM TyExpr
  | Impls NoImpls
                loc         .   ty                  =   tgiTy @tgi
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Records
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[7
ATTR RowTyExpr [ | | tyRow: Ty ]

SEM TyExpr
  | Row         loc         .   ty                  =   @rowTyExpr.tyRow

SEM RowTyExpr
  | Empty       lhs         .   tyRow               =   tyRowEmpty
  | Ext         lhs         .   tyRow               =   Ty_Ext @rowTyExpr.tyRow @nm @tyExpr.ty
%%]

%%[9
SEM RowTyExpr
  | Var         lhs         .   tyRow               =   tgiTy @tgi
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Predicates
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[9
ATTR PrExpr [ | | pr: Pred ]

SEM PrExpr
  | Class       loc         .   pr                  =   Pred_Class (@nm `mkConApp` @tyExprs.tyL)
  | Arrow Forall
                loc         .   pr                  =   Pred_Pred @prTy
%%]

%%[9
ATTR PrExpr [ | | prTy: Ty ]

SEM PrExpr
  | Arrow       loc         .   prTy                =   [@arg.prTy] `mkArrow` @res.prTy
  | Forall      loc         .   prTy                =   mkTyQu TyQu_Forall [@tv] @prExpr.prTy
  | * - Arrow Forall
                loc         .   prTy                =   @ty
%%]

%%[10
SEM PrExpr
  | Lacks       loc         .   pr                  =   Pred_Lacks @rowTyExpr.tyRow @nm
  | DynVar      loc         .   pr                  =   Pred_Class ((hsnDynVar `hsnConcat` @nm) `mkConApp` [@tyExpr.ty])
%%]

%%[9
ATTR PrExprs [ | | prL: {[Pred]} ]

SEM PrExprs
  | Nil         lhs         .   prL                 =   []
  | Cons        lhs         .   prL                 =   @hd.pr : @tl.prL
%%]

%%[9
ATTR PrExpr [ | | ty: Ty ]
ATTR PrExprs [ | | tyL: TyL ]

SEM PrExpr
  | *           loc         .   ty                  =   Ty_Pred @pr

SEM PrExprs
  | Nil         lhs         .   tyL                 =   []
  | Cons        lhs         .   tyL                 =   @hd.ty : @tl.tyL
%%]


