-------------------------------------------------------------------------
-- Main AG
-------------------------------------------------------------------------

{
module MainAG
  where

import IO
import Data.List
import UU.Pretty
import Utils
}

INCLUDE "RulerInfer2Pass.ag"

WRAPPER AGItf

-------------------------------------------------------------------------
-- AST
-------------------------------------------------------------------------

DATA AGItf
  | AGItf  e  : Expr
DATA Expr
  | App  f    : Expr
         a    : Expr
  | Int  int  : {Int}
  | Var  i    : {String}
  | Lam  i    : {String}
         b    : Expr
  | Let  i    : {String}
         e    : Expr
         b    : Expr

-------------------------------------------------------------------------
-- Initialisation
-------------------------------------------------------------------------

SEM AGItf
  | AGItf  e  .   g  =   []
              .   c  =   []

-------------------------------------------------------------------------
-- Pretty printing
-------------------------------------------------------------------------

ATTR AGItf Expr [ | | pp: PP_Doc ]

SEM Expr
  | App  lhs  .   pp   =   @f.pp >#< pp_parens @a.pp
                           >-< mkErr @mtErrs
  | Int  lhs  .   pp   =   pp @int
  | Var  lhs  .   pp   =   pp @i >-< mkErr @nmErrs
  | Lam  lhs  .   pp   =   "\\" >|< pp @i >#< "->" >#< @b.pp
  | Let  lhs  .   pp   =   "let"     >#< pp @i
                           >#< "::"  >#< show @pty_e_
                           >#< "="   >#< @e.pp
                           >-< "in " >#< @b.pp

-------------------------------------------------------------------------
-- Uniq
-------------------------------------------------------------------------

ATTR Expr [ | uniq: UID | ]

SEM AGItf
  | AGItf  e  .   uniq  =   uidStart