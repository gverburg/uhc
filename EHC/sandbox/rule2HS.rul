
external TyCon

scheme fitsInScheme "Ty" =
  view Equational =
    holes [ typeLeft : Ty, typeRight : Ty | | typeResult : Ty ]
    judgespec typeLeft <> typeRight : typeResult

relation guard "Bool" =
  view Equational =
    holes [ guardedExpr : Expr | | ]
    judgespec guardedExpr

ruleset fitsInRuleSet scheme fitsInScheme "Typerules for FitsIn" =
  rule fitsInCon =
    view Equational =
      judge P : guard = x == y  
      ---
      judge R : fitsInScheme = (TyCon x) <> (TyCon y) : (TyCon x)
