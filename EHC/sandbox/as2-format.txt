INPUT:
scheme scheme1 =
	view view1 =
	  holes [ node exprHole:Expr, shiznit:Expr| typeHole:Ty, gammaHole:Gam | ]
	  judgespec gammaHole :- exprHole : typeHole
	  judgeuse tex gammaHole :-.."exprAnnotation" exprHole : typeHole

ruleset ruleset1 scheme scheme1 "Expression type rules" =
        rule bla.int "Shizzle" = 
    view view1 =
	    -
    	judge scheme1 = gammaHole :- int : Int

OUTPUT:
[ Decl_AttrAG 
    (AttrAGDecl_Attr 
      scheme1 
      [] 
      [(gammaHole,Gam),(typeHole,Ty)] 
      []
    )
, Decl_RsVw 
    (RsVwDecl_Rs 
      ruleset1 
      scheme1 
      "Expression type rules" 
      [ VwDecl_Vw 
          view1 
          rules.view1.ruleset1 
          [RlDecl_AG 
            bla.int 
           ("bla","sandbox/test.rul"(line 8, column 14)) 
           (ARule_Rule 
             [scheme1] 
             Shizzle 
             ["rule bla.int","view view1"] 
             [ AEqn_Eqn 
                (AEqnDest_One (ANm_Lhs gammaHole [])) 
                (AExpr_Expr (Expr_Var gammaHole))
             , AEqn_Eqn 
                 (AEqnDest_One (ANm_Lhs typeHole [])) 
                 (AExpr_Expr (Expr_Var Int))
             ]
           )
          ]
      ]
    )
]
