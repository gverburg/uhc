%%[0
%include lhs2TeX.fmt
%include afp.fmt
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Gamma's
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[9
ATTR AllFuncDep [ | tyGam: TyGam | ]
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Class
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[9 hs
tyPrLToSupNmL :: TyL -> [HsName]
tyPrLToSupNmL = zipWith (\i p -> hsnSuffix (tyPredNm p) (show i)) [1..]
%%]

%%[9
SEM Decl
  | Class       tyPrExpr        .   tyGam           =   gamPushNew @lhs.tyGam
                loc             .   (ctxtPrTyL,hdPrTy)
                                                    =   tyArrowArgsRes @tyPrExpr.ty
                                .   clsNm           =   tyPredMatchNm @hdPrTy
                                .   lSigGam         =   @decls.gathTySigGam
                                .   clsTySigGam     =   valGamMapTy (\t -> [@hdPrTy] `mkArrow` t) @lSigGam
                                .   supClsNmL       =   tyPrLToSupNmL @ctxtPrTyL
                                .   clsFldL         =   assocLMapElt vgiTy (gamToAssocL @clsTySigGam)
                                .   clsAllFldL      =   @clsFldL ++ zip @supClsNmL (repeat Ty_Any)
                                .   clsTyRec        =   mkTyRec @clsAllFldL
                                .   dataDictNm      =   hsnClass2Dict @clsNm -- only used when `not ehcCfgClassViaRec'
                                .   dataDictTag     =   mkClassCTag @dataDictNm (length @clsAllFldL) -- only used when `not ehcCfgClassViaRec'
                                .   dictTag         =   if ehcCfgClassViaRec @lhs.opts then CTagRec else @dataDictTag
                                .   pigi            =   let  k =  mkNewTyVar @lUniq
                                                             n =  maybe (uidHNm @lUniq) id @mbDefaultInstNm
                                                             r =  Rule
                                                                    { rulRuleTy     = tyQuantifyClosed @tyPrExpr.ty
                                                                    , rulMkEvid     = mkEvid @lhs.opts ev
                                                                    , rulMkEvidHow  = ev
                                                                    , rulNmEvid     = n
                                                                    , rulId         = mkPrId @lhs.prfCtxtId @lUniq
                                                                    , rulCost       = mkPCostExec 10
                                                                    , rulFuncDeps   = @funcDeps.funcDeps
                                                                    }
                                                               where ev = MkEvidVar n
                                                        in   PrIntroGamInfo (tyQuantifyClosed ([@hdPrTy] `mkArrow` @clsTyRec)) k r
                                .   elimRules       =   let  mkR u sub sup supNm
                                                               =  Rule
                                                                    { rulRuleTy     = tyQuantifyClosed ([sub] `mkArrow` sup)
                                                                    , rulMkEvid     = mkEvid @lhs.opts ev
                                                                    , rulMkEvidHow  = ev
                                                                    , rulNmEvid     = hsnUnknown
                                                                    , rulId         = mkPrId @lhs.prfCtxtId u
                                                                    , rulCost       = pcostBase `pcostExecMulBy` 2
                                                                    , rulFuncDeps   = []
                                                                    }
                                                               where -- o   = (CExpr_Int . tyRecOffset supNm $ @clsTyRec)
                                                                     -- [subn] = take 1 hsnLclSupplyL
                                                                     ev = MkEvidSup supNm (tyRecOffset supNm @clsTyRec) @dictTag
                                                        in   zipWith3 (\p n u -> (tyPredMatchNm p,mkR u @hdPrTy p n)) @ctxtPrTyL @supClsNmL (mkNewUIDL (length @ctxtPrTyL) @lUniq2)
                lhs             .   patTyGam        =   @lhs.patTyGam
                                .   tyGam           =   @lhs.tyGam
                                .   gathTySigGam    =   valGamMapTy tyQuantifyClosed @clsTySigGam
                                .   patPrIntroGam   =   gamAdd @clsNm @pigi @lhs.patPrIntroGam
                                .   patPrElimTGam   =   foldr (\(n,r) g -> peTGamInsert @lhs.prfCtxtId n r g) @lhs.patPrElimTGam @elimRules
                                .   gathDataGam     =   if ehcCfgClassViaRec @lhs.opts
                                                        then @lhs.gathDataGam
                                                        else let dgi = mkDGI @dataDictNm (@dataDictNm `Map.singleton` emptyDataTagInfo {dtiCTag = @dataDictTag}) False
                                                        	 in  gamAdd @dataDictNm dgi @lhs.gathDataGam
%%]
                decls           .   gathTySigGam    =   gamPushNew @lhs.gathTySigGam
                loc             .   (lSigGam,_)     =   gamPop @decls.gathTySigGam
                lhs             .   gathTySigGam    =   gamAddGam (valGamMapTy tyQuantifyClosed @clsTySigGam) @lhs.gathTySigGam

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Functional dependency
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[9
ATTR AllFuncDep [ clsTyArgs: TyL | | funcDeps USE {++} {[]} : {[ClsFuncDep]} ]

SEM FuncDep
  | Dep         lhs             .   funcDeps        =   let  l v = maybe (-1) id . elemIndex v $ @lhs.clsTyArgs
                                                        in   [ClsFuncDep (map l @fromTvs.tyL) (map l @toTvs.tyL)]

SEM Decl
  | Class       loc             .   clsTyArgs       =   tyAppArgs . predTy . tyPred $ @hdPrTy
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Instance
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[9
SEM Decl
  | Instance InstanceIntro
                loc             .   instId          =   mkPrId @lhs.prfCtxtId @lUniq
  | Instance    tyPrExpr        .   tyGam           =   gamPushNew @lhs.tyGam
                loc             .   prTyFix         =   tyFixTyVars . tyQuantifyRank [2..] $ @tyPrExpr.ty
                                .   (ctxtPrTyFixL,hdPrTyFix)
                                                    =   tyArrowArgsRes @prTyFix
                                .   instClsNm       =   tyPredMatchNm @hdPrTyFix
                                .   ctxtClsNmL      =   map tyPredMatchNm @ctxtPrTyFixL
                                .   (dictNm,inclForElim)
                                                    =   maybe (poiHNm @instId,True) id @mbNmElim
                                .   pigi            =   maybe emptyPIGI id (gamLookup @instClsNm @lhs.prIntroGam)
                                .   supPrTyL        =   let  t      =  rulRuleTy . pigiRule $ @pigi
                                                             st     =  mkNewTyVarL (tyArrowArity . tyQuant $ t) @lUniq4 `mkArrow` @hdPrTyFix
                                                             fo     =  fitsIn predFIOpts @fe2 @lUniq3 t st
                                                        in   tyArrowArgs . foTy $ fo
                                .   supClsNmL       =   tyPrLToSupNmL @supPrTyL
                                .   ctxtPrFixL      =   map tyPred @ctxtPrTyFixL
                                .   recTy           =   tyFixTyVars $ tyQuantifyRank [2..] $ tyArrowRes $ @tyPrExpr.evTy
                                .   recTyExts       =   snd $ tyRecExts $ @recTy
                                .   dataDictNm      =   hsnClass2Dict @instClsNm -- only used when `not ehcCfgClassViaRec'
                                .   dataDictTag     =   mkClassCTag @dataDictNm (length @recTyExts) -- only used when `not ehcCfgClassViaRec'
                                .   dictTag         =   if ehcCfgClassViaRec @lhs.opts then CTagRec else @dataDictTag
                                .   tySigGam        =   assocLToGam $ assocLMapElt ValGamInfo $ @recTyExts
                loc             .   elimRule        =   mkInstElimRule @lhs.opts @dictNm @instId (length @ctxtPrTyFixL + length @supPrTyL) (tyQuantifyClosed @prTyFix)
                decls           .   patValGam       =   gamPushNew @lhs.patValGam
                lhs             .   patTyGam        =   @lhs.patTyGam
                                .   tyGam           =   @lhs.tyGam
                                .   gathTySigGam    =   maybe emptyGam (\(n,_) -> n `gamUnit` ValGamInfo (tyQuantifyClosed @tyPrExpr.evTy)) @mbNmElim
                                .   patValGam       =   @lhs.patValGam
                                .   patPrElimTGam   =   (if @inclForElim then peTGamInsert @lhs.prfCtxtId @instClsNm @elimRule else id) @lhs.patPrElimTGam
  | InstanceIntro
                loc             .   instClsNm       =   tyPredMatchNm @prExpr.ty
                                .   dictNm          =   maybe (poiHNm @instId) id @mbNmElim
                                .   elimRule        =   mkInstElimRule @lhs.opts @dictNm @instId 0 @prExpr.ty
                                .   patPrElimTGam   =   peTGamInsert @lhs.prfCtxtId @instClsNm @elimRule @lhs.patPrElimTGam
                loc             .   foPr            =   fitPredToEvid @lUniq @prExpr.ty @lhs.prIntroGam
                expr            .   knTy            =   foTy @foPr
%%]
                lhs             .   gathTySigGam    =   (maybe id (\(n,_) g -> gamAdd n (ValGamInfo (tyQuantifyClosed @tyPrExpr.evTy)) g) @mbNmElim) @lhs.gathTySigGam

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Names, yes/no introduced, gamma entries
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[9
ATTR AllTyExpr [ | | clNmS USE {`Set.union`} {Set.empty}: {Set.Set HsName}  clMissNmS USE {`Set.union`} {Set.empty}: {Set.Set HsName} ]

SEM PrExpr
  | Class       loc             .   (pigi,clNmS,clMissNmS)
                                                    =   case gamLookup @nm @lhs.prIntroGam of
                                                            Just p   -> (p          ,Set.singleton @nm  ,Set.empty          )
                                                            Nothing  -> (emptyPIGI  ,Set.empty          ,Set.singleton @nm  )
                                .   nmIsDef         =   Set.null @clMissNmS
                lhs             .   clNmS           =   @clNmS      `Set.union`  @tyExprs.clNmS
                                .   clMissNmS       =   @clMissNmS  `Set.union`  @tyExprs.clMissNmS
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Evidence type
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[9
ATTR TyExpr PrExpr [ | | evTy: Ty ]

SEM PrExpr
  | Class       lhs             .   evTy            =   let  fo = fitsIn  (predFIOpts {fioDontBind = ftv @ty}) @fe2 @lUniq3
                                                                          (pigiPrToEvidTy @pigi) ([@ty] `mkArrow` mkNewTyVar @lUniq2)
                                                        in   snd (tyArrowArgRes (foTy fo))
  | Arrow       lhs             .   evTy            =   [@arg.evTy] `mkArrow` @res.evTy

SEM TyExpr
  | App         loc             .   evTy            =   Ty_App @func.evTy @arg.evTy
  | * - App AppTop Parens Pred
                lhs             .   evTy            =   @ty
%%]

%%[10
SEM PrExpr
  | Lacks       lhs             .   evTy            =   tyInt
%%]



