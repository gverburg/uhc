%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Is main body 'main'?
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[8.mainUseExists
SEM AGItf
  | AGItf       loc         .   mainUseExists
                                            =   case @expr.letCBody of
                                                  CExpr_Var n | n == hsnMain -> True
                                                  _                          -> False
                            .   insertMainUse
                                            =   not @mainUseExists
%%]

%%[12
SEM AGItf
  | AGItf       loc         .   insertMainUse
                                            :=  not @mainUseExists && @lhs.isTopMod
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Does a binding for main exist?
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[8.mainDefExists
SEM AGItf
  | AGItf       loc         .   mainDefExists
                                            =   let ds = [ n | (_,g) <- @expr.letCBindL, (CBind_Bind n _) <- g, n == hsnMain ]
                                                in  not (null ds)
                            .   insertMainDef
                                            =   not @mainDefExists
%%]

%%[12
SEM AGItf
  | AGItf       loc         .   insertMainDef
                                            :=  not @mainDefExists && @lhs.isTopMod
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Generation of core
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[8
ATTR AGItf [ | | cmodule: CModule ]

SEM AGItf
  | AGItf       lhs         .   cmodule     =   let b = if @insertMainUse then CExpr_Var hsnMain else @expr.letCBody
                                                    d = if @insertMainDef then mkCExprLet CBindPlain [CBind_Bind hsnMain @expr.letCBody] else id
                                                in  CModule_Mod @lhs.moduleNm
                                                        (foldr (\(c,b) e -> mkCExprLet c b e) (d b) (@expr.frontCBindL ++ @expr.letCBindL))
                                                        [ (tn,Map.toList m) | (tn,dgi) <- gamToAssocL @expr.gathDataGam, not (dgiIsNewtype dgi), let m = Map.map dtiCTag $ dgiConstrTagMp dgi ]
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Expr
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

-- generated from ruler rules into EHRulerRules
  | IConst      loc         .   cexpr       =   CExpr_Int @int
  | CConst      loc         .   cexpr       =   CExpr_Char @char
  | Var         loc         .   cexpr       =   CExpr_Var @nm
  | Con         loc         .   cexpr       =   CExpr_Var @nm
%%[8
ATTR Expr [ | | cexpr: CExpr ]

SEM Expr
  | Let         loc         .   frontCBindL =   [(CBindFFI,@decls.ffiCBindL)]
                            .   howToBind   =   if @isStrict then CBindStrict else CBindRec
                            .   letCBindL   =   [(@howToBind,@decls.cbindL)]
                            .   cexpr       =   foldr (\(c,b) e -> mkCExprLet c b e) @body.cexpr @letCBindL
  | App AppImpred
                loc         .   cexpr       =   CExpr_App @func.cexpr @arg.cexpr
  | Lam         loc         .   cexpr       =   CExpr_Lam @arg.topNm
                                                    (rceMatch @rceEnv [@arg.topNm] [CAlt_Alt [@arg.cpat] @body.cexpr])
  | Case        loc         .   cexpr       =   let (ns,bs,as)
                                                      = if @isTupOfArg
                                                        then let ns = [ n | (CExpr_Var n) <- fuL2ExprL (reverse @expr.fuCExprL) ]
                                                             in  (ns,[],@alts.caltL')
                                                        else let n = uidHNm @lUniq2
                                                             in  ([n],[CBind_Bind n @expr.cexpr],@alts.caltL)
                                                in  mkCExprLet CBindPlain bs (rceMatch @rceEnv ns as)
  | AppTop Parens TypeAs
                loc         .   cexpr       =   @expr.cexpr
  | Undefined   loc         .   cexpr       =   cundefined @lhs.opts
  | CaseAltFail loc         .   cexpr       =   CExpr_CaseAltFail @caseId
%%]
  | Let         loc         .   letCBindL   =   [(CBindFFI,@decls.ffiCBindL),(CBindRec,@decls.cbindL)]

-- generated from ruler rules into EHRulerRules
  | IConst      loc         .   cexprBase   :=  CExpr_Int @int
  | CConst      loc         .   cexprBase   :=  CExpr_Char @char
  | Var         loc         .   cexprBase   :=  CExpr_Var @nm
  | Var IConst CConst
                loc         .   cexpr       :=  foAppCoe @fo_ @lhs.finTyCnstr @lhs.cSubst @cexprBase
  | Con         loc         .   cexprBase   :=  CExpr_Var @nm
                            .   cexpr       :=  foAppCoe @fo_ @lhs.finTyCnstr @lhs.cSubst @cexprBase
%%[9
SEM Expr
  | Let         loc         .   letCBindL   :=  [ (@howToBind,@decls.cbindL ++ (@cSubst `cSubstApp` (@prfIntroCBindL ++ @bodyPrfIntroCBindL))) ]
  | App AppImpred AppImpl
                loc         .   cexpr       :=  CExpr_App
                                                    (coeWipeWeave @lhs.finTyCnstr @lhs.cSubst @appImplsCoeL []
                                                      `coeEvalOn` @func.cexpr)
                                                    @arg.cexpr
  | Lam LamImpl loc         .   cexpr       :=  coeWipeWeave @lhs.finTyCnstr @lhs.cSubst @lamBodyCoeL @lamArgCoeL `coeEvalOn` @body.appFunCExpr
  | AppTop      loc         .   cexpr       :=  coeWipeWeave @lhs.finTyCnstr @lhs.cSubst [] @lamArgCoeL `coeEvalOn` @expr.cexpr
  | TypeAs      loc         .   cexpr       :=  foAppCoe @fo_ @lhs.finTyCnstr @lhs.cSubst @expr.cexpr
%%]

%%[10
SEM Expr
  | DynVar      loc         .   cexpr       =   cundefined @lhs.opts
%%]

%%[99
SEM PatExpr
  | Expr        loc         .   cexprBaseEq =   CExpr_Var hsnEq
                            .   cexpr       =   mkCExprApp (foAppCoe @fo_ @lhs.finTyCnstr @lhs.cSubst @cexprBaseEq)
                                                           [@expr.cexpr]
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Row based records, construction
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[8
SEM Expr
  | Rec         loc         .   rcexpr          =   if @recExpr.isExtFromEmpty
                                                    then  foldl CExpr_App (CExpr_Tup CTagRec)
                                                            $ fuL2ExprL $ tyRowCanonOrder $ @recExpr.fuCExprL
                                                    else  fuMkCExpr @lUniq3 (reverse @recExpr.fuCExprL) @recExpr.recCExpr
                            .   cexpr           =   @rcexpr
%%]

%%[8
ATTR RecExpr [ | | recCExpr: CExpr ]
ATTR RecExpr Expr [ | | fuCExprL: {FieldUpdateL CExpr} ]

SEM RecExpr
  | Empty       loc         .   recCExpr        =   CExpr_Tup CTagRec
                lhs         .   fuCExprL        =   []
  | Expr        loc         .   recCExpr        =   @expr.cexpr
                lhs         .   fuCExprL        =   []
  | Ext         loc         .   rcexpr          =   CExpr_TupIns @recExpr.recCExpr CTagRec @nm @offset @expr.cexpr
  | Upd         loc         .   rcexpr          =   CExpr_TupUpd @recExpr.recCExpr CTagRec @nm @offset @expr.cexpr
  | Ext Upd     lhs         .   fuCExprL        =   if @knRecHasLab
                                                    then (@nm,(@rcexpr,Nothing)) : @recExpr.fuCExprL
                                                    else @recExpr.fuCExprL

SEM Expr
  | * - Rec     lhs         .   fuCExprL        =   []
%%]

%%[88
ATTR RecExpr [ | | cexpr: CExpr ]

SEM RecExpr
  | Ext         loc         .   cexpr           =   CExpr_TupIns @recExpr.cexpr CTagRec @nm @offset @expr.cexpr
  | Upd         loc         .   cexpr           =   CExpr_TupUpd @recExpr.cexpr CTagRec @nm @offset @expr.cexpr
  | Empty Expr  loc         .   cexpr           =   @recCExpr
  | Ext Upd     lhs         .   cexpr           =   if @knRecHasLab then @cexpr else @recExpr.cexpr
%%]

%%[8
ATTR RecExpr [ | | isExtFromEmpty: Bool ]

SEM RecExpr
  | Empty       lhs         .   isExtFromEmpty  =   True
  | Expr        lhs         .   isExtFromEmpty  =   False
  | Upd         lhs         .   isExtFromEmpty  =   not @knRecHasLab && @recExpr.isExtFromEmpty
  | Ext         lhs         .   isExtFromEmpty  =   @recExpr.isExtFromEmpty
%%]

%%[8
SEM RecExpr
  | Ext Upd     loc         .   offset          =   CExpr_Int (tyRecOffset @nm (@lhs.finTyCnstr |=> @recExpr.ty))
%%]

%%[10
SEM RecExpr
  | Ext Upd     loc         .   offset          :=  @lhs.cSubst `cSubstApp` mkCExprPrHole @prUid
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Data based records, construction
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[8
SEM Expr
  | DataFields  loc         .   dfexpr      =   let mkTup dti mkDflt con
                                                      = foldl CExpr_App con
                                                        . fuL2ExprL
                                                        . listSaturateWith 0 (ctagArity (dtiCTag dti) - 1) (\(_,(_,Just o)) -> o) dflt
                                                        . fuMap (\l mke -> let o = dtiOffsetOfFld l dti in (mke dti o,o))
                                                      where dflt = [ (o,(f,(CExpr_TupIns (cundefined @lhs.opts) (dtiCTag dti) f (CExpr_Int o) (mkDflt f),Just o)))
                                                                   | (f,i) <- Map.toList $ dtiFldMp dti, let o = dfiOffset i
                                                                   ]
                                                in  if dgiIsNewtype @dgi
                                                    then mkCExprLet CBindPlain @dataFieldExpr.dfeCBindL
                                                         $ head $ fuL2ExprL $ fuMap (\_ f -> (f emptyDataTagInfo 0,0)) $ @dataFieldExpr.fuCExprL
                                                    else case @dataFieldExpr.mbConNm of
                                                           Just conNm
                                                             -> mkCExprLet CBindPlain @dataFieldExpr.dfeCBindL
                                                                  (mkTup (dgiDtiOfCon conNm @dgi) (const $ cundefined @lhs.opts) @dataFieldExpr.dfeCExpr @dataFieldExpr.fuCExprL)
                                                           _ -> mkCExprLet CBindPlain (err ++  @dataFieldExpr.dfeCBindL)
                                                                  (mkCExprSatSelsCases (@rceEnv {rceCaseCont = CExpr_Var en}) (Just $ mkHNm @lUniq) @dataFieldExpr.dfeCExpr alts)
                                                             where alts = [ ( dtiCTag dti
                                                                            , [ (f,f,dfiOffset i) | (f,i) <- Map.toList $ dtiFldMp dti ]
                                                                            , Nothing
                                                                            , mkTup dti CExpr_Var (CExpr_Tup $ dtiCTag dti) @dataFieldExpr.fuCExprL
                                                                            )
                                                                          | dti <- @dtiInFldL
                                                                          ]
                                                                   err = [CBind_Bind en (cerror @lhs.opts ("has no field update '" ++ show @fldL ++ "'"))]
                                                                   en = HNm "_upd_error"
                            .   cexpr       =   @dfexpr
%%]

%%[8
ATTR
  DataFieldExpr
    [ | | dfeCExpr: CExpr
          dfeCBindL: CBindL
          fuCExprL: {FieldUpdateL (DataTagInfo -> Int -> CExpr)}
    ]

SEM DataFieldExpr
  | Upd         loc         .   fldExprNm   =   mkHNm @lUniq
                lhs         .   fuCExprL    =   let mke dti o = CExpr_TupIns @dataFieldExpr.dfeCExpr (dtiCTag dti) @nm (CExpr_Int o) (CExpr_Var @fldExprNm)
                                                in  (@nm,(mke,Nothing)) : @dataFieldExpr.fuCExprL
                            .   dfeCBindL   =   CBind_Bind @fldExprNm @expr.cexpr : @dataFieldExpr.dfeCBindL
  | Con         lhs         .   dfeCExpr    =   CExpr_Tup (dtiCTag @dti)
                            .   fuCExprL    =   []
                            .   dfeCBindL   =   []
  | Expr        loc         .   dfeCExpr    =   @expr.cexpr
                            .   fuCExprL    =   []
                            .   dfeCBindL   =   []

%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Row based records, dissection
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[8
SEM Expr
  | Sel         loc         .   offset          =   CExpr_Int (tyRecOffset @lbl (@lhs.finTyCnstr |=> @expr.ty))
                            .   cexpr           =   let  [n1,n2] = map uidHNm . mkNewUIDL 2 $ @lUniq
                                                    in   mkCExprSelCase @rceEnv (Just n1) @expr.cexpr CTagRec n2 @lbl @offset Nothing
%%]

%%[10
SEM Expr
  | Sel         loc         .   offset          :=  @lhs.cSubst `cSubstApp` mkCExprPrHole @prUid
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Data constr wrapper
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[8
ATTR AllDataConstr [ dataAltTy: Ty | | ]

SEM DataConstr
  | Constr      lhs         .   cbindL      =   let len = length @fields.fldTyL
                                                    nms = map (\i -> HNm ("x" ++ show i)) [1..len]
                                                in  if @lhs.isNewtype
                                                    then [ CBind_Bind @conNm (CExpr_Var $ ehbnId $ ehcOptBuiltinNames @lhs.opts) ]
                                                    else [ CBind_Bind @conNm
                                                             (mkCExprLam nms
                                                               (mkCExprApp (CExpr_Tup @ctag)
                                                                 (map CExpr_Var nms)))
                                                         ]
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Data field selector
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[8
SEM Decl
  | Data        loc         .   fldSelCBindL=   let (xn1:xn2:_) = hsnLclSupplyL
                                                    tgSels f i = [ (t,[(f,f,o)],Nothing,CExpr_Var f) | (t,o) <- Map.toList $ dficInTagMp i ]
                                                in  if @isNewtype
                                                    then [ [ CBind_Bind f (CExpr_Var $ ehbnId $ ehcOptBuiltinNames @lhs.opts)
                                                           | (f,i) <- Map.toList $ dgiFldInConstrMp @dgi
                                                         ] ]
                                                    else [ [ CBind_Bind f
                                                               (mkCExprLam [xn1]
                                                                 (mkCExprSatSelsCases (@rceEnv {rceCaseCont = CExpr_Var en}) (Just xn2) (CExpr_Var xn1) (tgSels f i)))
                                                           , CBind_Bind en (cerror @lhs.opts ("has no field selection '" ++ show f ++ "'"))
                                                           ]
                                                         | (f,i) <- Map.toList $ dgiFldInConstrMp @dgi
                                                         , let en = hsnSuffix f "_datafield_sel_error"
                                                         ]
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Data: all bindings
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[8
SEM Decl
  | Data        lhs         .   cbindL      =   concat @fldSelCBindL ++ @constrs.cbindL
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Pat for use in case alt
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[8
SEM PatExpr
  | Var VarAs AppTop Rec DataFields Con IConst CConst SConst FConst
%%[[99
    Expr
%%]]
                loc         .   cpNm        =   maybe (CPatNmUniq @topNm) CPatNmOrig @mbTopNm
%%]

%%[8
SEM PatExpr
  | AppTop Con  loc         .   finResTy    =   @lhs.finTyCnstr |=> @ty_r_
                            .   tag         =   let  (c,_)  = tyAppFunArgs @finResTy
                                                     dgi    = panicJust ("PatExpr.{AppTop,Con}.dgi:" ++ show (tyConNm c))
                                                              $ dataGamLookup (tyConNm c) $ @lhs.dataGam
                                                in   panicJust "PatExpr.{AppTop,Con}.tag"
                                                     $ fmap dtiCTag $ Map.lookup @appFunNm $ dgiConstrTagMp dgi
                            .   rest        =   CPatRest_Empty
  | Rec         loc         .   tag         =   CTagRec
                            .   rest        =   @recPatExpr.patCRest
  | DataFields  loc         .   tag         =   dtiCTag @dataFieldPatExpr.dti
                            .   rest        =   @dataFieldPatExpr.patCRest
%%]

%%[8 hs
fsL2PatOffsetL :: FieldSplitL -> AssocL CPatBind (Maybe Int)
fsL2PatOffsetL l = [ (CPatBind_Bind n oe n p,Just oi) | (o,(foff,p)) <- zip [0..] l, let (oi,oe) = foffMkOff foff o, let n = foffLabel foff ]
%%]

%%[8
SEM PatExpr
  | AppTop      loc         .   cpatBinds   =   fsL2PatOffsetL $ reverse                   $ @fsCPatL
  | Rec         loc         .   cpatBinds   =   fsL2PatOffsetL $ tyRowCanonOrderBy compare $ @fsCPatL
  | DataFields  loc         .   (cpatBindss,cpatBindsNonSat)
                                            =   let fsL = reverse @fsCPatL
                                                    grp = groupByOn (\o1 o2 -> (foffOffset o1 `compare` foffOffset o2) /= GT) fst
                                                    max = ctagArity @tag - 1
                                                    sat = listSaturateWith 0 max (foffOffset . fst)
                                                            (zipWith (\o n -> (o,(FldKnownOffset n o,CPat_Var (CPatNmOrig n)))) [0..max] hsnLclSupplyL)
                                                in  ( map (fsL2PatOffsetL . sat) $ grp fsL
                                                    , fsL2PatOffsetL fsL
                                                    )
%%]

%%[8
ATTR PatExpr [ | | cpat: CPat ]

SEM PatExpr
  | IConst      loc         .   cpat        =   CPat_Int @cpNm @int
  | CConst      loc         .   cpat        =   CPat_Char @cpNm @char
  | FConst      loc         .   cpat        =   CPat_Int @cpNm (-1) -- for now
  | SConst      loc         .   cpat        =   CPat_Int @cpNm (-1) -- for now
  | Var         loc         .   cpat        =   CPat_Var @cpNm
  | VarAs       loc         .   cpat        =   case @patExpr.cpat of
                                                    CPat_Con  _ t bs  -> CPat_Con  @cpNm t bs
                                                    CPat_Int  _ i     -> CPat_Int  @cpNm i
                                                    CPat_Char _ c     -> CPat_Char @cpNm c
                                                    _                 -> @patExpr.cpat
  | Con         loc         .   cpat        =   CPat_Con @cpNm @tag (CPatConBind_One CPatRest_Empty [])
  | AppTop      loc         .   cpat        =   CPat_Con @cpNm @tag (CPatConBind_One @rest (map fst @cpatBinds))
  | Rec         loc         .   cpat        =   case @rest of
                                                    CPatRest_Empty
                                                      ->  CPat_Con @cpNm @tag (CPatConBind_One @rest (map fst @cpatBinds))
                                                    CPatRest_Var r
                                                      ->  CPat_Con @cpNm @tag (CPatConBind_One @rest pbL)
                                                          where  pbL = map fst $ fsL2PatOffsetL $ fsLReorder $ reverse $ @fsCPatL
  | DataFields  loc         .   cpat        =   CPat_Con @cpNm @tag (cpatConBindUnFlatten $ map (CPatConBind_One @rest . map fst) $ @cpatBindss)
%%]

%%[99
SEM PatExpr
  | Expr        loc         .   cpat        =   CPat_BoolExpr @cpNm @cexpr
%%]

%%[8
ATTR AllPatExpr [ | | patCRest: CPatRest ]

SEM RecPatExpr
  | Empty       lhs         .   patCRest    =   CPatRest_Empty
  | Ext         lhs         .   patCRest    =   @recPatExpr.patCRest

SEM DataFieldPatExpr
  | Con         lhs         .   patCRest    =   CPatRest_Empty
  | Ext         lhs         .   patCRest    =   @dataFieldPatExpr.patCRest

SEM PatExpr
  | Var         lhs         .   patCRest    =   CPatRest_Var @nm
  | * - Var     lhs         .   patCRest    =   CPatRest_Empty
%%]

%%[8
ATTR AllPatExpr [ | | fsCPatL: FieldSplitL ]

SEM DataFieldPatExpr
  | Con         lhs         .   fsCPatL     =   []
  | Ext         lhs         .   fsCPatL     =   (FldKnownOffset @nm @ioffset,@patExpr.cpat) : @dataFieldPatExpr.fsCPatL

SEM RecPatExpr
  | Empty       lhs         .   fsCPatL     =   []
  | Ext         lhs         .   fsCPatL     =   (FldComputeOffset @nm @offset,@patExpr.cpat) : @recPatExpr.fsCPatL

SEM PatExpr
  | App         lhs         .   fsCPatL     =   (FldImplicitOffset,@arg.cpat) : @func.fsCPatL
  | AppTop      loc         .   fsCPatL     =   @patExpr.fsCPatL
  | Rec         loc         .   fsCPatL     =   @recPatExpr.fsCPatL
  | DataFields  loc         .   fsCPatL     =   @dataFieldPatExpr.fsCPatL
  | Con         loc         .   fsCPatL     =   []
  | * - App Con Rec
                lhs         .   fsCPatL     =   []
%%]

%%[8
SEM DataFieldPatExpr
  | Ext         loc         .   ioffset     =   dfiOffset $ panicJust "DataFieldPatExpr.Ext.ioffset" $ Map.lookup @nm $ dtiFldMp @dataFieldPatExpr.dti
                            .   offset      =   CExpr_Int @ioffset

SEM RecPatExpr
  | Ext         loc         .   offset      =   CExpr_Int (tyRecOffset @nm (@lhs.finTyCnstr |=> @recPatExpr.ty))
%%]

%%[10
SEM RecPatExpr
  | Ext         loc         .   offset      :=  @lhs.cSubst `cSubstApp` mkCExprPrHole @prUid
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Gathering coercions/cexpr for app args for optimization by weaving above apptop
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[9
ATTR Expr [ | | appArgCoeL: {[Coe]}  appFunCExpr: CExpr ]

SEM Expr
  | App AppImpl
                lhs         .   appArgCoeL      =   @func.appArgCoeL ++ @appImplsCoeL ++ [mkAppCoe [@arg.cexpr]]
                            .   appFunCExpr     =   @func.appFunCExpr
  | AppTop      lhs         .   (appArgCoeL,appFunCExpr)
                                                =   if null @lamArgCoeL
                                                    then (@expr.appArgCoeL,@expr.appFunCExpr)
                                                    else ([],@cexpr)
  | * - App AppImpl AppTop
                lhs         .   appArgCoeL      =   []
                            .   appFunCExpr     =   @cexpr
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Decl
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[8
ATTR Decls Decl AllDataConstr [ | | cbindL, ffiCBindL USE {++} {[]}: CBindL ]

SEM Decl
  | Val         lhs         .   cbindL          =   [CBind_Bind @patExpr.topNm @expr.cexpr] ++ @patExpr.cbindL
  | TySig       lhs         .   cbindL          =   []
  | FFI         lhs         .   ffiCBindL       =   [CBind_FFI @callconv @safety @impEnt @nm @ty_sig_]
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Let bindings + front bindings + body separately
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Front bindings are inserted before the other bindings, though only on top level.
Meant for global defs like FFI

%%[8
ATTR Expr [ | | letCBindL: {[(CBindCateg,CBindL)]}  frontCBindL: {[(CBindCateg,CBindL)]}  letCBody: CExpr ]

SEM Expr
  | Let         lhs         .   letCBody        =   @body.letCBody
                            .   letCBindL       =   @letCBindL ++ @body.letCBindL
                            .   frontCBindL     =   @frontCBindL ++ @body.frontCBindL
  | * - Let     lhs         .   letCBody        =   @cexpr
                            .   letCBindL       =   []
                            .   frontCBindL     =   []
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Class
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[9 hs
cdictOffset :: HsName -> Ty -> Int
cdictOffset n r = tyRecOffset n $ r
%%]

%%[9
SEM Decl
  | Class       lhs         .   cbindL      =   let  x = HNm "x"
                                                     vx = CExpr_Var x
                                                     xStrict = hsnSuffix x "!"
                                                     vxStrict = CExpr_Var xStrict
                                                     mkSel n = mkCExprSatSelsCase ((emptyRCEEnv @lhs.opts) {rceDataGam = @lhs.dataGam}) (Just xStrict) vx @dictTag
                                                                                  [(n,n,cdictOffset n @clsTyRec)] Nothing (CExpr_Var n)
                                                     dDflt
                                                       = [CBind_Bind nDflt (mkCExprLam [nD] d)] 
                                                       where nDflt = rulNmEvid . pigiRule $ @pigi
                                                             d = mkCExprApp (CExpr_Tup @dictTag) (replicate (length $ snd $ tyRecExts $ @clsTyRec) (cundefined @lhs.opts))
                                                             nD = hsnPrefix "_self_" nDflt
                                                in   (maybe dDflt (const []) @mbDefaultInstNm)
                                                     ++ [ CBind_Bind n (x `CExpr_Lam` (mkSel n `CExpr_App` vx))
                                                        | (n,_) <- @clsFldL
                                                        ]
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Instance
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


%%[9
SEM Decl
  | Instance    lhs         .   cbindL      =   let  off n = cdictOffset n @recTy
                                                     mkSetFlds1 d bs
                                                       = foldl (\d (CBind_Bind n v) -> mkSet d n v) d bs
                                                       where mkSet d n v = CExpr_TupUpd d @dictTag n (CExpr_Int $ off n) v
                                                     mkSetFlds2 d bs
                                                       = mkCExprSatSelsCaseUpd env Nothing d @dictTag (length @recTyExts) offValL Nothing
                                                       where env = (emptyRCEEnv @lhs.opts) {rceDataGam = @lhs.dataGam}
                                                             offValL = [ (off n,v) | (CBind_Bind n v) <- bs ]
                                                     mkSetFlds = if ehcCfgClassViaRec @lhs.opts then mkSetFlds1 else mkSetFlds2
                                                     d = case @instVariant of
                                                           InstNormal
                                                             -> dD
                                                             where nDflt = rulNmEvid . pigiRule $ @pigi
                                                                   nStrictDflt = hsnSuffix nDflt "!"
                                                                   nR = hsnPrefix "_res_" @dictNm
                                                                   nStrictR = hsnSuffix nR "!"
                                                                   dDflt = mkCExprStrictIn nStrictDflt (CExpr_App (CExpr_Var nDflt) (CExpr_Var nR))
                                                                             (\d -> mkSetFlds d (zipWith CBind_Bind @supClsNmL @supPrfEvidL))
                                                                   dD = mkCExprLam @ctxtArgNmL
                                                                          (mkCExprLetRec
                                                                              ([CBind_Bind nR
                                                                                  (mkCExprStrictIn nStrictR dDflt (\d -> mkSetFlds d @decls.cbindL))]
                                                                               ++ (@cSubst `cSubstApp` (@supPrfIntroCBindL ++ @prfIntroCBindL)))
                                                                              (CExpr_Var nR)
                                                                          )
                                                           InstDefault
                                                             -> dD
                                                             where nD = hsnPrefix "_self_" @dictNm
                                                                   nR = hsnPrefix "_res_" @dictNm
                                                                   dD = mkCExprLam [nD]
                                                                          (mkCExprLetRec
                                                                              [CBind_Bind nR
                                                                                  (mkCExprApp (CExpr_Tup @dictTag)
                                                                                      (map (\(n,_) -> maybe (cundefined @lhs.opts) id (lookupBnd n)) $ tyRowCanonOrder $ @recTyExts))]
                                                                              (CExpr_Var nR))
                                                                   lookupBnd
                                                                     = \n -> lookup n b
                                                                     where b = map (\(CBind_Bind n v) -> (n,v)) @decls.cbindL
                                                in   [CBind_Bind @dictNm (@cSubst `cSubstApp` d)]
  | InstanceIntro
                lhs         .   cbindL      =   [CBind_Bind @dictNm @expr.cexpr]
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Case
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[8
%%]
ATTR AllCase [ | | mkAlts: MkAlts ]

SEM CaseAlt
  | Pat         lhs         .   mkAlts      =   \n -> [@patExpr.mkAlt n @expr.cexpr]

SEM CaseAlts
  | Nil         lhs         .   mkAlts      =   \n -> []
  | Cons        lhs         .   mkAlts      =   \n -> @hd.mkAlts n ++ @tl.mkAlts n

%%[8
ATTR CaseAlt [ | | calt: CAlt  calt': CAlt ]
ATTR CaseAlts [ | | caltL: CAltL  caltL': CAltL ]

SEM CaseAlt
  | Pat         lhs         .   calt        =   CAlt_Alt [@patExpr.cpat] @expr.cexpr
                            .   calt'       =   CAlt_Alt (fsL2PatL $ reverse @patExpr.fsCPatL) @expr.cexpr

SEM CaseAlts
  | Nil         lhs         .   caltL       =   []
                            .   caltL'      =   []
  | Cons        lhs         .   caltL       =   @hd.calt  : @tl.caltL
                            .   caltL'      =   @hd.calt' : @tl.caltL'
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Pat for use in (recursive) let bindings (lazy unpacking)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[8 hs
cpatBindL2CBindL :: RCEEnv -> Bool -> HsName -> CTag -> MbCPatRest -> AssocL CPatBind (Maybe Int) -> [CBind]
cpatBindL2CBindL env hasSub parNm ct rest pbL 
  = concat
    $  map  (\(CPatBind_Bind l o _ p,mbOff)
                -> let  b n = [CBind_Bind n (mkc n mbOff)]
                        pn  = parNm
                        pn' = hsnSuffix pn "!"
                        mkc n (Just o) = mkCExprSatSelCase env (Just pn') (CExpr_Var pn) ct n l o rest
                        mkc n Nothing  = mkCExprSelCase    env (Just pn') (CExpr_Var pn) ct n l o rest
                   in   case cpatVarNm p of
                            CPatNmOrig n           -> b n
                            CPatNmUniq n | hasSub  -> b n
                            _                      -> []
            )
    $  pbL
%%]

%%[8
ATTR AllPatExpr [ | | cbindL USE {++} {[]}: CBindL ]

SEM PatExpr
  | AppTop Rec  loc         .   cbindL      =   cpatBindL2CBindL @rceEnv (not $ null @cbindLSub) @lhs.ceParentNm @tag (Just (@rest,length @fsCPatL)) @cpatBinds 
  | DataFields  loc         .   cbindL      =   cpatBindL2CBindL @rceEnv (not $ null @cbindLSub) @lhs.ceParentNm @tag (Just (@rest,ctagArity @tag)) @cpatBindsNonSat 
  | AppTop Rec DataFields
                lhs         .   cbindL      =   @cbindL ++ @cbindLSub
%%]

%%[8
SEM PatExpr
  | AppTop      loc         .   cbindLSub   =   @patExpr.cbindL
  | Rec         loc         .   cbindLSub   =   @recPatExpr.cbindL
  | DataFields  loc         .   cbindLSub   =   @dataFieldPatExpr.cbindL
%%]

%%[8
ATTR AllPatExpr [ ceParentNm: HsName | | ]

SEM PatExpr
  | App         arg         .   ceParentNm  =   cpatNmNm (cpatVarNm @arg.cpat)

SEM RecPatExpr
  | Ext         patExpr     .   ceParentNm  =   cpatNmNm (cpatVarNm @patExpr.cpat)

SEM Decl
  | Val         patExpr     .   ceParentNm  =   @patExpr.topNm

SEM CaseAlt
  | Pat         patExpr     .   ceParentNm  =   @patExpr.topNm

SEM Expr
  | Lam         arg         .   ceParentNm  =   @arg.topNm
%%]

%%[9
SEM Expr
  | LamImpl     arg         .   ceParentNm  =   @arg.topNm
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Reordering of Case Expression (RCE)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[8 hs
type RCEAltL = [CAlt]
%%]

%%[8 hs
data RCESplitCateg
  = RCESplitVar | RCESplitCon | RCESplitConMany | RCESplitConst
%%[[99
  | RCESplitBoolExpr
%%]]
  deriving Eq

rceSplitMustBeOnItsOwn :: RCESplitCateg -> Bool
rceSplitMustBeOnItsOwn RCESplitConMany = True
rceSplitMustBeOnItsOwn _               = False
%%]

%%[8 hs
rceSplit :: (CAlt -> RCESplitCateg) -> RCEAltL -> [RCEAltL]
rceSplit f []   = []
rceSplit f [x]  = [[x]]
rceSplit f (x:xs@(x':_))
  | xcateg == f x'
    && not (rceSplitMustBeOnItsOwn xcateg)
      = let (z:zs) = rceSplit f xs
        in  (x:z) : zs
  | otherwise
      = [x] : rceSplit f xs
  where xcateg = f x

rceRebinds :: HsName -> RCEAltL -> CBindL
rceRebinds nm alts = [ CBind_Bind n (CExpr_Var nm) | (CPatNmOrig n) <- caltLPatNms alts, n /= nm ]

rceMatchVar :: RCEEnv ->  [HsName] -> RCEAltL -> CExpr
rceMatchVar env (arg:args') alts
  = mkCExprLet CBindPlain (rceRebinds arg alts) remMatch
  where remMatch  = rceMatch env args' [CAlt_Alt remPats e | (CAlt_Alt (CPat_Var n : remPats) e) <- alts]

rceMkAltAndSubAlts :: RCEEnv -> [HsName] -> RCEAltL -> CAlt
rceMkAltAndSubAlts env (arg:args) alts@(alt:_)
  = CAlt_Alt [altPat] (mkCExprLet CBindPlain (rceRebinds arg alts) subMatch)
  where (subAlts,subAltSubNms)
          =  unzip
               [ (CAlt_Alt (pats ++ ps) e, map (cpatNmNm . cpatVarNm) pats)
               | (CAlt_Alt (CPat_Con _ _ (CPatConBind_One _ pbinds) : ps) e) <- alts
               , let pats = [ p | (CPatBind_Bind _ _ _ p) <- pbinds ]
               ]
        subMatch
          =  rceMatch env (head subAltSubNms ++ args) subAlts
        altPat
          =  case alt of
               CAlt_Alt (CPat_Con n t (CPatConBind_One r pbL) : _) _
                 ->  CPat_Con n t (CPatConBind_One r pbL')
                     where  pbL' = [ CPatBind_Bind l o n (CPat_Var (cpatVarNm p)) | (CPatBind_Bind l o n p) <- pbL ]

rceMatchCon :: RCEEnv -> [HsName] -> RCEAltL -> CExpr
rceMatchCon env (arg:args) alts
  = mkCExprStrictSatCase env (Just arg') (CExpr_Var arg) alts'
  where arg'   =  hsnSuffix arg "!"
        alts'  =  map (rceMkAltAndSubAlts env (arg':args))
                  $ groupSortOn (ctagTag . caltTag)
                  $ filter (not . null . caltPatL)
                  $ alts

rceMatchConMany :: RCEEnv -> [HsName] -> RCEAltL -> CExpr
rceMatchConMany env (arg:args) [CAlt_Alt (CPat_Con n t (CPatConBind_Many bs) : ps) e]
  = mkCExprStrictIn arg' (CExpr_Var arg) (\_ -> foldr (\mka e -> rceMatch env [arg'] (mka e)) (rceMatch env (arg':args) altslast) altsinit)
  where arg' = hsnSuffix arg "!"
        altsinit = [ \e -> [CAlt_Alt (CPat_Con n t b     : []) e] | b <- bsinit ]
        altslast =         [CAlt_Alt (CPat_Con n t blast : ps) e]
        (bsinit,blast) = panicJust "rceMatchConMany" $ initlast bs

rceMatchConst :: RCEEnv -> [HsName] -> RCEAltL -> CExpr
rceMatchConst env (arg:args) alts
  = mkCExprStrictIn arg' (CExpr_Var arg) (\n -> mkCExprLet CBindPlain (rceRebinds arg alts') (CExpr_Case n alts' (rceCaseCont env)))
  where arg' = hsnSuffix arg "!"
        alts' = [ CAlt_Alt p (cSubstCaseAltFail (rceCaseFailSubst env) e) | (CAlt_Alt p e) <- alts ]

rceMatchSplits :: RCEEnv -> [HsName] -> RCEAltL -> CExpr
rceMatchSplits env args alts@(alt:_)
  |  caltIsVar      alt  = rceMatchVar      env args alts
  |  caltIsConst    alt  = rceMatchConst    env args alts
%%[[99
  |  caltIsBoolExpr alt  = rceMatchBoolExpr env args alts
%%]]
  |  caltIsConMany  alt  = rceMatchConMany  env args alts
  |  otherwise           = rceMatchCon      env args alts

rceMatch :: RCEEnv -> [HsName] -> RCEAltL -> CExpr
rceMatch env [] []    =  rceCaseCont env
rceMatch env [] alts  
  =  case [ e | (CAlt_Alt [] e) <- alts ] of
       (e:_)  -> cSubstCaseAltFail (rceCaseFailSubst env) e
       _      -> rceCaseCont env
rceMatch env args alts
  =  foldr
        (\alts e
           ->  case e of
                  CExpr_Var _
                     ->  rceMatchSplits (rceUpdEnv e env) args alts
                  _  ->  mkCExprLet CBindPlain [CBind_Bind nc e] ce'
                     where nc  = hsnPrefix "_casecont_" (cpatNmNm . cpatVarNm . caltPat . head $ alts)
                           ce' = rceMatchSplits (rceUpdEnv vc env) args alts
                           vc  = CExpr_Var nc
        )
        (rceCaseCont env)
     $ (rceSplit (\a -> if      caltIsVar       a  then RCESplitVar
                        else if caltIsConst     a  then RCESplitConst
%%[[99
                        else if caltIsBoolExpr  a  then RCESplitBoolExpr
%%]]
                        else if caltIsConMany   a  then RCESplitConMany
                                                   else RCESplitCon
                 ) alts)

rceUpdEnv :: CExpr -> RCEEnv -> RCEEnv
rceUpdEnv e env
  = env { rceCaseFailSubst = Map.insert (rceCaseId env) e (rceCaseFailSubst env)
        , rceCaseCont = e
        }
%%]

%%[99 hs
-- for now
rceMatchBoolExpr :: RCEEnv -> [HsName] -> RCEAltL -> CExpr
rceMatchBoolExpr env (arg:args) alts = rceCaseCont env
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% RCEEnv
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[8
SEM Expr
  | Lam Sel DataFields
%%[[9
    LamImpl
%%]]
                loc         .   rceEnv      =   (emptyRCEEnv @lhs.opts) { rceValGam = @lhs.valGam, rceDataGam = @lhs.dataGam }
  | Case        loc         .   rceEnv      =   (emptyRCEEnv @lhs.opts)
                                                            { rceValGam = @lhs.valGam, rceDataGam = @lhs.dataGam
                                                            , rceCaseId = maybe uidStart id @mbCaseId
                                                            }
%%]

%%[8
SEM PatExpr
  | AppTop Rec DataFields
                loc         .   rceEnv      =   (emptyRCEEnv @lhs.opts) { rceValGam = @lhs.valGam, rceDataGam = @lhs.dataGam }
%%]

%%[8
SEM Decl
  | Data        loc         .   rceEnv      =   (emptyRCEEnv @lhs.opts) { rceValGam = @lhs.valGam, rceDataGam = @lhs.dataGam }
%%]

