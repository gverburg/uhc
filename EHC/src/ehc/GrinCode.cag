%%[0
%include lhs2TeX.fmt
%include afp.fmt
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Haskell importable interface to GRIN code
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[8 hs module {%{EH}GrinCode} import({%{EH}Base.Common},{%{EH}Base.Builtin},UU.Pretty) export(GrAGItf(..), GrModule(..), GrExpr(..), GrBind(..), GrBindL, GrGlobal(..), GrGlobalL)
%%]

%%[8 hs export(GrAlt(..), GrAltL, GrPat(..), GrPatL, GrVal(..), GrValL, GrTag(..), GrTagL, GrAdapt(..),GrAdaptL,GrSplit(..),GrSplitL)
%%]

%%[8 hs export(GrTagCateg(..),grinStoreArity,mkGrBox,mkGrTagNode,mkGrRecNode,mkGrConNode)
%%]

%%[8 hs export(mkGrPatRecNode,mkGrPatConNode,mkGrPatTagNode,mkGrPatRecSplit,mkGrPatConSplit,mkGrUnbox,mkGrUnboxFFI)
%%]

%%[8 hs export(GrNodeAdapt(..),grRecTag,hsnGrApply,hsnGrEval,grBuiltinTyNmL)
%%]

%%[8 hs export(EvApTagKey,EvApTagElt(..),EvApTagMp)
%%]

%%[8 import({GrinCode/AbsSyn})
DERIVING *     : Show, Eq
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Special names
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[8 hs
hsnGrApply  = HNm "!apply"
hsnGrEval   = HNm "!eval"

grBuiltinTyNmL = [ hsnInt, hsnChar, hsnPackedString ] ++ map hsnProd (0:[2..10])
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Tag categories
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[8 hs
data GrTagCateg
  =  GrTagCon
  |  GrTagHole
  |  GrTagRec
  |  GrTagApp
  |  GrTagFun
  |  GrTagPApp {grtgNeeds :: Int}
  |  GrTagWorld
  deriving (Eq,Ord)

instance Show GrTagCateg where
  show GrTagCon         = "C"
  show GrTagHole        = "H"
  show GrTagRec         = "R"
  show GrTagApp         = "A"
  show GrTagFun         = "F"
  show (GrTagPApp need) = "P/" ++ show need

instance PP GrTagCateg where
  pp t = text (show t)

%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Misc info passed to backend
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[8 hs
type EvApTagKey   = (GrTag,Int)
data EvApTagElt   = EvApTagTag GrTag | EvApTagVar HsName | EvApTagUnit | EvApTagThrow deriving (Eq,Show)
type EvApTagMp    = AssocL EvApTagKey EvApTagElt
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Row/record
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[8 hs
data GrNodeAdapt = GrNodeUpd | GrNodeExt deriving (Show,Eq)

grRecTag :: GrTag
grRecTag = GrTag_Lit GrTagRec 0 hsnRec
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Node construction
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[8 hs

grinStoreArity :: Bool
grinStoreArity = False

mkGrTagNode :: GrTagCateg -> Int -> HsName -> GrValL -> GrVal
mkGrTagNode c t n vL
 = if grinStoreArity
    then GrVal_Node (GrTag_Lit c t n) (GrVal_LitInt (length vL) : vL)
    else GrVal_Node (GrTag_Lit c t n)                             vL

mkGrPatTagNode :: GrTagCateg -> Int -> HsName -> [HsName] -> GrPat
mkGrPatTagNode c t n pL
 = if grinStoreArity
    then GrPat_Node (GrTag_Lit c t n) (hsnWild : pL)
    else GrPat_Node (GrTag_Lit c t n)            pL

mkGrPatTagSplit :: GrTagCateg -> Int -> HsName -> HsName -> GrSplitL -> GrPat
mkGrPatTagSplit c t n r sL
 = GrPat_NodeSplit (GrTag_Lit c t n) r sL

%%]





%%[8 hs
-- partial parametrizarions of the above
mkGrConNode ::  Int -> HsName -> GrValL -> GrVal
mkGrConNode = mkGrTagNode GrTagCon

mkGrRecNode ::  GrValL -> GrVal
--mkGrRecNode  = mkGrTagNode GrTagRec 0 hsnRec
mkGrRecNode xs = mkGrTagNode GrTagCon 0 (hsnProd (length xs)) xs

mkGrPatConNode :: Int -> HsName -> [HsName] -> GrPat
mkGrPatConNode = mkGrPatTagNode GrTagCon

mkGrPatRecNode :: [HsName] -> GrPat
--mkGrPatRecNode  = mkGrPatTagNode GrTagRec 0 hsnRec
mkGrPatRecNode xs = mkGrPatTagNode GrTagCon 0 (hsnProd (length xs)) xs


mkGrPatConSplit :: Int -> HsName -> HsName -> GrSplitL -> GrPat
mkGrPatConSplit = mkGrPatTagSplit GrTagCon

mkGrPatRecSplit :: HsName -> GrSplitL -> GrPat
mkGrPatRecSplit  = mkGrPatTagSplit GrTagRec 0 hsnRec


mkGrBox :: HsName -> GrVal -> GrVal
mkGrBox tyNm v = mkGrConNode 0 tyNm [v]

mkGrUnbox :: HsName -> HsName -> GrPat
mkGrUnbox tyNm n = mkGrPatConNode 0 tyNm [n]

mkGrUnboxFFI :: HsName -> GrPat
mkGrUnboxFFI n = GrPat_Node GrTag_Unboxed [n]

%%]
