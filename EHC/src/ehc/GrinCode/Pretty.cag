%%[0
%include lhs2TeX.fmt
%include afp.fmt
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Haskell importable interface to Code's Java gen
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[8 hs module {%{EH}GrinCode.Pretty} import(UU.Pretty,EH.Util.PPUtils,{%{EH}Base.Common},{%{EH}GrinCode},{%{EH}GrinCode.Parser},{%{EH}Scanner.Common(grinScanOpts)}) export(ppGrModule,ppGrExpr,ppGrPat)
%%]

%%[8.WRAPPER import({GrinCode/AbsSyn})
WRAPPER GrAGItf GrExpr GrPat GrTag
%%]

%%[8 hs
ppGrModule :: GrModule -> PP_Doc
ppGrModule cmod
  =  let  t = wrap_GrAGItf  (sem_GrAGItf (GrAGItf_AGItf cmod))
                            (Inh_GrAGItf )
     in   (pp_Syn_GrAGItf t)


ppGrTag :: GrTag -> PP_Doc
ppGrTag tg
  =  let  t = wrap_GrTag  (sem_GrTag tg)
                          (Inh_GrTag )
     in   (pp_Syn_GrTag t)

ppGrExpr :: GrExpr -> PP_Doc
ppGrExpr tg
  =  let  t = wrap_GrExpr  (sem_GrExpr tg)
                           (Inh_GrExpr )
     in   (pp_Syn_GrExpr t)

ppGrPat :: GrPat -> PP_Doc
ppGrPat tg
  =  let  t = wrap_GrPat  (sem_GrPat tg)
                          (Inh_GrPat )
     in   (pp_Syn_GrPat t)

%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Pretty printed code
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[8 hs
ppCurlysSemisV :: [PP_Doc] -> PP_Doc
ppCurlysSemisV pL = pp_block "{ " "} " "; " pL

ppGrNm :: HsName -> PP_Doc
ppGrNm = ppHsnNonAlpha grinScanOpts

ppEvApTagElt :: EvApTagElt -> PP_Doc
ppEvApTagElt e
  =  case e of
    	EvApTagTag t  -> ppGrTag t
    	EvApTagVar n  -> ppGrNm n
    	EvApTagUnit   -> pp "unit"
    	EvApTagThrow  -> pp "throw"

ppEvApTagMp :: EvApTagMp -> PP_Doc
ppEvApTagMp m
  =  ppCurlysSemisV
        (map  (\((tag,arity),evap)
                  ->  ppGrTag tag >#< pp arity >#< "->" >#< ppEvApTagElt evap >-< ""
              )
              m
        )      
%%]

%%[8
ATTR GrAGItf AllGrNT [ | | pp USE {>-<} {empty}: PP_Doc ]

SEM GrModule
  | Mod         lhs         .   pp          =   "module" >#< ppGrNm @moduleNm
                                                >-< ppCurlysSemisV @globalL.ppL
                                                >-< ppCurlysSemisV @bindL.ppL
                                                >-< "ctags"
                                                >-< ppCurlysSemisV
                                                         (map  (\(tn,ts)
                                                                    ->  ppGrNm tn >#< "="
                                                                        >#< ( ppListSep "" "" " | "
                                                                            . map  (\(n,CTag _ _ t a) -> ppGrNm n >#< t >#< a)
                                                                            $ ts
                                                                            )
                                                                        >-< ""    
                                                               )
                                                               @ctagsMp)
                                                >-< "evalmap"
                                                >-< ppEvApTagMp @evalTagMp
                                                >-< "applymap"
                                                >-< ppEvApTagMp @applyTagMp


SEM GrGlobal
  | Global      lhs         .   pp          =   ppGrNm @nm >#< "<-" >#< "store" >#< @val.pp

SEM GrBind
  | Bind        lhs         .   pp          =   ppGrNm @nm >#< ppSpaced (map ppGrNm @argNmL) >-<
                                                    indent 2 ("=" >#< ppCurlysSemisV [@expr.pp])
  | Rec         lhs         .   pp          =   "rec" >-< indent 2 (ppCurlysSemisV @bindL.ppL)

SEM GrExpr
  | Seq         lhs         .   pp          =   @expr.pp >#< ";" >#< "\\" >|< @pat.pp >#< "->"
                                                >-< @body.pp
  | Case        lhs         .   pp          =   "case" >#< @val.pp >#< "of" >-<
                                                    indent 2 (ppCurlysSemisV @altL.ppL)
  | App         lhs         .   pp          =   "apply" >#< ppSpaced (ppGrNm @nm : @argL.ppL)
  | Call        lhs         .   pp          =   ppSpaced (ppGrNm @nm : @argL.ppL)
  | FFI         lhs         .   pp          =   "ffi" >#< ppSpaced (pp @nm : map ppGrNm @argL) >#< ppCurlysSemisV @resTagL.ppL
  | Eval        lhs         .   pp          =   "eval" >#< ppGrNm @nm
  | Unit        lhs         .   pp          =   "unit" >#< @val.pp
  | Store       lhs         .   pp          =   "store" >#< @val.pp
  | Fetch       lhs         .   pp          =   "fetch" >#<  ppGrNm @nm >#< maybe empty pp      @mbOffset
                                                                        >#< maybe empty ppGrTag @mbTag
  | Update      lhs         .   pp          =   "update" >#< ppGrNm @nm >#< @val.pp
                                                                        >#< maybe empty ppGrTag @mbTag
  | FetchUpdate lhs         .   pp          =   "fetchupdate" >#< ppGrNm @src >#< ppGrNm @dst
  | Throw       lhs         .   pp          =   "throw" >#< ppGrNm @nm
  | Catch       lhs         .   pp          =   "try" >-<
                                                indent 2 (ppCurlysSemisV [@body.pp]) >-<
                                                "catch" >|< pp_parens (ppGrNm @arg) >-<
                                                indent 2 (ppCurlysSemisV [@handler.pp])

SEM GrAlt
  | Alt         lhs         .   pp          =   @pat.pp >-< indent 4 ("->" >#< ppCurlysSemisV [@expr.pp])

SEM GrVal
  | Node        lhs         .   pp          =   ppListSep "(" ")" " " (@tag.pp : @fldL.ppL)
  | NodeAdapt   lhs         .   pp          =   pp_parens (ppGrNm @nm >|< "|" >|< (ppListSep "" "" "," @fldL.ppL))
  | Empty       lhs         .   pp          =   pp "()"
  | LitInt      lhs         .   pp          =   pp @int
  | LitStr      lhs         .   pp          =   pp $ show @str
  | Var         lhs         .   pp          =   ppGrNm @nm

SEM GrAdapt
  | Upd         lhs         .   pp          =   @off.pp >|< ":=" >|< @val.pp
  | Ins         lhs         .   pp          =   @off.pp >|< "+=" >|< @val.pp
  | Del         lhs         .   pp          =   @off.pp >|< "-="

SEM GrPat
  | Node        lhs         .   pp          =   ppListSep "(" ")" " " (@tag.pp : map ppGrNm @fldL)
  | NodeSplit   lhs         .   pp          =   pp_parens (@tag.pp >#< ppGrNm @nm >|< "|" >|< (ppListSep "" "" "," @fldL.ppL))
  | Empty       lhs         .   pp          =   pp "()"
  | LitInt      lhs         .   pp          =   pp @int
  | Var         lhs         .   pp          =   ppGrNm @nm

SEM GrSplit
  | Sel         lhs         .   pp          =   ppGrNm @nm >|< "=" >|< @off.pp

SEM GrTag
  | Lit         lhs         .   pp          =   "#" >|< @int >|< "/" >|< pp @categ >|< "/" >|< ppGrNm @nm
  | Var         lhs         .   pp          =   ppGrNm @nm
  | Unboxed     lhs         .   pp          =   pp "#U"
  | Any         lhs         .   pp          =   pp "#*"
%%]

%%[8
ATTR GrGlobalL GrBindL GrAltL GrTagL GrPatL GrValL GrAdaptL GrSplitL [ | | ppL: {[PP_Doc]} ]

SEM GrGlobalL
  | Cons        lhs         .   ppL         =   @hd.pp : @tl.ppL
  | Nil         lhs         .   ppL         =   []

SEM GrBindL
  | Cons        lhs         .   ppL         =   @hd.pp : @tl.ppL
  | Nil         lhs         .   ppL         =   []

SEM GrAltL
  | Cons        lhs         .   ppL         =   @hd.pp : @tl.ppL
  | Nil         lhs         .   ppL         =   []

SEM GrTagL
  | Cons        lhs         .   ppL         =   @hd.pp : @tl.ppL
  | Nil         lhs         .   ppL         =   []

SEM GrPatL
  | Cons        lhs         .   ppL         =   @hd.pp : @tl.ppL
  | Nil         lhs         .   ppL         =   []

SEM GrValL
  | Cons        lhs         .   ppL         =   @hd.pp : @tl.ppL
  | Nil         lhs         .   ppL         =   []

SEM GrAdaptL
  | Cons        lhs         .   ppL         =   @hd.pp : @tl.ppL
  | Nil         lhs         .   ppL         =   []

SEM GrSplitL
  | Cons        lhs         .   ppL         =   @hd.pp : @tl.ppL
  | Nil         lhs         .   ppL         =   []
%%]
