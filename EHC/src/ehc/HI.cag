%%[0
%include lhs2TeX.fmt
%include afp.fmt
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Haskell importable interface to HI/AbsSyn
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[20 hs module {%{EH}HI} import({%{EH}Base.Common},{%{EH}Gam.Full},{%{EH}NameAspect})
%%]

%%[(20 hmtyinfer || hmtyast) hs import({%{EH}Ty})
%%]

%%[(20 codegen) hs import({%{EH}Core})
%%]
%%[(20 codegen) hs import(qualified {%{EH}TyCore} as C)
%%]

%%[(20 codegen grin) hs import({%{EH}GrinCode})
%%]

%%[20 hs import({%{EH}Module})
%%]

%%[(20 hmtyinfer) hs import({%{EH}Pred.ToCHR},{%{EH}CHR.Solve},qualified {%{EH}Pred} as Pr)
%%]

%%[20 hs import(qualified Data.Map as Map,qualified EH.Util.Rel as Rel,qualified EH.Util.FastSeq as Seq,EH.Util.Utils)
%%]

%%[20 hs export(AGItf(..),Module(..),Binding(..),Bindings)
%%]

%%[20 hs export(Visible(..))
%%]

%%[20 ag import({HI/AbsSyn})
%%]

%%[99 hs import({%{EH}Base.ForceEval})
%%]

%%[(99 codegen grin) hs import({%{EH}GrinCode.Trf.ForceEval})
%%]

-- for debug
%%[20 hs import({%{EH}Base.Debug},EH.Util.Pretty)
%%]


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Additional defs
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[20 hs
data Visible
  = VisibleNo | VisibleYes
  deriving Eq

instance Show Visible where
  show VisibleNo  = "visibleno"
  show VisibleYes = "visibleyes"
%%]

%%[20 hs export(HiSettings(..),emptyHiSettings)
data HiSettings
  = HiSettings
      { hisettingsHasMain :: Bool
      }

emptyHiSettings = HiSettings False
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% HI info
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[20 hs export(HIInfo(..), emptyHIInfo)
data HIInfo
  = HIInfo
      { hiiExps             :: !ModEntRel
      , hiiHiddenExps       :: !ModEntRel
      , hiiFixityGam        :: !FixityGam
      , hiiIdDefOccGam      :: !IdDefOccGam
      , hiiHIDeclImpModL    :: ![HsName]
      , hiiHIUsedImpModL    :: ![HsName]
      , hiiSettings         :: !HiSettings
%%[[(20 hmtyinfer)
      , hiiValGam           :: !ValGam
      , hiiTyGam            :: !TyGam
      , hiiTyKiGam          :: !TyKiGam
      , hiiPolGam           :: !PolGam
      , hiiDataGam          :: !DataGam
      , hiiClGam            :: !Pr.ClGam
      , hiiCHRStore         :: !ScopedPredStore
%%]]
%%[[(20 codegen)
      , hiiCArityMp         :: !CArityMp
%%]]
%%[[(20 codegen grin)
      , hiiGrInlMp          :: !GrInlMp
%%]]
      }

emptyHIInfo :: HIInfo
emptyHIInfo 
  = HIInfo Rel.empty Rel.empty emptyGam emptyGam
           [] []
           emptyHiSettings
%%[[(20 hmtyinfer)
           emptyGam emptyGam emptyGam emptyGam emptyGam emptyGam emptyCHRStore
%%]]
%%[[(20 codegen)
           Map.empty
%%]]
%%[[(20 codegen grin)
           Map.empty
%%]]
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% GHC 6.8.1 bug workaround
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

GHC 6.8.1 problem:
Leaving out workAroundGHC_6_8_1_Bug causes to yield Fixity_Infix irrespective of actual value.
Solution seems to be to wrap non-trivial function around value?
It also has to do with strict datatype fields, omitting '!' in front of Fixity makes it work as well:
  | Binding_Fixity !(HsName) !(Int) (Fixity)

%%[20 hs export(workAroundGHC_6_8_1_Bug)
workAroundGHC_6_8_1_Bug :: Int -> Fixity -> Fixity
workAroundGHC_6_8_1_Bug p f
  = case f of
      Fixity_Infix | p >= 0 -> Fixity_Infix
      _                     -> f
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Building
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[20 hs export(hiFromHIInfo)
hiFromHIInfo :: HIInfo -> Seq.FastSeq Binding
hiFromHIInfo i
  = hiFromAllGams
      (hiiExps          i)
      (hiiHiddenExps    i)
      (hiiFixityGam     i)
      (hiiIdDefOccGam   i)
      (hiiHIDeclImpModL i)
      (hiiHIUsedImpModL i)
      (hiiSettings      i)
%%[[(20 hmtyinfer)
      (hiiValGam        i)
      (hiiTyGam         i)
      (hiiTyKiGam       i)
      (hiiPolGam        i)
      (hiiDataGam       i)
      (hiiClGam         i)
      (hiiCHRStore      i)
%%]]
%%[[(20 codegen)
      (hiiCArityMp      i)
%%]]
%%[[(20 codegen grin)
      (hiiGrInlMp       i)
%%]]
%%]

%%[20 hs
hiFromGam :: (HsName -> v -> Binding) -> Gam HsName v -> Seq.FastSeq Binding
hiFromGam mk g = Seq.fromList [ mk n v | (n,v) <- gamToAssocL g ]

hiFromAllGams 
  :: ModEntRel
     -> ModEntRel
     -> FixityGam
     -> IdDefOccGam
     -> [HsName]
     -> [HsName]
     -> HiSettings
%%[[(20 hmtyinfer)
     -> ValGam
     -> TyGam
     -> TyKiGam
     -> PolGam
     -> DataGam
     -> Pr.ClGam
     -> ScopedPredStore
%%]]
%%[[(20 codegen)
     -> CArityMp
%%]]
%%[[(20 codegen grin)
     -> GrInlMp
%%]]
     -> Seq.FastSeq Binding
hiFromAllGams exps hiddenExps fg idg
              impd impu
              settings
%%[[(20 hmtyinfer)
              vg tg tkg pg dg ig chrStore
%%]]
%%[[(20 codegen)
              arityMp
%%]]
%%[[(20 codegen grin)
              inlMp
%%]]
  =          Seq.fromList [Binding_Export VisibleYes exps]
    Seq.:++: Seq.fromList [Binding_Export VisibleNo hiddenExps]
    Seq.:++: hiFromGam  (\n fgi  -> Binding_Fixity n (fgiPrio fgi) (workAroundGHC_6_8_1_Bug (fgiPrio fgi) $ fgiFixity fgi)) fg
    Seq.:++: Seq.fromList [Binding_Ids [ (o,doccOcc docc) | (o,docc) <- gamToAssocL idg ]]
    Seq.:++: Seq.fromList [Binding_ImportModules impd impu]
    Seq.:++: Seq.fromList [Binding_Settings (hisettingsHasMain settings)]
%%[[(20 hmtyinfer)
    Seq.:++: Seq.fromList [Binding_TyKinds [ (k,tkgiKi i) | (k,i) <- gamToAssocL tkg ]]
    Seq.:++: Seq.fromList [Binding_TyPolarities [ (n,pgiPol i) | (n,i) <- gamToAssocL pg ]]
    Seq.:++: hiFromGam  (\n vgi  -> Binding_Val n (vgiTy vgi)) vg
    Seq.:++: hiFromGam  (\n tgi  -> Binding_Ty n (tgiTy tgi)) tg
    Seq.:++: hiFromGam  (\n dgi  -> let mkt i = (dtiCTag i,Map.toList $ Map.map dfiOffset $ dtiFldMp i)
                                    in  Binding_DataCon n (dgiDataTy dgi) (assocLMapElt mkt $ dgiConstrTagAssocL dgi)
%%[[20
                                                          (dgiIsNewtype dgi)
%%][94
                                                          (dgiMbNewtype dgi)
%%]]
                        ) dg
    Seq.:++: hiFromGam  (\n clgi -> Binding_Class n (Pr.clgiPrToEvidTy clgi) (Pr.clgiRuleTy clgi) (Pr.clgiDfltDictNm clgi)) ig
    Seq.:++: Seq.fromList [Binding_CHRStore $ chrStoreElems chrStore]
%%]]
%%[[(20 codegen)
    Seq.:++: Seq.fromList [Binding_Arities $ Map.toList arityMp]
%%]]
%%[[(20 codegen grin)
    Seq.:++: Seq.fromList [Binding_GrInlines [ (n,(a,g)) | (n,GrInl_Call a g) <- Map.toList inlMp ] ]
%%]]
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% ForceEval
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[99 hs
instance ForceEval HIInfo where
%%[[99
  forceEval x@(HIInfo
				  { hiiExps             = e
				  , hiiHiddenExps       = he
				  , hiiFixityGam        = fg
				  , hiiIdDefOccGam      = idg
%%[[(20 hmtyinfer)
				  , hiiValGam           = vg
				  , hiiTyGam            = tg
				  , hiiTyKiGam          = tkg
				  , hiiPolGam           = pg
				  , hiiDataGam          = dg
				  , hiiClGam            = cg
				  , hiiCHRStore         = cs
%%]]
%%[[(99 codegen)
				  , hiiCArityMp         = am
%%]]
%%[[(99 codegen grin)
				  , hiiGrInlMp          = im
%%]]
				  }
              )
              = x
%%][102
  fevCount  (HIInfo
                { hiiExps             = e
                , hiiHiddenExps       = he
                , hiiFixityGam        = fg
                , hiiIdDefOccGam      = idg
%%[[(20 hmtyinfer)
                , hiiValGam           = vg
                , hiiTyGam            = tg
                , hiiTyKiGam          = tkg
				, hiiPolGam           = pg
                , hiiDataGam          = dg
                , hiiClGam            = cg
                , hiiCHRStore         = cs
%%]]
%%[[(102 codegen)
                , hiiCArityMp         = am
%%]]
%%[[(102 codegen grin)
                , hiiGrInlMp          = im
%%]]
                }
            )
            = cmUnions [cm1 "HIInfo"
                       ,fevCount e
                       ,fevCount he
                       ,fevCount fg
                       ,fevCount idg
%%[[(20 hmtyinfer)
                       ,fevCount vg
                       ,fevCount tg
                       ,fevCount tkg
                       ,fevCount pg
                       ,fevCount dg
                       ,fevCount cg
                       ,fevCount cs
%%]]
%%[[(102 codegen)
                       ,fevCount am
%%]]
%%[[(102 codegen grin)
                       ,fevCount im
%%]]
                       ]
%%]]
%%]



