 $Id: EHC.lag 199 2004-05-12 19:11:13Z andres $

%%[0
%include lhs2TeX.fmt
%include afp.fmt
%%]

%%[8_1 hs import(UU.Pretty,EHGhcCore,EHTy,EHTyPretty) export(ppGhcModule)
ppGhcModule :: GhcModule -> PP_Doc
ppGhcModule  = sem_GhcModule

semiList = foldr  (\l r -> l >|< ";"  >-< r) empty 
boxInt i =  "GHCziBase.Izh" >#< pp_parens (i >#< "::GHCziPrim.Intzh" )
boxChar c =  "GHCziBase.Czh" >#< pp_parens (c >#< "::GHCziPrim.Charzh" )

%%]

% pretty printer of the AbsSyn
%%[8_1 import(EHGhcCoreAbsSyn)
ATTR AllGhcCore [ | | pp USE {>-<} {empty} : PP_Doc ]

SEM GhcModule
  | Module	lhs . pp = "%module" >#< @name >-< @tdefs.pp >-< semiList @lvdefs.pps >-< semiList @vdefs.pps >-< ""

SEM ValueDef
  | ValueDef    lhs . pp = @name >#< "::" >#< (pp @type) >#< "=" >#< @expr.pp

SEM Expression
  | Var          lhs . pp = pp @name
  | Cons         lhs . pp = pp @name
  | ILit         lhs . pp = boxInt $ pp @value
  | CLit         lhs . pp = boxChar $ pp (show @value)
  | Nested       lhs . pp = pp_parens @expr.pp
  | App          lhs . pp = @fun.pp >#< @args.pp
  | Lambda       lhs . pp = "\\" >|< @binders.pp >#< "->" >#< @expr.pp
  | Let          lhs . pp = "%let" >#< @valueDefg.pp
                            >-< "%in" >#< @expr.pp
  | Case         lhs . pp = "%case" >#< @expr.pp >#< "%of"
                            >-< @vbind.pp 
                            >-< pp_block "{" "}" ";" @alts.pps
SEM Argument
  | Value        lhs . pp = pp_parens @value.pp
  | Type         lhs . pp = "@" >#< pp_parens (pp @type)

ATTR ValueDefgs [ | | pps : {[PP_Doc]} ]
SEM ValueDefgs
  | Cons         lhs . pps = @hd.pp : @tl.pps
  | Nil          lhs . pps = []

SEM ValueDefg
  | RecValues    lhs . pp = "%rec" >#< pp_block "{" "}" ";" @values.pps
  | Value        lhs . pp = @value.pp 

ATTR ValueDefs [ | | pps : {[PP_Doc]} ]

SEM ValueDefs
  | Cons         lhs . pps = @hd.pp : @tl.pps
  | Nil          lhs . pps = []

SEM Binder
  | Type         lhs . pp = "@" >#< (pp @type)

SEM ValueBinder
  | ValueBinder  lhs . pp = pp_parens $ @var >#< "::" >#< (pp @type)

ATTR Alternatives [ | | pps : {[PP_Doc]} ]
SEM Alternatives
  | Cons         lhs . pps = @hd.pp : @tl.pps
  | Nil          lhs . pps = []

SEM Alternative
  | Alternative lhs . pp = @name >#< @typebinders.pp >#< @valuebinders.pp >#< "->" >#< @expr.pp
  | Default     lhs . pp = "%_" >#< "->" >#< @expr.pp
%%]
