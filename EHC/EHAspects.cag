% $Id: EHC.lag 199 2004-05-12 19:11:13Z andres $

%%[0
%include lhs2TeX.fmt
%include afp.fmt
%%]

%%[6_1
ATTR AllDecl AllExpr AllCase [ synPred : {[(HsName,[String])]} | | grammar USE {++} {[]} : {Grammar}  ]
ATTR TyVars DataConstrs DataConstr TyVar TyExprs TyExpr PredExpr [ | | self : SELF]

SEM Decls
  | Nil       lhs.grammar = []
  | Cons      lhs.grammar = @hd.grammar ++ @tl.grammar

SEM Decl
  | Data      lhs.grammar = genGrammar @tyNm @tyVars.self @constrs.self
  | KiSig     lhs.grammar = []
  | TySig     lhs.grammar = []
  
SEM AGItf
  | AGItf     loc.grammar = @expr.grammar
    	      expr.synPred = [ (nt, [p' | (nt',p',cs') <- @grammar, nt == nt'] ) | (nt,p,cs) <- @grammar]
%%]



%%[6_1.Grammars hs
type Grammar = [(HsName,String,[TyExpr])]
genGrammar nt [] constrs = [(nt,getProdNm c, getChildren c) | c <- constrs]
genGrammar _ (x:xs) _    = []

getChildren (DataConstr_Constr _ fields) = fields

getProdNm (DataConstr_Constr (HNm prod) _) = prod
%%] 