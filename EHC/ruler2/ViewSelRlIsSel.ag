-------------------------------------------------------------------------
-- Interfacing to ViewSel: RlSel is selected?
-------------------------------------------------------------------------

{
module ViewSelRlIsSel
  ( rlSelIsSel
  , RlSelIsSel
  )
  where

import qualified Data.Set as Set
import Nm
import Common
import DpdGr
import ViewSel
}

INCLUDE "ViewSelAbsSynAG.ag"
INCLUDE "ViewSelDpdGrAG.ag"
INCLUDE "ViewSelNmSAG.ag"

WRAPPER AGRlSelItf

{
wrapRlSel :: DpdGr Nm -> RlSel -> Syn_AGRlSelItf
wrapRlSel vwDpdGr vs
  = let r1 = sem_AGRlSelItf (AGRlSelItf_AGItf vs)
    in  wrap_AGRlSelItf r1
            (Inh_AGRlSelItf {vwDpdGr_Inh_AGRlSelItf = vwDpdGr
                            })

rlSelIsSel :: DpdGr Nm -> RlSel -> RlSelIsSel
rlSelIsSel vwDpdGr rs
  = rlSelIsSel_Syn_AGRlSelItf r
  where r = wrapRlSel vwDpdGr rs
}

-------------------------------------------------------------------------
-- Is it selected?
-------------------------------------------------------------------------

{
type RlSelIsSel = Nm -> Nm -> Nm -> Bool
}

ATTR RlSel AGRlSelItf [ | | rlSelIsSel: RlSelIsSel ]

SEM RlSel
  | Sel             lhs     .   rlSelIsSel  =   \nVw nRs nRl
                                                    ->  (nVw == nmAny || nVw `Set.member` @vwSel.vwSelNmS)
                                                        && (nRs == nmAny || @rsSel.isSel nRs)
                                                        && (nRl == nmAny || @rlSel.isSel nRl)

-------------------------------------------------------------------------
-- Is name selected?
-------------------------------------------------------------------------

ATTR NmSel [ | | isSel: {Nm -> Bool} ]

SEM NmSel
  | All             lhs     .   isSel       =   const True
  | Nms             lhs     .   isSel       =   (`elem` @nms)

