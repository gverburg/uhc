-- $Id: Ruler.ag 231 2005-06-07 14:39:41Z atze $

-------------------------------------------------------------------------
-- Uniq
-------------------------------------------------------------------------

{-
ATTR AllNTButViewSel [ | uniq: Int | ]

SEM AGItf
  | AGItf           decls   .   uniq        =   0

SEM AGExprItf
  | AGItf           expr    .   uniq        =   0

SEM AGARuleItf
-}

-------------------------------------------------------------------------
-- Uniq sequence nr
-------------------------------------------------------------------------

ATTR AllARuleButARule AllExpr [ | uniqSeqNr: Int | ]

SEM ARule
  | Rule            eqns    .   uniqSeqNr   =   0

SEM Expr
  | Uniq            loc     .   uniqSeqNr   =   @lhs.uniqSeqNr + 1
                    lhs     .   uniqSeqNr   =   @uniqSeqNr

SEM AGExprItf
  | AGItf           loc     .   uniqSeqNr   =   0
  
SEM Decl
  | Fmt ShpJudge    loc     .   uniqSeqNr   =   0
  
SEM RExprEqn
  | Expr            loc     .   uniqSeqNr   =   0

SEM AttrEqn
  | Eqn             loc     .   uniqSeqNr   =   0
  
-------------------------------------------------------------------------
-- Uniq name
-------------------------------------------------------------------------

{
fmNmUniq :: Opts -> FmGam Expr -> Int -> Nm
fmNmUniq o g u = nmSubst (o {optGenFM = FmAG}) g (nmUniq u)
}

SEM Expr
  | Uniq            loc     .   nm          =   fmNmUniq @lhs.opts @lhs.fmGam @uniqSeqNr

-------------------------------------------------------------------------
-- Node to which uniq thread must be passed
-------------------------------------------------------------------------

ATTR ARule [ uniqThrDst: ANm | | ]

SEM AGARuleItf
  | AGItf           rule    .   uniqThrDst  =   case @lhs.croNmL of
                                                  (_:[d]) -> ANm_Lhs (fmNmUniq @lhs.opts @lhs.fmGam 0) []
                                                  (_:d:_) -> ANm_Node d (fmNmUniq @lhs.opts @lhs.fmGam 0)

-------------------------------------------------------------------------
-- Construction of AEqn for uniq's
-------------------------------------------------------------------------

SEM ARule
  | Rule            loc     .   mkUniqEqnL  =   if @eqns.uniqSeqNr > 0
                                                then [AEqn_Eqn
                                                        (AEqnDest_Many
                                                          (map AEqnDest_One
                                                               (@lhs.uniqThrDst : [ ANm_Loc (fmNmUniq @lhs.opts @lhs.fmGam u) [] | u <- [1 .. @eqns.uniqSeqNr] ])
                                                          )
                                                        )
                                                        (AExpr_Expr
                                                          (mkExprApp (exprSubst (@lhs.opts {optGenFM = FmAG}) @lhs.fmGam . Expr_Var . nmFunMkUniq $ @eqns.uniqSeqNr)
                                                                     [mkALhs (fmNmUniq @lhs.opts @lhs.fmGam 0)]
                                                          )
                                                        )
                                                     ]
                                                else []

-------------------------------------------------------------------------
-- Replica
-------------------------------------------------------------------------

ATTR AllARule AllExpr [ | | replUniq: SELF ]
ATTR AGARuleItf [ | | replUniq: ARule ]

SEM ARule
  | Rule            lhs     .   replUniq    =   ARule_Rule @ndNmL @rlNm @info (@mkUniqEqnL ++ @eqns.replUniq)

SEM Expr
  | Uniq            lhs     .   replUniq    =   mkALoc @nm


