-- $Id: Ruler.ag 231 2005-06-07 14:39:41Z atze $

-------------------------------------------------------------------------
-- (A)Eqn as Expr
-------------------------------------------------------------------------

{
mkExprEqn :: Expr -> Expr -> Expr
mkExprEqn l r = Expr_AppTop (Expr_Op (nmEql) (Expr_Var (nmEql)) l r)
}

-------------------------------------------------------------------------
-- Expr as AEqn
-------------------------------------------------------------------------

{
exprMbAEqnRest :: Expr -> Maybe (AEqn,[Expr],FmGam Expr)
exprMbAEqnRest expr
  = eE expr
  where eE (Expr_Op n _ d s) | n == nmEql
          = do (d',ed,gd) <- dE d False
               (s'      ) <- sE s
               return (AEqn_Eqn d' s', ed, gd)
        eE (Expr_AppTop e)                          = eE e
        eE (Expr_Paren e)                           = eE e
        eE (Expr_Named _ e)                         = eE e
        eE e                                        = Nothing
        dE (Expr_AVar n)        _                   = return (AEqnDest_One n,[],emptyGam)
        dE (Expr_Retain (Expr_AVar (ANm_Loc n p))) _= return (AEqnDest_One (ANm_Loc n (AtRetain:p)),[],emptyGam)
        dE (Expr_Var n)         _                   = vE [] n
        dE (Expr_Retain (Expr_Var n)) _             = vE [AtRetain] n
        dE (Expr_StrAsIs s)     _                   = nE [] s
        dE (Expr_Retain (Expr_StrAsIs s)) _         = nE [AtRetain] s
        dE (Expr_Retain e)      p                   = dE e p
        dE (Expr_Paren e)       p                   = dE e p
        dE (Expr_AppTop e)      p                   = dE e p
        dE (Expr_SelTop e)      p                   = dE e p
        dE (Expr_Named _ e)     p                   = dE e p
        dE e@(Expr_Op n _ _ _)  p | n == nmComma    = tE e
        dE (Expr_Sel e (Just s)) _
          = do ne <- dsE e
               ns <- dsE s
               return (AEqnDest_One (ANm_Node ne ns),[],emptyGam)
        dE _                    False               = Nothing
        dE e                    True                = tE e
        dsE (Expr_AppTop e)                         = dsE e
        dsE (Expr_Paren e)                          = dsE e
        dsE (Expr_AVar (ANm_Fld n))                 = return n
        dsE (Expr_Var n)                            = return n
        dsE _                                       = Nothing
        tE e@(Expr_Op n _ _ _) | n == nmComma
          = do (dL,eo,go) <- oE e
               return (AEqnDest_Many dL,eo,go)
        tE e
          = return (AEqnDest_One n,[mkExprEqn (Expr_AppTop e) (Expr_AVar n)],emptyGam)
          where n = flip ANm_Loc [] . Nm . nmShowAG . foldr nmApd nmWild . take 2 . Set.toList $ exprNmS e
        oE (Expr_Op n _ e1 e2) | n == nmComma
          = do (e1',ed,gd) <- dE e1 True
               (e2',eo,go) <- oE e2
               return (e1' : e2', ed ++ eo, gd `gu` go)
        oE e
          = do (e',ee,ge) <- dE e True
               return ([e'],ee,ge)
        sE e                                        = return (AExpr_Expr e)
        vE props n
          = if n == nmWild
            then return (AEqnDest_One ANm_Wild,[],emptyGam)
            else let a = ANm_Loc (Nm (nmShowAG n)) props
                 in  return (AEqnDest_One a,[],n `gs` Expr_AVar a)
        nE props n
          = fmap (\n -> (AEqnDest_One n,[],emptyGam)) m
          where m = case n of
                      ('@':'l':'o':'c':'.':nm)  -> Just (ANm_Loc  (Nm nm) props)
                      (    'l':'o':'c':'.':nm)  -> Just (ANm_Loc  (Nm nm) props)
                      ('@':'l':'h':'s':'.':nm)  -> Just (ANm_Lhs  (Nm nm) [])
                      (    'l':'h':'s':'.':nm)  -> Just (ANm_Lhs  (Nm nm) [])
                      "_"                       -> Just (ANm_Wild)
                      _                         -> Nothing
        gu = fmGamUnion
        gs n e = fmGamFromList' FmAG [(n,e)]
}


