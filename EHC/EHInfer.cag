% $Id$

%%[0
%include lhs2TeX.fmt
%include afp.fmt
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Let expressions
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[1.Let
SEM Expr
  | Let         decls       .   patValGam           =   @lhs.valGam
                                                        `gamPushGam` @decls.gathTySigGam
                loc         .   (lValGam,gValGam)   =   gamPop @decls.patValGam
                decls       .   valGam              =   @decls.patValGam
                body        .   valGam              =   @decls.patValGam
%%]

%%[2.Let
SEM Expr
  | Let         decls       .   patTyCnstr          =   @lhs.tyCnstr
                            .   tyCnstr             =   @decls.patTyCnstr
%%]

%%[3.Let
SEM Expr
  | Let         loc         .   lSubsValGam         =   @decls.tyCnstr |=> @lValGam
                            .   gSubsValGam         =   @decls.tyCnstr |=> @gValGam
                            .   gTyTvL              =   ftv @gSubsValGam
                            .   lQuValGam           =   valGamQuantify @gTyTvL @lSubsValGam
                body        .   valGam              :=  @gSubsValGam
                                                            `gamPushGam` @lQuValGam
%%]

%%[4
SEM Expr
  | Let         decls       .   patValGam           :=  gamPushGam  @lhs.valGam
                                                                    (valGamInst1Exists @lUniq @decls.gathTySigGam)
                loc         .   lQuValGam           :=  valGamInst1Exists @lUniq2 . valGamQuantify @gTyTvL $ @lSubsValGam
%%]

%%[4_2
SEM Expr
  | Let         decls       .   tySigTyCnstr        =   emptyCnstr
                loc         .   (_,lExSigTyCnstr)   =   valGamInst1ExistsWithCnstr (@decls.tySigTyCnstr |=> @lhs.imprTyCnstr) @lUniq @decls.gathTySigGam
                            .   lExplTyCnstr        =   @lExSigTyCnstr |=> @decls.tySigTyCnstr
                decls       .   patValGam           :=  gamPushGam @lhs.valGam @decls.gathTySigGam
                            .   patTyCnstr          :=  @lExplTyCnstr |=> @lhs.imprTyCnstr
                            .   imprTyCnstr         =   @decls.patTyCnstr
                loc         .   (lElimValGam,elimImprTyCnstr,_)
                                                    =   valGamElimAlts joinFIOpts @fe (ftv @gValGam) @lUniq4 @decls.imprTyCnstr @lValGam
                body        .   imprTyCnstr         =   @elimImprTyCnstr |=> @decls.imprTyCnstr
                loc         .   (lQuValGam,lQuTyCnstr)
                                                    :=  let  (g1,c1) = valGamQuantifyWithCnstr @decls.tyCnstr @gTyTvL @lValGam
                                                             (g2,c2) = valGamInst1ExistsWithCnstr (c1 |=> @decls.tyCnstr) @lUniq2 g1
                                                        in   (g2,c2 |=> c1)
                decls       .   tyCnstr             :=  @lhs.tyCnstr |=> @decls.patTyCnstr
                body        .   tyCnstr             :=  @lQuTyCnstr |=> @decls.tyCnstr
                            .   valGam              :=  @decls.patValGam
%%]

%%[9
SEM Expr
  | Let         loc         .   (lQuValGam,tqoGam)  :=  let  (vg,tqog) = valGamQuantify @gTyTvL @prfArgPrOccL @lSubsValGam
                                                        in   (valGamInst1Exists @lUniq2 vg,tqog)
                            .   tqoTyCnstr          =   foldr (\tqo c -> tqoImplsCnstr tqo |=> c) emptyCnstr (gamElts @tqoGam)
%%]

%%[11
%%]
SEM Expr
  | Let         loc         .   lElimEqualValGam    =   valGamElimEqual (@decls.tyCnstr |=> @lValGam)
                            .   lSubsValGam         :=  @lElimEqualValGam

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Known type and instantiation required
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[1.tyInstKnown
SEM Decl
  | Val         loc         .   knTy                =   @sigTy
%%]

%%[2.tyInstKnown
SEM Decl
  | Val         expr        .   knTy                =   if @hasTySig then @knTy else @patExpr.ty
%%]

%%[3.tyInstKnown
SEM Decl
  | Val         loc         .   knTy                :=  tyInstKnown @lUniq @sigTy
%%]

%%[4.tyInstKnown
SEM Decl
  | Val         loc         .   knTy                :=  @sigTy
%%]

%%[9.tyInstKnown
%%]

SEM Decl
  | Val         expr        .   knTy                :=  if @hasTySig  then @knTy
                                                                      else [mkImplsVar @lUniq2] `mkTyArrow` @patExpr.ty

%%[10.tyInstKnown
SEM Decl
  | DynVal      loc         .   knTy                =   Ty_Any
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Final type
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[2.finValGam
ATTR AllDecl [ finValGam: ValGam | | ]
ATTR AllNT [ finTyCnstr: Cnstr | | ]

SEM Expr
  | Let         decls       .   finValGam           =   @lhs.finTyCnstr |=> @lValGam

SEM Decl
  | TySig       loc         .   finalTy             =   vgiTy . fromJust
                                                        . valGamLookup @lhs.finValGam $ @nm

SEM AGItf
  | AGItf       expr        .   finTyCnstr          =   @expr.tyCnstr
%%]

%%[3.finValGam
SEM Expr
  | Let         decls       .   finValGam           :=  @lhs.finTyCnstr |=> @lQuValGam
%%]

%%[9
SEM Expr
  | Let         loc         .   finTyCnstr          =   @tqoTyCnstr |=> @lhs.finTyCnstr
%%]

%%[10
SEM Decl
  | DynTySig    loc         .   finalTy             =   vgiTy . fromJust
                                                        . valGamLookup @lhs.finValGam $ @nm
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Known kind
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[6
SEM Decl
  | Data        loc         .   knKi                =   @sigKi
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Type inferencing, decls, top level, abstraction
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[1.valGam
ATTR AllDecl AllExpr [ valGam: ValGam | | ]

SEM AGItf
  | AGItf       expr        .   valGam              =   emptyGam
%%]

%%[1.patValGam
ATTR AllDecl [ | patValGam: ValGam | ]

SEM Decl
  | Val         patExpr     .   valGam              =   @lhs.patValGam
                lhs         .   patValGam           =   @patExpr.valGam
                expr        .   valGam              =   @lhs.valGam
%%]

%%[2.Rest
ATTR AllDecl [ | tyCnstr: Cnstr ^^^ patTyCnstr: Cnstr | ]

SEM Decl
  | Val         patExpr     .   tyCnstr             =   @lhs.patTyCnstr
                lhs         .   patTyCnstr          =   @patExpr.tyCnstr
                expr        .   tyCnstr             =   @lhs.tyCnstr

SEM AGItf
  | AGItf       expr        .   tyCnstr             =   emptyCnstr
%%]

%%[4_2
ATTR AllDecl AllExpr [ | imprTyCnstr: Cnstr | ]

SEM AGItf
  | AGItf       expr        .   imprTyCnstr         =   emptyCnstr
%%]

%%[4_2
SEM AGItf
  | AGItf       loc         .   exprTyCnstr         =   cnstrFilterTy  (\_ t -> not (tyIsVar t))
                                                        .  cnstrMapTy  (\_ t -> tyElimForgetAlts t)
                                                        $  @expr.imprTyCnstr
                expr        .   tyCnstr             :=  @exprTyCnstr

SEM Decl
  | Val         loc         .   imprFO              =   fitsIn impredFIOpts emptyFE uidStart (@expr.imprTyCnstr |=> @patExpr.ty) @expr.imprTy
                lhs         .   imprTyCnstr         =   foCnstr @imprFO |=> @expr.imprTyCnstr
%%]

%%[5
ATTR AllCase [ | tyCnstr: Cnstr | ]
ATTR AllDataConstr AllCase [ valGam: ValGam | | ]
%%]

%%[5_2
ATTR AllCase [ | imprTyCnstr: Cnstr | ]
%%]

%%[11
SEM Decl
  | Val         loc         .   (_,elimEqCnstr)     =   tyElimEqual @expr.ty
                lhs         .   tyCnstr             =   @elimEqCnstr |=> @expr.tyCnstr
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Kind inferencing, decls, top level, abstraction
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[1.tyGam
ATTR AllDecl [ | tyGam: TyGam | ]
ATTR AllExpr [ tyGam: TyGam | | ]
%%]

%%[4
ATTR AllPatExpr [ | tyGam: TyGam | ]
%%]

%%[5
ATTR AllDataConstr AllCase [ tyGam: TyGam | | ]
ATTR AllDecl [ | patTyGam: TyGam | ]

SEM Expr
  | Let         decls       .   patTyGam            =   gamPushNew @lhs.tyGam
                            .   tyGam               =   @decls.patTyGam
%%]

%%[6
ATTR AllExpr AllPatExpr AllData AllCase AllDecl [ | kiCnstr: Cnstr | ]
ATTR AllDecl [ | patKiCnstr: Cnstr | ]

SEM Expr
  | Let         decls       .   patTyGam            :=  @lhs.tyGam `gamPushGam` @decls.gathKiSigGam
                            .   patKiCnstr          =   @lhs.kiCnstr
                loc         .   (lTyGam,gTyGam)     =   gamPop @decls.patTyGam
                decls       .   tyGam               :=  @lhs.tyGam `gamPushGam` @lTyGam
                            .   kiCnstr             =   @decls.patKiCnstr
                loc         .   lSubsTyGam          =   @decls.kiCnstr |=> @lTyGam
                            .   gSubsTyGam          =   @decls.kiCnstr |=> @gTyGam
                            .   gKiTvL              =   ftv @gSubsTyGam
                            .   lQuTyGam            =   tyGamInst1Exists @lUniq3 . tyGamQuantify @gKiTvL $ @lSubsTyGam
                body        .   tyGam               =   @gSubsTyGam `gamPushGam` @lQuTyGam

SEM Decl
  | TySig       tyExpr      .   tyGam               =   gamPushNew @lhs.tyGam
                loc         .   fo                  =   fitsIn weakFIOpts @fe @lUniq2 @tyExpr.ki kiStar
                lhs         .   kiCnstr             =   foCnstr @fo |=> @tyExpr.kiCnstr
%%]

%%[7
ATTR AllDataField [ | tyGam: TyGam | ]
%%]

%%[11
ATTR AllDataConstrEq [ | tyGam: TyGam | ]
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Data info gam
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[8.dataGam
ATTR AllDecl AllExpr AllCase [ | gathDataGam: DataGam | ]
ATTR AllDecl AllExpr AllCase AllPatExpr [ dataGam: DataGam | | ]

SEM AGItf
  | AGItf       expr        .   gathDataGam         =   emptyGam
                            .   dataGam             =   @expr.gathDataGam
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Gamma/Environment for fitting
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[4
SEM Decl
  | TySig       loc         .   fe                  =   emptyFE
%%]

%%[9
SEM Decl
  | Instance    loc         .   fe                  =   emptyFE {fePrfCtxtId = @prfCtxtId, feEHCOpts = @lhs.opts}
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Init of tyGam
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[initTyGam.1
                                                          [ (hsnArrow,  TyGamInfo (Ty_Con hsnArrow))
                                                          , (hsnInt,    TyGamInfo tyInt)
                                                          , (hsnChar,   TyGamInfo tyChar)
%%]

%%[initTyGam.6
                                                          [ (hsnArrow,  mkTGI (Ty_Con hsnArrow) ([kiStar,kiStar] `mkTyArrow` kiStar))
                                                          , (hsnInt,    mkTGI tyInt kiStar)
                                                          , (hsnChar,   mkTGI tyChar kiStar)
%%]

%%[initTyGam.7
                                                          , (hsnRow,    mkTGI (Ty_Con hsnUnknown) kiRow)
                                                          , (hsnRec,    mkTGI (Ty_Con hsnRec) ([kiRow] `mkTyArrow` kiStar))
                                                          , (hsnSum,    mkTGI (Ty_Con hsnSum) ([kiRow] `mkTyArrow` kiStar))
%%]

%%[1.initTyGam
SEM AGItf
  | AGItf       loc         .   tyGam               =   assocLToGam
%%@initTyGam.1
                                                          ]
%%]

%%[6
SEM AGItf
  | AGItf       loc         .   tyGam               :=  assocLToGam
%%@initTyGam.6
                                                          ]
                            .   kiCnstr             =   emptyCnstr
%%]

%%[7
SEM AGItf
  | AGItf       loc         .   tyGam               :=  assocLToGam
%%@initTyGam.6
%%@initTyGam.7
                                                          ]
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Sort, but no inferencing && etc
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[initKiGam.6
                                                          [ (hsnArrow,  KiGamInfo (Ty_Con hsnArrow))
                                                          , (hsnStar,   KiGamInfo kiStar)
%%]

%%[6
ATTR AllExpr AllTyExpr AllPatExpr AllData AllCase AllDecl [ kiGam: KiGam | | ]

SEM AGItf
  | AGItf       loc         .   kiGam               =   assocLToGam
%%@initKiGam.6
                                                          ]
%%]

%%[initKiGam.7
                                                          , (hsnRow,    KiGamInfo kiRow)
%%]

%%[7
SEM AGItf
  | AGItf       loc         .   kiGam               :=  assocLToGam
%%@initKiGam.6
%%@initKiGam.7
                                                          ]
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Type signatures
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[1.gathTySigGam
ATTR AllDecl [ | gathTySigGam: ValGam | ]

SEM Decl
  | TySig       loc         .   gamSigTy            =   @tyExpr.ty
                            .   gathTySigGam        =   gamAdd @lhs.gathTySigGam
                                                            @nm (ValGamInfo @gamSigTy)
                lhs         .   tyGam               =   @lhs.tyGam

SEM Expr
  | Let         decls       .   gathTySigGam        =   emptyGam
%%]

%%[1.tySigGam.TysigLet
ATTR AllDecl [ tySigGam: ValGam | | ]

SEM Expr
  | Let         decls       .   tySigGam            =   @decls.gathTySigGam
%%]

%%[1.tySigGam.Val
SEM Decl
  | Val         loc         .   (sigTy,hasTySig)    =   case @patExpr.mbTopNm of
                                                          Nothing
                                                            ->  (Ty_Any,False)
                                                          Just nm
                                                            ->  case gamLookup @lhs.tySigGam nm of
                                                                  Nothing   -> (Ty_Any,False)
                                                                  Just vgi  -> (vgiTy vgi,True)
%%]

%%[3.TySig
SEM Decl
  | TySig       loc         .   sigTy               =   tyQuantify (`elem` @tyExpr.tyVarWildL) @tyExpr.ty
                            .   gamSigTy            :=  @sigTy
%%]

%%[4_2
ATTR AllDecl [ | tySigTyCnstr: Cnstr | ]

SEM Decl
  | TySig       loc         .   (gamSigTy,gamSigCnstr)
                                                    :=  tyAsCnstr @lUniq @sigTy
                lhs         .   tySigTyCnstr        =   @gamSigCnstr |=> @lhs.tySigTyCnstr

SEM Expr
  | Let         decls       .   tySigGam            :=  @decls.tySigTyCnstr |=> @decls.gathTySigGam
%%]

%%[6
SEM Decl
  | TySig       loc         .   gTyTvL              =   ftv . map (tgiTy.snd) . gamToAssocL $ @lhs.tyGam
                            .   sigTy               :=  tyQuantify (`elem` (@tyExpr.tyVarWildL ++ @gTyTvL)) @tyExpr.ty
%%]

%%[9
SEM Decl
  | TySig       loc         .   sigTy               :=  tqoTy (tyQuantifyPr  (defaultTyQuOpts {tqoptLeaveImpls=True})
                                                                             (`elem` (@tyExpr.tyVarWildL ++ @gTyTvL))
                                                                             TyQu_Forall [] @tyExpr.ty)
%%]

%%[8
SEM Decl
  | FFI         loc         .   sigTy               =   tyQuantifyClosed @tyExpr.ty
                lhs         .   gathTySigGam        =   gamAdd @lhs.gathTySigGam
                                                            @nm (ValGamInfo @sigTy)
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Kind signatures
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[6.kiSigGam
ATTR AllDecl [ kiSigGam: TyGam | gathKiSigGam: TyGam | ]

SEM Decl
  | KiSig       lhs         .   gathKiSigGam        =   gamAdd @lhs.gathKiSigGam @nm (mkTGI (Ty_Con @nm) @sigKi)

SEM Expr
  | Let         decls       .   gathKiSigGam        =   emptyGam
                            .   kiSigGam            =   @decls.gathKiSigGam

SEM Decl
  | Data        loc         .   (sigKi,hasKiSig)    =   case gamLookup @lhs.kiSigGam @tyNm of
                                                          Nothing   -> (Ty_Any,False)
                                                          Just tgi  -> (tgiKi tgi,True)
%%]

%%[6
SEM Decl
  | KiSig       loc         .   sigKi               =   kiQuantify (const False) @kiExpr.ki
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Include binding for pattern var?
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[1.inclVarBind
ATTR PatExpr [ inclVarBind: Bool | | ]

SEM PatExpr
  | AppTop      patExpr     .   inclVarBind         =   True

SEM Decl
  | Val         patExpr     .   inclVarBind         =   not @hasTySig

SEM Expr
  | Lam         arg         .   inclVarBind         =   True
%%]

%%[5
SEM CaseAlt
  | Pat         patExpr     .   inclVarBind         =   True
%%]

%%[7
SEM RecPatExpr
  | Ext Expr    patExpr     .   inclVarBind         =   True
%%]

%%[9
SEM Expr
  | LamImpl     arg         .   inclVarBind         =   True
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Top name of pattern
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[1.mbTopNm
ATTR PatExpr [ | | mbTopNm: {Maybe HsName} ]

SEM PatExpr
  | Var VarAs   loc         .   mbTopNm             =   if @nm == hsnWild then Nothing else Just @nm
  | * - Var VarAs
                loc         .   mbTopNm             =   Nothing
%%]

%%[7.topNm
ATTR PatExpr [ | | topNm: HsName ]

SEM PatExpr
  | Var VarAs   loc         .   topNm               =   if @nm == hsnWild then uidHNm @lUniq else @nm
  | CConst IConst App
                lhs         .   topNm               =   hsnUnknown
  | AppTop Con Rec
                loc         .   topNm               =   uidHNm @lUniq
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Records, default (positional) name if absent
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[7
ATTR RecPatExpr RowTyExpr RecExpr [ | positionalFldNmL: {[HsName]} | ]
ATTR RecPatExpr [ matchOnFld: Bool | | hasAFldRef: Bool ]

SEM Expr
  | Rec         recExpr     .   positionalFldNmL    =   positionalFldNames

SEM TyExpr
  | Row         rowTyExpr   .   positionalFldNmL    =   positionalFldNames

SEM PatExpr
  | Rec         recPatExpr  .   positionalFldNmL    =   positionalFldNames
                            .   matchOnFld          =   @recPatExpr.hasAFldRef

SEM RecPatExpr
  | Ext         lhs         .   hasAFldRef          =   maybe @recPatExpr.hasAFldRef (const True) @mbNm
                (loc.positionalNm,lhs.positionalFldNmL)
                                                    =   hdAndTl @recPatExpr.positionalFldNmL
                loc         .   nm                  =   case @mbNm of
                                                          Just nm                     -> nm
                                                          Nothing  | @lhs.matchOnFld  -> @patExpr.topNm
                                                                   | otherwise        -> @positionalNm
  | * - Ext     lhs         .   hasAFldRef          =   False
 
SEM RowTyExpr
  | Ext         (loc.positionalNm,lhs.positionalFldNmL)
                                                    =   hdAndTl @rowTyExpr.positionalFldNmL
                loc         .   nm                  =   maybe @positionalNm id @mbNm

SEM RecExpr
  | Ext         (loc.positionalNm,lhs.positionalFldNmL)
                                                    =   hdAndTl @recExpr.positionalFldNmL
                loc         .   nm                  =   maybe @positionalNm id @mbNm
%%]

%%[10
SEM PrExpr
  | Lacks       rowTyExpr   .   positionalFldNmL    =   positionalFldNames
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% How to do subsumption
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[4
ATTR AllExpr AllPatExpr [ fiOpts: FIOpts | | ]

SEM Expr
  | App         func        .  fiOpts               =   strongFIOpts
                loc         .  argFIOpts            =   if @arg.isForcedTy then strongFIOpts else instLFIOpts
                arg         .  fiOpts               =   @argFIOpts
  | Lam         loc         .  knFunFIOpts          =   @lhs.fiOpts {fioBindRFirst=True}

SEM Decl
  | Val         expr        .  fiOpts               =   strongFIOpts
                patExpr     .  fiOpts               =   strongFIOpts

SEM AGItf
  | AGItf       expr        .  fiOpts               =   strongFIOpts
%%]

%%[5
ATTR AllCase [ fiOpts: FIOpts | | ]

SEM Decl
  | Val         expr        .  fiOpts               :=  if @hasTySig then strongFIOpts else weakFIOpts

SEM CaseAlt
  | Pat         patExpr     .  fiOpts               =   strongFIOpts
%%]

%%[7
SEM RecExpr
  | Ext Upd     expr        .  fiOpts               =   strongFIOpts

SEM Expr
  | Rec         loc         .  fiOpts               =   strongFIOpts
%%]

%%[9
SEM Expr
  | App         func        .  fiOpts               :=  implFIOpts
  | AppImpl     arg         .  fiOpts               =   strongFIOpts

SEM Decl
  | InstanceIntro
                expr        .  fiOpts               =   strongFIOpts
%%]

%%[10
SEM Decl
  | DynVal      expr        .  fiOpts               =   strongFIOpts
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Predicate env, for elim of predicates
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[9
ATTR AllDecl [ | patPrElimTGam: PrElimTGam | ]
ATTR NTPrf [ | prElimTGam: PrElimTGam | ]

SEM AGItf
  | AGItf       loc         .   prElimTGam          =   emptyTGam @prfCtxtId
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Predicate env, for intro of predicates
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[9
ATTR AllDecl [ | patPrIntroGam: PrIntroGam | ]
ATTR NTPrf AllPrExpr AllTyExpr AllData AllPatExpr [ prIntroGam: PrIntroGam | | ]

SEM Expr
  | Let         decls       .   patPrIntroGam       =   gamPushNew @lhs.prIntroGam
                loc         .   (lPrIGam,gPrIGam)   =   gamPop @decls.patPrIntroGam
                decls       .   prIntroGam          =   @lhs.prIntroGam `gamPushGam` @lPrIGam
                loc         .   lSubsPrIGam         =   @decls.kiCnstr |=> @lPrIGam
                            .   gSubsPrIGam         =   @decls.kiCnstr |=> @gPrIGam
                            .   gKiTvL              :=  ftv @gSubsTyGam `List.union` ftv @gSubsPrIGam
                            .   lQuPrIGam           =   gamMap
                                                            (\(n,t) -> (n,t {pigiKi = tyQuantify (`elem` @gKiTvL) (pigiKi t)}))
                                                            @lSubsPrIGam
                body        .   prIntroGam          =   @gSubsPrIGam `gamPushGam` @lQuPrIGam

SEM AGItf
  | AGItf       loc         .   prIntroGam          =   emptyGam
%%]

