% $Id$

Removes all the unused tags in the constructor, eval and apply maps.

TODO: as long as we don't have global variables we need to find the CAFS. Which give rise to implicit variables which stores FNodes ...
TODO: has to run before tag map (but should not need to) - since we build tags from cafs

%%[0
%include lhs2TeX.fmt
%include afp.fmt
%%]

%%[8 import("../GrinCodeAbsSyn")
%%]

%%[8.wrapper
WRAPPER GrAGItf
%%]

%%[8 hs module Trf.DropUnusedTags import("qualified Data.Set as Set")
%%]

%%[8 hs import(EHCommon, GRINCCommon, GrinCode) export(dropUnusedTags)
dropUnusedTags :: GrModule -> GrModule
dropUnusedTags grmod = let t = wrap_GrAGItf (sem_GrAGItf (GrAGItf_AGItf grmod))
                                            (Inh_GrAGItf)
                                in grTrf_Syn_GrAGItf t
%%]

%%[8
ATTR GrAGItf [ | | grTrf: GrModule ]
ATTR AllGrNT [ | | grTrf: SELF ]

%%]

TODO: which basic Tags should be availible

%%[8.retrieveUsedTags
ATTR AllBind AllExpr [ | usedTags: {Set.Set GrTag} | ]

SEM GrModule
  | Mod           bindL  .  usedTags  =  Set.emptySet

SEM GrTag
  | *            lhs  .  usedTags  =  Set.addToSet @lhs.usedTags @grTrf
%%]


%%[8.CAFs import("../GrCAFNames")
SEM GrModule
  | Mod  loc  .  usedTags = foldl nm2tag @bindL.usedTags @bindL.cafNames
%%]

%%[8.name2tag hs
nm2tag ts nm = Set.addToSet ts (GrTag_Lit GrTagFun 0 nm)
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Remove unused tags %%%
%%%%%%%%%%%%%%%%%%%%%%%%%%

TODO: how to know which apply tags are needed (when apply is not inlined)

%%[8.remveUnusedTags
SEM GrModule
  | Mod  lhs  .  grTrf        =  GrModule_Mod @baseName @bindL.grTrf @ctagsMp' @evalTagMp' @applyTagMp'
         loc  .  ctagsMp'     =  @ctagsMp
              .  evalTagMp'   =  filter (\ ((t,_),_) -> Set.member t @usedTags) @evalTagMp 
              .  applyTagMp'  =  @applyTagMp
%%]

% vim:ts=4:et:ai:
