% $Id$

%%[0
%include lhs2TeX.fmt
%include afp.fmt
%%]

%%[8 import(../../GrinCodeAbsSyn)
%%]

%%[8.wrapper
WRAPPER GrAGItf
%%]

%%[8 hs import(EHCommon, GRINCCommon, GrinCode) export(dropEvalAndApply)
dropEvalAndApply :: GrModule -> GrModule
dropEvalAndApply grmod = let t = wrap_GrAGItf (sem_GrAGItf (GrAGItf_AGItf grmod)) Inh_GrAGItf
                         in grTrf_Syn_GrAGItf t
%%]

%%[8
ATTR GrAGItf [ | | grTrf: GrModule ]
ATTR AllGrNT [ | | grTrf: SELF ]
ATTR GrBind  [ | | isSpecial: Bool ]

SEM GrBind
  | Bind    lhs . isSpecial = @nm `elem` [evalNm, evalNr,  applyNm, applyNr] 
  | Rec     lhs . isSpecial = False

SEM GrBindL
  | Cons    lhs . grTrf = if @hd.isSpecial
                          then @tl.grTrf
                          else @hd.grTrf : @tl.grTrf
%%]
