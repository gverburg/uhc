%%[0
%include lhs2TeX.fmt
%include afp.fmt
%%]

%%[8_1
DATA GhcModule
	| Module
		name : {MIdent}
		tdefs : TypeDefs
		lvdefs : ValueDefgs
		vdefs : ValueDefgs
DATA TypeDef
	| Data 
		name : {DIdent}
		binders : TypeBinders
		cdefs : ConsDefs
DATA ConsDef
	| ConsDef 
		name :  {DCon}
		typebinders: TypeBinders
		tys: {[Ty]}
DATA ValueDefg
	| RecValues 
		values: ValueDefs
	| Value
		value: ValueDef

DATA ValueDef
	| ValueDef 
		name: {VIdent}
		type: Ty
		expr: Expression


DATA Expression
	| Var
		name: {VIdent}
	| Cons
		name: {DCon}
	| ILit
		value: {Int}
	| CLit
		value: {Char}
	| Nested
		expr: Expression
	| App
		fun: Expression
		args: Arguments
	| Lambda
		binders: Binders
		expr: Expression
	| Let
		valueDefg: ValueDefg
		expr: Expression
        | Case
               expr: Expression
               vbind: ValueBinder
               alts: Alternatives

DATA Alternative
        | Alternative
		name :  {DCon}
		typebinders: TypeBinders
		valuebinders: ValueBinders
                expr: Expression
        | Default
		expr: Expression

DATA Argument
	| Type
		type: Ty
	| Value
		value: Expression
DATA Binder
	| Type
		type: TypeBinder
	| Value
		value: ValueBinder
DATA ValueBinder
	| ValueBinder
		var : {VIdent}
		type : Ty
DATA TypeBinder
	| TypeBinder
		var : {TVar}
		--kind : Kind

TYPE Alternatives = [ Alternative ]
TYPE Arguments = [ Argument ]
TYPE TypeBinders = [ TypeBinder ]
TYPE ValueBinders = [ ValueBinder ]
TYPE Binders = [ Binder ]
TYPE ValueDefgs = [ ValueDefg ]  
TYPE ValueDefs = [ ValueDef ]  
TYPE TypeDefs = [ TypeDef ]
TYPE ConsDefs = [ ConsDef ]

DATA MaybeType
	| Just 
		type : Ty
	| Nothing

SET AllButTopGhcCore = TypeDef ConsDef ValueDefg ValueDef Expression Argument Binder ValueBinder TypeBinder Arguments TypeBinders ValueBinders Binders ValueDefgs ValueDefs TypeDefs ConsDefs MaybeType Alternative Alternatives
SET AllGhcCore = GhcModule AllButTopGhcCore
%%]

