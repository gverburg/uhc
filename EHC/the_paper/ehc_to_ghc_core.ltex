
%
%  Efficient Implementation of Functional Languages
%  2004/2005
%


\documentclass[12pt]{article}
%include lhs2TeX.fmt
%include lhs2TeX.sty

%format ATTR = "\mathbf{ATTR}"
%format DATA = "\mathbf{DATA}"
%format SEM = "\mathbf{SEM}"
%format lhs = "\mathbf{lhs}"
%format . = "."

\usepackage{a4wide}
%\usepackage{graphics}
%\usepackage{graphicx}
%\usepackage{color}
%\usepackage{alltt}
%\usepackage[portuges]{babel}
%\usepackage[latin1]{inputenc}
%\usepackage{latexsym}


%\usepackage{noweb}

%\usepackage[dvips]{epsfig}
%\usepackage{epic}
%\usepackage{eepic}

%\usepackage{hyperref}


\def\Ipe#1{\def\IPEfile{#1}\input{#1}}

\newtheorem{exercicio}{}[section]

\title{\sf EHC to GHC Core Backend \\
\begin{tabular}{c}
{\small University of Utrecht} \\
{\small 2004/2005}  \\
{\small http://www.cs.uu.nl/groups/ST/Eifl/EHCToGhcCore} \\
\end{tabular}
}

\author{Christof Douma \\ Rodrigo Baptista}
\date{}


%\def\eg{\textit{e.g.}}
%\def\ie{\textit{i.e.}}
%\def\attrid#1{\textit{#1}}
%\def\bnfnt#1{\textit{#1}}
%\def\bnfprod#1{\textit{#1}}
%\def\semfun#1{\textsf{#1}}

\begin{document}


\maketitle


\tableofcontents

\section{Introduction}

The purpose of this project is to generate GHC Core code from EHC language. GHC Core is an intermediate language of the Glasgow Haskell Compiler which is an internal representation of various compiling stages in GHC.

EHC is a more-or-less Haskell Compiler and it is a evolutionary project because the final compiler envolves via intermediate steps, so it is divided in various versions. This backend is an extension of version 8 of EHC (8\_1) so it will be one more step to extend the future compiler.EHC has an intermediate Core language too, that will be our source language to generate the GHC Core. 

This report is pointed to students or people that are interested to extend this project and we assume that they already have knowledge in the implementation and structure of EHC. We will try to be specific explainning the various steps of the implementation,showing the code and some examples.

\medskip


\section{The Grammar of GHC Core}

The Grammar is represented in ----Andrew Tolmach. An External Representation for the GHC Core Language (Draft for GHC5.02). http://www.haskell.org/ghc/documentation.html, 2001---- but we simplified it because version 8 of EHC limits some implementation parts of the Grammar.Below you can see the representation of our grammar version:

\(
\begin{array}{l}
\begin{array}[t]{lclccl}
& & GhcModule  & module   & \rightarrow  & mident \\ tdefs \\ vdefs
& & Typedef.   & tdef     & \rightarrow  & dident \\ tbinders \\ cdefs
& &            &          &  ||           & dident \\ tbinders \\ maybetype?
& & ...
\end{array} \\
\end{array}
\)

\medskip

\section{The Source Language}

The source language of the backend is EHC Core,although in the beginning we were trying to use directly EH source language but then we realized that it wasnt correct, because between EH language and EH Core, it is made many useful transformations and optimizations. The Abstract Syntax Tree of EH Code is specified in {\bf EHCodeAbsSyn.cag} and we have changed some parts of in four parts:

\begin{itemize}
\item
We have considered that a Code Module has, besides of a base name and an code expression, an extra Type that corresponds to the top binding;

\begin{code}
%%[8.CModule
DATA  CModule
  |  Mod         baseName        :  {String}
                 expr            :  CExpr
%%]

%%[8_1.CModule -8.CModule
DATA  CModule
  |  Mod         baseName        :  {String}
                 ty              :  Ty
                 expr            :  CExpr
%%]
\end{code}

\item
In Let expressions we have added a Type Gama so we could after create data type constructors in GHC Core. In Lambda Abstractions we have added a Type for binding;

\begin{code}
%%[8.LamLet
  |  Let         categ           :  {CBindCateg}
                 binds           :  CBindL
                 body            :  CExpr
  |  Lam         arg             :  {HsName}
                 body            :  CExpr
%%]

%%[8_1.LamLet -8.LamLet
  |  Let         categ           :  {CBindCateg}
                 tyGam           :  {TyGam}
                 binds           :  CBindL
                 body            :  CExpr
  |  Lam         arg             :  {HsName}
                 ty              :  Ty
                 body            :  CExpr
%%]
\end{code}

\end{itemize}

\medskip

\section{Overview to the added/created files}

This is an overview of what we have specifically done in the files point of view. We have created version 8\_1 of EHC adding some necessary files:

\begin{itemize}
\item
{\bf EHGhcCoreAbsSyn.cag}: 
                     It contains the Data type of the Abstract Syntax Tree used to represent GHC Core language;
\item
{\bf EHGhcCoreMain.cag}:  
                     It contains the operational semantics and auxiliar functions;
\item
{\bf EHGhcCore.cag}: 
                     It contains the Haskell importable interface to GhcCore backend;
\item
{\bf EHGhcCorePretty.cag}:
                     It contains the pretty printer of the GHC Core Abstract Syntax Tree;
\end{itemize}

And we have changed files from version 8 of EHC:

\begin{itemize}
\item
{\bf EHC.chs}: 
                     Added compile rule for GhcCore backend;
\item
{\bf EHCodeAbsSyn.cag}: 
                     Made some changes on EH Code Abstract Syntax Tree;
\item
{\bf EHCode.cag}: 
                     Changed Haskell functions related to EH Code Abstract Syntax Tree;
\item
{\bf EHCommon.chs}: 
                     Added auxiliar function;
\item
{\bf EHGenCode.cag}: 
                     Changed functions related to the translation of EH language to EH Code;
\item
{\bf EHMainAG.cag}:  
                     Added import rules;
\item
{\bf EHTyPretty.cag}:
                     Changed the Pretty Printer for Types;
\item
{\bf Makefile}:
                     Added make rules for version 8\_1;
\end{itemize}

\section{Examples}

\end{document}


