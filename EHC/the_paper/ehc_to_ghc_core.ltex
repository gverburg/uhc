%
%  Efficient Implementation of Functional Languages
%  2004/2005
%


\documentclass[12pt]{article}
%include lhs2TeX.fmt
%include lhs2TeX.sty

%format ATTR = "\mathbf{ATTR}"
%format DATA = "\mathbf{DATA}"
%format SEM = "\mathbf{SEM}"
%format lhs = "\mathbf{lhs}"
%format loc = "\mathbf{loc}"
%format . = "."
%format @ = "\;\at"
%format $ = "\;\$\;"

\usepackage{a4wide}
\usepackage{natbib}
\bibpunct{(}{)}{;}{a}{}{,}


%\usepackage{graphics}
\usepackage{graphicx}
%\usepackage{color}
%\usepackage{alltt}
%\usepackage[portuges]{babel}
%\usepackage[latin1]{inputenc}
%\usepackage{latexsym}


%\usepackage{noweb}

%\usepackage[dvips]{epsfig}
%\usepackage{epic}
%\usepackage{eepic}

\usepackage{hyperref}


\newcommand{\derives}{\mbox{$\rightarrow$}}
\newcommand{\orderives}{\mbox{$\mid$}}
\newcommand{\many}[1]{\{ {#1} \}}
\newcommand{\oneormore}[1]{\{ {#1} \}$^{+}$}
\newcommand{\optional}[1]{[ {#1} ]}

\newcommand{\at}{\texttt{@@}}
\newcommand{\att}{@@}
\newcommand{\lam}{\texttt{\char`\\}}

\newcommand{\file}[1]{\noindent {\bf\emph{#1}}}
\newcommand{\header}[1]{\bigskip \noindent {\bf #1}\\}

\title{\sf EHC to GHC Core Backend \\
\begin{tabular}{c}
{\small University of Utrecht} \\
{\small 2004/2005}  \\
{\small http://www.cs.uu.nl/groups/ST/Eifl/EHCToGhcCore} \\
\end{tabular}
}

\author{Christof Douma \\ Rodrigo Baptista}
\date{}


%\def\eg{\textit{e.g.}}
%\def\ie{\textit{i.e.}}
%\def\attrid#1{\textit{#1}}
%\def\bnfnt#1{\textit{#1}}
%\def\bnfprod#1{\textit{#1}}
%\def\semfun#1{\textsf{#1}}

\begin{document}


\maketitle


\tableofcontents
\newpage
\section{Introduction}

The purpose of this project is to generate GHC Core code from EHC language. GHC Core is an intermediate language of the Glasgow Haskell Compiler \cite{www04ghc} which is an internal representation of various compiling stages in GHC.

EHC is a more-or-less Haskell Compiler and it is a evolutionary project because the final compiler envolves via intermediate steps, so it is divided in various versions. This backend is an extension of version 8 of EHC (8\_1) so it will be one more step to extend the future compiler. EHC has an intermediate Core language too, EHCode. That will be our source language to generate the GHC Core. 

This report is pointed to students or people that are interested to extend this project and we assume that they already have knowledge in the implementation and structure of EHC. We will try to be specific explainning the various steps of the implementation,showing the code and some examples.

See Figure \ref{overview1} for overview of the project. 

\bigskip

\begin{figure}
\caption{Overview of the 3 languages in EHC}
\label{overview1}
\includegraphics[scale=0.5,angle=-90]{overview1}
\end{figure}


\section{The Grammar of GHC Core}

Below a bit simplified grammar definition of GHC Core. The complete description of the external core language is Grammar is represented in \cite{tolmach2001ghc-core} from which we copied and modified the definition below. We tried to define a Abstract Syntax data definition which is close to the GHC Core Concrete syntax. It should be easy to understand the data type for GHC Core used in EHC. The main difference is the merge of Atomic expressions into Expressions. The datatype is defined in {\bf EHGhcCoreAbsSyn.cag}.

\medskip

We use the following notational conventions for syntax:

\begin{tabular}{ll}
{\it [ pat ]} & optional \\
{\it \{ pat \}} & zero or more repetitions \\
{\it \{ pat \}$^{+}$} & one or more repetitions \\
{\it pat$_1$ \orderives\ pat$_2$} & choice \\
@fibonacci@ & terminal syntax in typewriter font \\
\end{tabular}

{\it
\begin{tabular}{lrclr}
{\rm Module} &	 module &	 \derives &	 
	\multicolumn{2}{l}{@%module@ mident \many{tdef @;@} \many{\optional{@%local@} vdefg @;@}} \\
\\
{\rm Type defn.} &	 tdef &	 \derives &	@%data@ qtycon \many{tbind} @=@ @{@ cdef \many{@;@ cdef} @}@ & {\rm algebraic type}\\
\\
{\rm Constr. defn.} &	cdef &	 \derives &	 qdcon \many{\verb|@@| tbind} \many{aty} \\
\\
{\rm Value defn.}  &	vdefg &	 \derives &	 @%rec@ @{@ vdef \many{@;@ vdef} @}@ &			 {\rm recursive} \\
      		   &	&	 \orderives &	 vdef &	 						 {\rm non-recursive} \\
		   &    vdef  &  \derives & qvar @::@ ty @=@ exp & \\
\\
{\rm Atomic expr.} &     aexp &  \derives &	 qvar &	 						{\rm variable} \\
		 &	&	 \orderives &	 qdcon &	 					{\rm data constructor}\\ 
		 &	&	 \orderives &	 lit &	 						{\rm literal} \\
		 &	&	 \orderives &	 @(@ exp @)@ &						{\rm nested expr.}\\
\\
{\rm Expression} &	exp   &  \derives    &   aexp & 						{\rm atomic expresion}\\
	         &	&	\orderives  &    aexp \oneormore{arg} & 				{\rm application}\\
		 &	&	 \orderives &	 @\@ \oneormore{binder} @->@ exp &		 	{\rm abstraction}\\
		 &	&	 \orderives &	 @%let@ vdefg @%in@ exp &	 			{\rm local definition}\\
		 &	&	 \orderives &	 @%case@ exp @%of@ vbind @{@ alt \many{@;@ alt} @}@ &	{\rm case expression}\\
\\
{\rm Argument}   &	arg & 	\derives &	 \at\ aty &						{\rm type argument}\\
		 &	&	 \orderives &	 aexp &							{\rm value argument} \\
\\
{\rm Case alt.} &	alt &	 \derives &	qdcon  \many {\verb|@@| tbind} \many{vbind} @->@ exp &{\rm constructor alternative}\\
		&	&	 \orderives &	 lit @->@ exp &	 			{\rm literal alternative} \\
		&	&	 \orderives &	 @%_@ @->@ exp & 				{\rm default alternative} \\
\\
{\rm Binder}	 & 	binder & \derives & \at\ tbind	&					{\rm type binder}\\
		 & 		& \orderives & 	vbind	&						{\rm value binder}\\
\\
{\rm Type binder} &	tbind & \derives   & tyvar & {\rm implicitly of kind @*@} \\
\\
{\rm Value binder} & 	vbind & \derives &   @(@ var @::@ ty @)@ \\
\\
{\rm Literal} &	 lit &	 \derives &	 @(@ [@-@] \oneormore{digit} @::@ ty @)@ & {\rm integer} \\
	    &	&	 \orderives &	 @(@ [@-@] \oneormore{digit} @.@ \oneormore{digit} @::@ ty @)@ & {\rm rational} \\
	    &	&	 \orderives &	 @(@ @'@ char @'@ @::@ ty @)@ & {\rm character} \\
	    &	&	 \orderives &	 @(@ @"@ \many{char} @"@ @::@ ty @)@ & {\rm string} \\
\\
{\rm Character}  & char & \derives & \multicolumn{2}{l}{any printable ASCII character}\\
		&	& \orderives & @\x@ hex hex  & {\rm ASCII code escape} \\
		&  hex   & \derives & @0@ \orderives  \ldots \orderives  @9@ \orderives  @a@ \orderives  \ldots \orderives  @f@ \\
\end{tabular}

\begin{tabular}{lrclr}
{\rm Identifier}	&	mident & \derives &uname &	{\rm module} \\
	&	tycon &	 \derives &	 uname &	 	{\rm type constr.}  \\
	&	qtycon & \derives &	 mident @.@  tycon &	{\rm qualified type constr.} \\
	&	tyvar &	 \derives &	 lname &		{\rm type variable} \\
	&	dcon &	 \derives &	 uname &	 	{\rm data constr.} \\
	&	qdcon &	 \derives &	 mident @.@  dcon & 	{\rm qualified data constr.} \\
	&	var &	 \derives &	 lname &		{\rm variable} \\
	&	qvar &	 \derives &	 [ mident @.@ ] var &	{\rm optionally qualified variable} \\
\\
{\rm Name} 	&	lname  &  \derives & 	 lower \many{namechar} \\
 	&       uname &  \derives & 	 upper \many{namechar} & \\
	&	namechar & \derives &	 lower \orderives\  upper \orderives\  digit \orderives\  @'@ \\
	&	lower &  \derives &      @a@ \orderives\  @b@ \orderives\  \ldots \orderives\  @z@ \orderives\  @_@ \\
	&	upper &  \derives &      @A@ \orderives\  @B@ \orderives\  \ldots \orderives\  @Z@ \\
	& 	digit &  \derives & 	 @0@ \orderives\  @1@ \orderives\  \ldots \orderives\  @9@ \\
\\
\end{tabular}
}

Ty refers in our implementation to the datatype defined in {\bf EHTyAbsSyn.cag}.

\subsection{EHCode vs GHC Core}

There are several essential differences between GHC Core and EHCode.

\subsubsection{Types}
On several places the GHC Core language require type information.

\begin{itemize}
\item In function applications All polymorphic functions and all higher kinded datatypes should get type arguments.
\item all bindings of names to expressions should contain type information.
\item all variables in patterns should contain type information.
\item all literals need to be typed explicit, this is due to the fact that literals in Haskell refer to type classes. i.e. a constant 3 is of type |(Num t) => t|. Since Ghc at this level has no type classes anymore it needs to know which instance of Num it has to use.
\end{itemize}

The EHCode language however does not incorporate type information. Since we generate GHC Core out of EHCode we have to incorporate it into EHCode.

\subsubsection{Datatypes}
EHCode converts datatypes into (untyped?) records. GHC Core defines datatypes the same way as haskell datatypes. So we must have means to reintroduce them.

\subsubsection{Evaluation forcing constructs}

The EHCode uses a strict let binding to force evaluation. Called let! (Let bang). The GhcCore uses the case expression as the only place where evaluating is forced.

\section{Hook into the compiler}

Compilerdriver, Makefile \ldots

\section{Add type information to bindings}

In the beginning we were using directly the EH language. This language had all the information we needed. But of course a lot of analysis and desugaring in the front end of EHC is done on EH when translating into EHCode so the EH language is for the front-end only.

We are going to explain what we have changed in EHCode abstract syntax. Then we will show the changes when we generate the EHCode, which is done in {\bf EHGenCode.cag}.

\subsection{Top Module}

To make a correct GhcModule out of EHCode we bind the toplevel EH expression to an exported top level function named \emph{top}. Since every binding needs a type we have to add the type of the expression that corresponds to the top binding. So we introduce a ty in CModule.

\medskip

\file{EHCodeAbsSyn.cag}
\begin{code}
DATA  CModule
  |  Mod         baseName        :  {String}
                 ty              :  Ty
                 expr            :  CExpr
\end{code}

\medskip

Generating this information from EH is simple.

\medskip

\file{EHGenCode.cag}
\begin{code}
SEM AGItf
  | AGItf       lhs         .   cmodule     =   CModule_Mod @lhs.baseName @expr.ty @expr.cexpr
\end{code}

\subsection{Lambda Abstractions}

In Lambda Abstractions we add a Type for binding of argument variables.

\medskip

\file{EHCodeAbsSyn.cag}
\begin{code}
DATA CExpr
  |  Lam         arg             :  {HsName}
                 ty              :  Ty
                 body            :  CExpr
\end{code}

\medskip

Again this is not hard to include.

\medskip
\file{EHGenCode.cag}
\begin{code}
SEM CEXpr
  | Lam         loc         .   cexpr       :=   CExpr_Lam @arg.topNm @arg.ty ...
\end{code}

\subsection{Pattern variables}

For the pattern variables we include type info in the same way. 

\medskip

\file{EHCodeAbsSyn.cag}
\begin{code}
DATA  CPat
  |  Var         pnm             :  {CPatNm}
                 ty              :  Ty

\end{code}

\file{EHGenCode.cag}
\begin{code}
SEM PatExpr
  | Var         lhs         .   cpat        =   CPat_Var @cpNm
\end{code}

\subsection{Let bindings}

We add Type information in the binds so we could know the type of the expression which is binded so we can create a typed bindings in a let. 

\medskip

\file{EHCodeAbsSyn.cag}
\begin{code}
DATA CBind
  | Bind        nm              : {HsName}
                ty              : Ty
                expr            : CExpr
\end{code}

\medskip

GHC Core provides Foreign Function Interface but we did not introduce that yet, we just included a type in the Foreign Function Interface and use it as a normal binding.

\medskip

\file{EHGenCode.cag}
\begin{code}
SEM Decl
  | Val         lhs         .   cbindL      =   [CBind_Bind @patExpr.topNm @expr.ty @expr.cexpr] ++ @patExpr.cbindL
  | FFI         lhs         .   cbindL      =   [CBind_Bind @nm @sigTy (CExpr_Var (HNm @impEnt))]

SEM Expr
  | Case        loc         .   cexpr       :=   let  n = uidHNm @lUniq
                                                 in   mkCExprLet CBindPlain emptyGam [CBind_Bind n @expr.ty @expr.cexpr]
                                                        (rceMatch [(n,@expr.ty)] @alts.caltL cvarUndefined)
\end{code}

As you can see the case alternative uses a binding, so we have to add that one too. The changes have been simple until now. The case is the first place the front end is actually doing something with EHCode rather than just building up the tree. It applies a pattern mattching comiling algorithm. The top level function of this algorithm is the |rceMatch| function. The changes needed to its implementation are far from trivial.

\subsubsection{Pattern matching compiling algorithm}

The front uses an Patern-matching compiler algorithm described in \cite{ipt:impl-func-prog-lang}.  The algoritm converts a nested pattern to a non overlapping pattern which is flat. i.e. Has a constructor and a list of variables. We give an example below.

\medskip

\noindent The algorithm changes a nested / overlapping case 
\begin{code}
case x of
    Left (Left   z)  -> z
    Left (Right  z)  -> z
\end{code}

%format y'
\noindent into a flat case
\begin{code}
case x of
    Left y ->  let! y' = y
               in  case y' of 
                      Left   z  -> y
                      Right  z  -> z
\end{code}

\medskip

Note that the let! statement is the forcing part of EHCode. Not the case statement. 

Since the algorithm can introduce let bindings and introduces new pattern variables we need to give the types of all identifiers and make them traverse through the algoritm. We have to introduce the type in the Constructor arguments since such an argument might change into a variable (see example above).

\header{More typeinfo}
A constructor in a pattern stores it arguments in a CPatBind datatype, so we extend that datatype.

\medskip

\file{EHCodeAbsSyn.cag}
\begin{code}
DATA  CPatBind
  |  Bind        offset          :  {Int}
                 nm              :  {HsName}
                 ty              :  Ty
                 pat             :  CPat
\end{code}

\medskip
 
The attribute |cbindL| is a associative list from argument name to its pattern. The argument name is the name of a label in a record. in case of a normal application the name is undefined. There is no reason to use an associative list for this since no lookup is done. However the datatype is availible and is nothing more than a list of tuples which is exacly what was needed here.

To get the type info out of EH language we change this attribute to include also the type info. The change is straitforward, we save types of record fields and of arguments of applications.

Finally  this list is used to create the pattern bindings.

\medskip

\file{EHGenCode.cag}
\begin{code}
ATTR AllPatExpr [ | | cpbindL: {AssocL HsName (Ty,CPat)} ]

SEM RecPatExpr
  | Empty       lhs         .   cpbindL     =   []
  | Ext         lhs         .   cpbindL     =   (@nm,(@patExpr.ty,@patExpr.cpat)) : @recPatExpr.cpbindL

SEM PatExpr
  | App         lhs         .   cpbindL     =   (hsnUnknown,(@arg.ty,@arg.cpat)) : @func.cpbindL
  | AppTop      loc         .   cpbindL     =   @patExpr.cpbindL
  | Rec         loc         .   cpbindL     =   @recPatExpr.cpbindL
  | Con         loc         .   cpbindL     =   []
  | * - App Con 
                lhs         .   cpbindL     =   []

  | AppTop Con Rec
                loc         .   cpatBinds   =   map (\(o,(n,(t,p))) -> CPatBind_Bind o n t p) . zip [0..] . tyRowCanonOrder . reverse $ @cpbindL
                lhs         .   cpat        =   CPat_Con @cpNm @tag @appFunNm @cpatBinds
\end{code}

\medskip

\header{rceMatch}
|rceMatch| first make partitions of patterns which are just variables and patterns which are not. It makes a let binding for the default expressions (|ce|) when it is not a simple variables to prevent duplication of code. For the others it calls rceMatchVarCon directly.

\medskip

\file{EHGenCode.cag}
\begin{code}
rceMatch :: [(HsName, Ty)] -> CAltL -> CExpr -> CExpr
rceMatch [] []    ce =  ce
rceMatch [] alts  ce
  =  case [ e | (CAlt_Alt [] e) <- alts ] of
       (e:_)  -> e
       _      -> ce

rceMatch args alts ce
  =  foldr
        (\alts e
           ->  case e of
                  CExpr_Var _
                     ->  rceMatchVarCon args alts e
                  _  ->  let  bty = Ty_Any
                              bnm = HNm ("_casecont_" ++ (show . cpatVarNm . caltPat . head $ alts))
                              vc = rceMatchVarCon args alts (CExpr_Var bnm)
                         in   mkCExprLet CBindPlain emptyGam [CBind_Bind bnm bty e] vc
       )
        ce
     $ (rceSplit caltIsVar alts)

-- nothing changed here
rceSplit :: (CAlt -> Bool) -> CAltL -> [CAltL]
rceSplit f []   = []
rceSplit f [x]  = [[x]]
rceSplit f (x:xs@(x':_))
  | f x == f x'  =  let  (z:zs) = rceSplit f xs
                    in   (x:z) : zs
  | otherwise    =  [x] : rceSplit f xs

\end{code}

\header{rceMatchVarCon}
|rceMatchVarCon| is simply a dispatcher to match a variable or a constructor.

\medskip

\file{EHGenCode.cag}
\begin{code}
rceMatchVarCon :: [(HsName, Ty)] -> CAltL -> CExpr -> CExpr
rceMatchVarCon args alts@(alt:_) ce
  |  caltIsVar alt  = rceMatchVar args alts ce
  |  otherwise      = rceMatchCon args alts ce

\end{code}

\header{rceMatchVar}
Matching on a single variable is superfluous. |rceMatchVar| converts such a pattern into a let binding with the body of this |let| the rest of the match. 

\medskip

\file{EHGenCode.cag}
\begin{code}
rceRebinds :: (HsName,Ty) -> CAltL -> CBindL
rceRebinds (nm,ty) alts = [ CBind_Bind n ty (CExpr_Var nm) | (CPatNmOrig n) <- caltLPatNms alts, n /= nm ]

rceMatchVar :: [(HsName, Ty)] -> CAltL -> CExpr -> CExpr
rceMatchVar (arg:args') alts ce
  =  let  remMatch  = rceMatch args' [CAlt_Alt remPats e | (CAlt_Alt (CPat_Var n t : remPats) e) <- alts] ce
     in   mkCExprLet CBindPlain emptyGam (rceRebinds arg alts) remMatch
\end{code}

\header{rceMatchCon}

|rceMatchCon| takes care of grouping of patterns which start with the same constructor and create an |let!| and a case which only will inspect the top level constructor and create the rest of the match by calling rceMatch recursively. So it flattens the pattern match into a case with distict constuctor tags which binds variables only.

The information in the |CPatBind_Bind| is extracted to be used in a let bound variabe or in a pattern variable.

\medskip

\file{EHGenCode.cag}
\begin{code}
rceMatchCon :: [(HsName, Ty)] -> CAltL -> CExpr -> CExpr
rceMatchCon args@((nm,ty):args') alts ce
  =  let  arg'   =  hsnPrefix "!" nm
          alts'  =  map
                      (\alts
                        ->  let  (subAlts,subAltSubNms)
                                               =  unzip
                                                    [ (CAlt_Alt (map snd pats ++ ps) e, map (\(t,p) -> (cpatNmNm . cpatVarNm $ p, t)) pats)
                                                    | (CAlt_Alt (CPat_Con _ _ _ pbinds : ps) e) <- alts,
                                                      let pats = [ (t,p) | (CPatBind_Bind _ _ t p) <- pbinds ]
                                                    ]
                                 subMatch      =  rceMatch (head subAltSubNms ++ args') subAlts ce
                                 altPat        =  case head alts of
                                                    CAlt_Alt (CPat_Con n conTag tn pbinds : _) _
                                                      -> CPat_Con n conTag tn [ CPatBind_Bind o n t (CPat_Var (cpatVarNm p) t) | (CPatBind_Bind o n t p) <- pbinds ]
                            in   CAlt_Alt [altPat] (mkCExprLet CBindPlain emptyGam (rceRebinds (arg',ty) alts) subMatch)
                      )
                 .  groupBy (\a1 a2 -> caltTag a1 == caltTag a2)
                 .  sortBy (\a1 a2 -> caltTag a1 `compare` caltTag a2)
                 .  filter (not . null . caltPatL)
                 $  alts
     in   ceStrictIn arg' ty (CExpr_Var nm) (\n -> CExpr_Case n alts' ce)
\end{code}

\medskip

\section{Translating EHCode to GhcCore}

\subsection{Reintroducing data definitions}

HERE WE ARE LEFT \ldots write about renaming\ldots

\medskip

\begin{code}
\end{code}

\medskip

\subsection{Outputting GHC Core Code}

\medskip

Outputting the GHC Core code  was quit straightforward, we just created a pretty printer for our version, which is located in the file {\bf EHGhcCorePretty.cag} and made some changes in the pretty printer of the types ({\bf EHTyPretty.cag}).

To make the generated output compilable, we needed to include some extra information when printing Integers and Characters, i.e. describing that they are unboxed:


\begin{code}
boxInt i =  "GHCziBase.Izh" >#< pp_parens (i >#< "::GHCziPrim.Intzh" )
boxChar c =  "GHCziBase.Czh" >#< pp_parens (c >#< "::GHCziPrim.Charzh" )
\end{code}


We have encountered a problem with the pretty printer that is not clear yet: When the expected output generated is too big, the pretty printer wont work.

....

\subsubsection{Outputting Types}

Some story about the code \ldots

\medskip

\begin{code}
%%[8_1.ppTy -1.ppTy hs import(Data.Maybe) export(ppGhcCoreTy)
ppTy :: Ty -> PP_Doc
ppTy ty
  =  let  t =  wrap_TyAGItf
                 (sem_TyAGItf (TyAGItf_AGItf ty))
                 (Inh_TyAGItf Nothing)
     in   pp_Syn_TyAGItf t

ppGhcCoreTy ::  String -> Ty -> PP_Doc
ppGhcCoreTy moduleID ty
  =  let  t =  wrap_TyAGItf
                 (sem_TyAGItf (TyAGItf_AGItf ty))
                 (Inh_TyAGItf (Just moduleID))
     in   pp_Syn_TyAGItf t

instance PP Ty where
  pp t = ppTy t
%%]
\end{code}

\bigskip

ghcModuleID\ldots

\medskip

\begin{code}
%%[1.ppAttr
ATTR TyAGItf AllTy [ | | pp: PP_Doc ]
%%]

%%[8_1.ppAttr -1.ppAttr
ATTR TyAGItf AllTy [ ghcModuleID: {Maybe String} | | pp: PP_Doc ]
%%]
\end{code}

\bigskip

ppTy in GHC\ldots

\medskip

\begin{code}
%%[8_1.pp
SEM Ty
  | Con            loc      . conName   = let ghcModName nm mid = if @nm == hsnInt || @nm == hsnChar then "GHCziBase." else (mid ++ ".")
                                              ghcQualName nm mid = hsnPrefix (ghcModName nm mid) nm
                                          in (maybe @nm (ghcQualName @nm) @lhs.ghcModuleID)
                            . pp        := ppCon @conName
%%]
\end{code}

\bigskip

\section{Type aguments}

See Figure \ref{overview2} for overview.... 

\begin{figure}
\caption{Overview of ......}
\label{overview2}
\includegraphics[scale=1.5,angle=-90]{overview2}
\end{figure}

\bigskip

\section{Overview to the added/created files}

This is an overview of what we have specifically done in the files point of view. We have created version 8\_1 of EHC adding some necessary files:

\begin{itemize}
\item
{\bf EHGhcCoreAbsSyn.cag}: 
                     It contains the Data type of the Abstract Syntax Tree used to represent GHC Core language;
\item
{\bf EHGhcCoreMain.cag}:  
                     It contains the translation from EHCode to GHC Core;
\item
{\bf EHGhcCore.cag}: 
                     It contains the Haskell importable interface to GhcCore backend;
\item
{\bf EHGhcCorePretty.cag}:
                     It contains the pretty printer of the GHC Core Abstract Syntax Tree;
\end{itemize}

And we have changed files from version 8 of EHC:

\begin{itemize}
\item
{\bf EHC.chs}: 
                     Added compile rule for GhcCore backend;
\item
{\bf EHCodeAbsSyn.cag}: 
                     Made some changes on EHCode Abstract Syntax Tree;
\item
{\bf EHCode.cag}: 
                     Changed auxiliar functions related to EHCode Abstract Syntax Tree;
\item
{\bf EHCommon.chs}: 
                     Added auxiliar function;
\item
{\bf EHGenCode.cag}: 
                     Changed functions related to the translation of EH language to EHCode;
\item
{\bf EHMainAG.cag}:  
                     Added import rules;
\item
{\bf EHTyPretty.cag}:
                     Changed the Pretty Printer for Types;
\item
{\bf Makefile}:
                     Added make rules for version 8\_1 and rules for the new files;
\end{itemize}

\bigskip

\section{Conclusions}

whas this usefull?
is EHC nice?

\section{Examples}

\medskip

Here we show some examples, so its easier to understand the main translation. For each example we will show the code in the 3 phases, which are EH, EHCode and GHC Core.

The first example is a simple representation of the Integer 3:

\begin{code}
>>> EH int <<<
let
in 3

>>> EHCode int <<<
module int
3
>>> GHC Core int <<<
%module Top
top :: GHCziBase.Int = GHCziBase.Izh (3 ::GHCziPrim.Intzh);
\end{code}

.....

%%%% REFERENCES %%%
\section{References}
\bibliographystyle{../uhcbook}
%\bibliographystyle{plain}
\bibliography{references}

------- 8< ------ SNIP ------- 8< ------
......

We have added a simple haskell function to verify if a HsName is a Constructor.

\medskip

\begin{code}
%%[8_1 import(Data.Char)
hsnIsCon                           :: HsName -> Bool
hsnIsCon  (HNm (c:_))              = isUpper c
hsnIsCon  _                        = False
%%]
\end{code}

\bigskip



\begin{code}
%%[8_1.outputPass -8.outputPass
crCompileCUPass2HS :: HsName -> CompileRun -> IO CompileRun
crCompileCUPass2HS modNm cr
  =  do  {  let  cu     = crCU modNm cr
                 p1ob   = fromJust (cuMbOut (crCU modNm cr))
                 fp     = cuFilePath cu
                 opts   = crOpts cr
                 codePP = ppCModule (cmodule_Syn_AGItf p1ob)
         ;  case ehcoptCodeType opts of
               EHCCoreCode -> do
                      {  writeFile (fpathToStr (fpathSetSuff "code" fp))
                            (disp codePP 120 "")
                      }
              JavaCode    -> do
                      {  let (jBase,jPP) = cexprJavaSrc (cmodule_Syn_AGItf p1ob)
                             jFP = fpathSetBase jBase fp
                      ;  writeFile (fpathToStr (fpathSetSuff "java" jFP))
                            (disp jPP 120 "")
                      }
               GHCCoreCode -> do
                      {  let cmod   = cmodule_Syn_AGItf p1ob
                             ghcmod = genGhcCore cmod
                             hcrPP  = ppGhcModule ghcmod
                      ;  writeFile (fpathToStr (fpathSetSuff "hcr" fp))
                            (disp hcrPP 120 "")
                      ;  putStrLn "*** GHC Core AST:"
                      ;  putStrLn (show ghcmod)
                      }
         ;  return cr
        }
%%]
\end{code}

\bigskip


\begin{code}
%%[EHCCodeOpts.8.1
-- functions to keep the version .8 parts working
ehcoptCode     o = case ehcoptCodeType o of { EHCCoreCode -> True; _ -> False }
ehcoptCodeJava o = case ehcoptCodeType o of { JavaCode    -> True; _ -> False }

data EHCCodeType = EHCCoreCode | JavaCode | GHCCoreCode
%%]

%%[EHCOpts.8.1
                                ,  ehcoptCodeType       ::  EHCCodeType
                                ,  ehcoptSearchPath     ::  [String]
                                ,  ehcoptVerbosity      ::  Verbosity
%%]

%%[defaultEHCOpts.8.1
                                ,  ehcoptCodeType       =   GHCCoreCode
                                ,  ehcoptSearchPath     =   []
                                ,  ehcoptVerbosity      =   VerboseQuiet
%%]

%%[cmdLineOptsA.8.1
     ,  Option "c"  ["code"]   (OptArg oCode "ghc-core")
          "dump code (java -> .java, ghc-core -> .hcr) on file, default=ghc-core (-> .hcr)"
%%]

%%[cmdLineOptsB.8.1
         oCode       ms  o =  case ms of
                                Just "java"      -> o { ehcoptCodeType = JavaCode    }
                                Just "ghc-core"  -> o { ehcoptCodeType = GHCCoreCode }
                                _                -> o { ehcoptCodeType = EHCCoreCode }
%%]
\end{code}


\end{document}
