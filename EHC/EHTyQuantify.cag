% $Id: EHC.lag 199 2004-05-12 19:11:13Z andres $

%%[0
%include lhs2TeX.fmt
%include afp.fmt
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Haskell importable interface to Ty quantify
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[3 hs import(EHCommon,EHTy,EHCnstr) export(tyQuantify, tyQuantifyClosed)
%%]

%%[4 hs import(List)
%%]

%%[4 import(EHTyAbsSyn,EHTyCommonAG)
WRAPPER TyAGItf
%%]

%%[6 hs export(kiQuantify)
%%]

%%[3.tyQuantify hs
tyQuantify :: (TyVarId -> Bool) -> Ty -> Ty
tyQuantify tvIsBound ty = mkTyQu (filter (not.tvIsBound) (ftv ty)) ty
%%]

%%[3.tyQuantifyClosed hs
tyQuantifyClosed :: Ty -> Ty
tyQuantifyClosed = tyQuantify (const False)
%%]

%%[4.tyQuantify -3.tyQuantify hs
tyQuantify :: (TyVarId -> Bool) -> Ty -> Ty
tyQuantify tvIsBound ty
  = let  t  =  wrap_TyAGItf
                  (sem_TyAGItf (TyAGItf_AGItf ty))
                  (Inh_TyAGItf {tvIsBound_Inh_TyAGItf = tvIsBound})
    in   quTy_Syn_TyAGItf t
%%]

%%[6.tyQuantify -4.tyQuantify hs
tyQuantify' :: (TyVarId -> Bool) -> TyQu -> Ty -> Ty
tyQuantify' tvIsBound baseQuant ty
  = let  t  =  wrap_TyAGItf
                  (sem_TyAGItf (TyAGItf_AGItf ty))
                  (Inh_TyAGItf {baseQu_Inh_TyAGItf = baseQuant, tvIsBound_Inh_TyAGItf = tvIsBound})
    in   quTy_Syn_TyAGItf t

tyQuantify :: (TyVarId -> Bool) -> Ty -> Ty
tyQuantify tvIsBound ty = tyQuantify' tvIsBound TyQu_Forall ty

kiQuantify :: (TyVarId -> Bool) -> Ty -> Ty
kiQuantify tvIsBound ty = tyQuantify' tvIsBound TyQu_KiForall ty
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Free type vars
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[4.frTvLL
ATTR AllTy [ | | frTvLL: {[TyVarIdL]} ]

SEM TyAGItf
  | AGItf       loc         .   frTvL       =   head @ty.frTvLL

SEM Ty
  | Var         loc         .   frTvL       =   [@tv]
  | App         loc         .   frTvLL      =   @arg.frTvLL ++ @func.frTvLL
                            .   frTvL       =   listCombineUniq @frTvLL
                lhs         .   frTvLL      =   if @isSpineRoot then [@frTvL] else @frTvLL
  | Quant       loc         .   frTvL       =   head @ty.frTvLL \\ @introTVarL
  | Any Con     loc         .   frTvL       =   []
  | Quant Var Any Con
                lhs         .   frTvLL      =   [@frTvL]
%%]

%%[7
SEM Ty
  | Ext         loc         .   frTvLL      =   @extTy.frTvLL ++ @ty.frTvLL
%%]

%%[9
SEM Ty
  | App         loc         .   frTvL       :=  listCombineUniq (@frRowTvL : @frTvLL)
  | Pred		loc			.	frTvL		=	listCombineUniq @pr.frTvLL
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Free row vars
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[9
ATTR Ty [ | | frRowTvL: TyVarIdL ]

SEM Ty
  | Ext         lhs         .   frRowTvL    =   @ty.frRowTvL
  | App         loc         .   frRowTvL    =   @func.frRowTvL `union` @arg.frRowTvL
  | * - App Ext
                lhs         .   frRowTvL    =   @frTvL
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Determine co- contravariance of place in type
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[4.coco
ATTR AllTy [ coco: CoContraVariance | | ]

SEM Ty
  | App         func        .   coco        =   CoContraVariant
                arg         .   coco        =   if          @appIsLikeProd || @isArrowRoot  then  CoVariant
                                                else  if    @appIsArrow                     then  ContraVariant
                                                                                            else  CoContraVariant

SEM TyAGItf
  | AGItf       ty          .   coco        =   CoVariant
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Is type a candidate where quantification can take place?
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[4.isQuLoc
SEM Ty
  | Var App Quant   loc         .   isQuLoc     =   @lhs.coco /= CoContraVariant
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Candidate free type variables to be quantified over 'here'
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[4.tvarOccurCount hs
tvarOccurCount :: [TyVarIdL] -> AssocL TyVarId Int
tvarOccurCount = map (\vl@(v:_) -> (v,length vl)) . group . sort . concat

tvarOccurGE2 :: [TyVarIdL] -> TyVarIdL
tvarOccurGE2 =  map fst . filter ((>1).snd) . tvarOccurCount
%%]

%%[4.qHereTvL
SEM TyAGItf
  | AGItf       loc         .   qHereTvL        =   []

SEM Ty
  | Var         loc         .   qHereTvL        =   if @isQuLoc then [@tv] else []
  | App         loc         .   qHereTvL        =   if @isQuLoc
                                                    then  if    @appIsArrow || @appIsLikeProd
                                                          then  tvarOccurGE2 @frTvLL
                                                          else  @frTvL
                                                    else  []
%%]

%%[9
SEM Ty
  | App         loc         .   qHereTvL        :=  if @isQuLoc
                                                    then  if    @appIsArrow || @appIsLikeProd
                                                          then  tvarOccurGE2 @frTvLL `union` @frRowTvL
                                                          else  @frTvL
                                                    else  []
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Determine quantifiable tvars
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[4.tvarsToQuant hs
tvBoundAdd :: (TyVarId -> Bool) -> TyVarIdL -> TyVarId -> Bool
tvBoundAdd tvIsBound tvL = \v -> v `elem` tvL || tvIsBound v

tvarsToQuant :: Bool -> (TyVarId -> Bool) -> TyVarIdL -> (TyVarIdL,TyVarId -> Bool)
tvarsToQuant isQuLoc tvIsBound tvL
  =  if isQuLoc
     then   let boundables = filter (not . tvIsBound) tvL
            in (boundables,tvBoundAdd tvIsBound boundables)
     else   ([],tvIsBound)
%%]

%%[4.tvIsBound
ATTR TyAGItf AllTy [ tvIsBound: {TyVarId -> Bool} | | ]

SEM TyAGItf
  | AGItf       loc         .   (qBndTvL,tvIsBound)     =   tvarsToQuant True @lhs.tvIsBound @qHereTvL
SEM Ty
  | App Var     loc         .   (qBndTvL,tvIsBound)     =   tvarsToQuant @isQuLoc @lhs.tvIsBound @qHereTvL
  | Quant       loc         .   tvIsBound               =   tvBoundAdd @lhs.tvIsBound @introTVarL
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Which quantifier to use for quantification
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[4.hereQu
SEM TyAGItf
  | AGItf       loc         .   hereQu          =   TyQu_Forall

SEM Ty
  | App         loc         .   qAsExist        =   @appIsLikeProd || @lhs.coco == ContraVariant && not @appIsArrow
  | Var         loc         .   qAsExist        =   @lhs.coco == ContraVariant
  | App Var     loc         .   hereQu          =   if @qAsExist then TyQu_Exists else TyQu_Forall
  | Quant       loc         .   hereQu          =   @qu.self
%%]

%%[6.hereQu
ATTR TyAGItf AllTy [ baseQu: TyQu | | ]

SEM TyAGItf
  | AGItf       loc         .   hereQu          :=  @lhs.baseQu

SEM Ty
  | App Var     loc         .   hereQu          :=  if @qAsExist then tyquExists @lhs.baseQu else @lhs.baseQu
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Quantified type
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[4.quTy
ATTR TyAGItf [ | | quTy: Ty ]
ATTR AllTy TyQu TyVarCateg [ | | quTy: SELF ]

SEM TyAGItf
  | AGItf       lhs         .   quTy            =   mkTyQu @hereQu @qBndTvL @ty.quTy

SEM Ty
  | Var         lhs         .   quTy            =   mkTyQu @hereQu @qBndTvL (Ty_Var @tv @categ.quTy)
  | App         lhs         .   quTy            =   mkTyQu @hereQu @qBndTvL (Ty_App @func.quTy @arg.quTy)
  | Quant       lhs         .   quTy            =   Ty_Quant @qu.self @tv @ty.quTy
%%]

