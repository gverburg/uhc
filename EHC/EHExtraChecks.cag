% $Id$

%%[0
%include lhs2TeX.fmt
%include afp.fmt
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Additional checks
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[1 hs
gamToDups :: Gam HsName v -> [HsName]
gamToDups g = [ n | ns@(n:_) <- group . sort . map fst . gamToAssocL $ g, length ns > 1 ]
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Duplicate value identifier introductions
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[1
SEM Expr
  | Let         loc         .   dupErrs             =   let  nms = gamToDups @lValGam
                                                        in   if null nms then [] else [Err_NamesDupIntrod nms]
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Obligatory type signature
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[1.sigMissErrs
SEM Decl
  | Val         loc         .   sigMissErrs         =   if @hasTySig then [] else [Err_MissingSig @patExpr.pp]
%%]

%%[2 -1.sigMissErrs
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Predicates
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[9 hs
checkClNms :: Set HsName -> [Err]
checkClNms s = if isEmptySet s then [] else [Err_NamesNotIntrod (setToList s)]
%%]
checkPrClassName :: PrIntroGam -> [HsName] -> [Err]
checkPrClassName g pl
  =  let  nms = nub . concat . map (\n -> maybe [n] (const []) (gamLookup n g)) . filter (not.hsnIsUnknown) $ pl
     in   if null nms then [] else [Err_NamesNotIntrod nms]

%%[9
SEM AGItf
  | AGItf       loc         .   predNotPrfErrs      =   if null @expr.gathPredL then [] else [Err_NotProvenPreds @expr.gathPredL]

SEM Decl
  | Instance    loc         .   predNotPrfErrs      =   if null @supRemPrfPrL then [] else [Err_NotProvenPreds @supRemPrfPrL]
  | InstanceIntro
                loc         .   predErrs            =   if null (ftv @prExpr.ty) then [] else [Err_TyHasFreeTVars @prExpr.ty]

SEM PrExpr
  | Class       loc         .   nmErrs              =   checkClNms @clMissNmS

SEM Expr
  | AppImpl LamImpl
  				loc         .   nmErrs              =   []
%%]

