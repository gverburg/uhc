%%[main doclatex
\section{Introduction}
%%@ToolDocEHC.introduction
\subsection{System overview}
\subsection{Download, build, compile and run}
\glabel{DownloadBuildCompileRun}
%%@ToolDocEHC.downloadBuildCompileRun

\subsection{Installation}
\subsection{Using EHC}

\section{Commandline}
\subsection{Commandline invocation}
%%@ToolDocEHC.commandlineInvocation

\subsection{Commandline options}
%%@ToolDocEHC.commandlineOptions

\section{Language extensions}
%%@ToolDocEHC.extensions
\subsection{Higher ranked types and impredicativity}
\label{higher-ranked-types-and-impredicativity}

\subsection{Partial type signature}
\label{partial-type-signatures}

\subsection{Existential types}
\label{existential-types}

\subsection{Kind inference}
\label{kind-inference}

\subsection{Lexically scoped type variables}
\label{lexically-scoped-type-variables}

\subsection{Extensible records}
\label{extensible-records}

\section{Language implementation status}
\glabel{LanguageImplementationStatus}
%%@ToolDocEHC.languageStatus

\subsection{Available in Haskell98 but not or partially in EHC}
%%@ToolDocEHC.inHaskell98NotInEhc

\subsection{Proposed in Haskell prime but not or partially in EHC}
%%@ToolDocEHC.inHaskellPrimeNotInEhc

\subsection{Available in EHC but not in Haskell98 or Haskell prime}
%%@ToolDocEHC.inEhcNotIn98Prime

\subsection{Library modules}
\subsubsection{@Prelude@}
\subsubsection{Others}

\subsection{Library + runtime}
\subsubsection{Threads}
\subsubsection{Garbage collection}

\subsection{Backends}
\subsubsection{GRIN based interpreter}
\subsubsection{GRIN based C, with full program analysis}
\subsubsection{GRIN based LLVM, with full program analysis}

\subsection{XX}
\subsection{XX}

\section{Further reading}
%%@ToolDocEHC.andFurther
%%]

%%[preamble
\newcommand\DocOpt[2]{\item #1 \\ \emph{#2}.\\}
\newcommand\DocOptRef[1]{\texttt{#1}}
\newcommand\DocEHCVariant[1]{EHC variants \(#1\)}

%include verb.fmt

%format EHC			= "\textsf{ehc}"
%format CCP			= "\textsf{CCP}"
%format GBM			= "\textsf{GBM}"
%format GRIN		= "\textsf{GRIN}"
%format GFULL		= GRIN
%format LLVM		= "\textsf{LLVM}"
%format Prelude		= "\texttt{Prelude}"

%%]

%%[referenceCmdLineParams
In the following overview of options to |EHC| the following shorthand notation is used:

%%[[wrap=code
<bool>     ::=  0|1|no|yes|-|+
%%]]

For |<bool>| the values |1, yes, +| correspond to |True|.

\begin{itemize}
\DocOpt{@-c[<o>], --code[=<o>]@  |where  <o> =hs||eh||core||java||grin||c||exe[c]||llvm||bc||bexe[c]|| - |}{Generate an encoding of results to a file}
\IxDef{-c}%
\IxDef{--code}%
Generate output, either just a pretty printed representation (see also option \DocOptRef{--pretty}) or executable output.
The generated output is written to a file with the same name as the file being analysed, except for the suffix.
The suffix equals the chosen |<o>|, except where specified differently.

The following can be generated:

\begin{itemize}
\item |hs| Haskell source.
\item |core| Internal core.
\item |eh| Essential Haskell source.
\item |grin| with suffix \texttt{grin2}. GRIN code.
\item |java| Java code. This is currently (20071002) not maintained.
\item |c| C for |GFULL|.
\item |bc| C for |GBM|.
\item |exe[c]| with suffix depending on platform. Executable based on |GFULL|.
\item |bexe[c]| with suffix depending on platform. Executable based on |GBM|.
\item |llvm| |LLVM| code. This is currently (20071002) not maintained.
\item |-| Off, no generation.
\end{itemize}

The default is |bexec|, except for \DocEHCVariant{< 99} for which it is |-|.



\DocOpt{@--cpp@}{Preprocess with |CPP|}
\IxDef{--cpp}%
Force recompilation of module which with the recompilation check in place would not have been recompiled.



\DocOpt{@-d, --debug@}{Show debug information}
\IxDef{-d}%
\IxDef{--debug}%
Dump the EH AST on stdout, annotated with information maintained by the type inferencer.
This option is intended for developers only.



\DocOpt{@--debug-stopat-hi-error=<bool>@}{Stop at Haskell interface file parse error}
Any out of date @.hi@ Haskell interface file triggers a recompile of the corresponding module.
A faulty interface file also triggers this, silently, without warnings about errors in the interface file.
This flag turns this default behavior off, so an error is reported when it occurs.
The compilation is then halted.
This flag is useful during changes in the interface file format.



\DocOpt{@--debug-stopat-core-error=<bool>@}{Stop at Haskell core file parse error}
When performing full program analysis core files are the endproduct of per module compilation.
For full program analysis these core files are read and combined for further full program analysis.
Parsing errors are ignored.
This flag turns this default behavior off, so an error is reported when it occurs.
The compilation is then halted.
This flag is useful during changes in the core file format.



\DocOpt{@-h, --help@}{Show help, don't run the compiler}
\IxDef{-h}%
\IxDef{--help}%



%\DocOpt{@--limit-ctxt-red=<n>@  |where  <n> = int |}{Limit context reduction ...}
%\IxDef{--limit-ctxt-red}%
%Limit the depth of type expansions during e.g. type comparison to |<n>|.



\DocOpt{@--limit-tysyn-expand=<n>@  |where  <n> = int |}{Limit type synonym expansion}
\IxDef{--limit-tysyn-expand}%
Limit the depth of type expansions during e.g. type comparison to |<n>|.



\DocOpt{@--no-prelude@}{Do not assume the presence of Prelude}
\IxDef{--no-prelude}%
Turn off the automatic inclusion of the import of module |Prelude|:

\begin{itemize}
\item
  Normally compiler assumed identifiers always map to identifiers defined in |Prelude|,
  even if redefined locally.
  This is turned off, so locally introduced corresponding identifiers and their definitions are used.
\item
  
\end{itemize}



\DocOpt{@--no-recomp@}{Turn off recompilation check}
\IxDef{--no-recomp}%
Force recompilation of module which with the recompilation check in place would not have been recompiled.



\DocOpt{@--numeric-version@}{Show the compiler version number, don't run the compiler}
\IxDef{--numeric-version}%
Show only the version number of full version information (see also option \DocOptRef{--version}).



\DocOpt{@-P, --search-path=<p>@  |where  <p> = path |}{Search path for all files}
\IxDef{-P}%
\IxDef{--search-path}%
Specify a search path, extending the already used one.
The path consists of a semicolon separated list of directories.


\DocOpt{@-p[<o>], --pretty[=<o>]@  |where  <o> =hs||eh||grin||ast|| - |}{Show pretty printed intermediate representation}
\IxDef{-p}%
\IxDef{--pretty}%
Pretty print a representation of the AST as close as possible to what would have been typed in to create the AST.
The following AST's can be pretty printed:

\begin{itemize}
\item |hs| Haskell source code representation.
\item |eh| Essential Haskell source code representation.
\item |grin| GRIN code.
\item |ast| Essential Haskell internal AST representation (see also option \DocOptRef{--debug}).
\item |-| Off, no pretty printing.
\end{itemize}

The default is |-|, except for \DocEHCVariant{< 99} for which it is |eh|.



\DocOpt{@-v[<o>], --verbose=[<o>]@  |where  <o> = 0||1||2||3 |}{Be verbose}
\IxDef{-v}%
\IxDef{--verbose}%
Print out more information.
This is done for all parts of the compiler, this flag globally influences the amount of information printed.
The following verbosity levels can be specified:

\begin{itemize}
\item |0| Quiet, silent
\item |1| Normal
\item |2| Noisy, a lot
\item |3| Very noisy, for debugging purposes.
\end{itemize}

The default verbosity level 'normal' reports about progress.



\DocOpt{@--version@}{Show the compiler version, don't run the compiler}
\IxDef{--version}%
Show full version information (see also option \DocOptRef{--numeric-version}).



\DocOpt{@-xx, --xx=xx@  |where  xx = xx |}{XX}



\DocOpt{@-xx, --xx=xx@  |where  xx = xx |}{XX}



\DocOpt{@-xx, --xx=xx@  |where  xx = xx |}{XX}



\DocOpt{@-xx, --xx=xx@  |where  xx = xx |}{XX}



\end{itemize}
%%]

%%[glossary
\begin{tabular}{lp{.7\linewidth}}
|CPP|
& |C| PreProcessor.
\\
|GBM|
& |GRIN| Bytecode Machine.
\\
|GFULL|
& Graph Reduction Intermediate Notation.
  When relevant the use of this term implies full program analysis.
\\
|LLVM|
& Low Level Virtual Machine
\\
|XX|
& XX XX
\\
\end{tabular}
%%]

%%[XX
%%]

%%[XX
%%]

%%[XX
%%]

%%[XX
%%]

%%[XX
%%]

%%[introduction doclatex
%%]

%%[downloadBuildCompileRun doclatex
A separate manual exists on \eref{InstallEhcUnderWindows}{how to install EHC on a Windows system}.
A list of often occurring build problems is maintained \eref{BuildProblems}{here}.

\subsubsection{Download}

\begin{itemize}
\item Prerequisites:
\begin{itemize}
 \item \href{http://haskell.org/ghc/}{GHC}: a recent version, preferably >= 6.8, the installed libraries should include the @mtl@ and @fgl@ library.
 \item \href{http://www.cs.uu.nl/wiki/HUT/WebHome}{HUT library}: the most recent version. This includes uulib (parser combinators, pretty printing) and uuagc (Attribute Grammar compiler).
\end{itemize}
\item EHC/UHC download: currently no prebuilt distributions are available, but the most recent version of the whole series of compilers can be checked out from our svn archive:
\begin{verbatim}
% svn checkout https://svn.cs.uu.nl:12443/repos/EHC/trunk/EHC
\end{verbatim}
      or downloaded as a \href{https://svn.cs.uu.nl:12443/dist/EHC/EHC-trunk-EHC.tar.bz2}{tarball}.
\end{itemize}

\subsubsection{Build}

\begin{itemize}
\item Prerequisites: GHC and HUT must be installed.
\begin{itemize}
 \item Look \eref{InstallEhcUnderWindows}{here} for setting up a cygwin environment and additional info on installing EHC under cygwin.
 \item See \tref{TS.EhcParticularities}{encountered problems} during this year's (2007) run of the seminar on \tref{TS.WebHome}{Type Systems}.
\end{itemize}
\item Building the last element of the EHC sequence, run the following commands from trunk/EHC:
\begin{verbatim}
% ./configure
% make 100/ehc                     # variant 100 will ultimately become UHC
\end{verbatim}
      Currently there is no installation via 'make install'.
\end{itemize}

\subsubsection{Run}

\begin{itemize}
\item Run the last variant. A sample session:
\begin{verbatim}
% cat > hw.hs
module HelloWorld where
main = putStrLn "Hello World"
% bin/100/ehc -Pbuild/100/ehclib/ehcbase hw.hs
Imports of Haskell             hw                     (hw.hs)
Imports of Haskell             Prelude                (build/100/ehclib/ehcbase/Prelude.hs)
Imports of Haskell             EHC.Prelude            (build/100/ehclib/ehcbase/EHC/Prelude.hs)
Reading HI                     EHC.Prelude            (build/100/ehclib/ehcbase/EHC/Prelude.hs)
Reading HI                     Prelude                (build/100/ehclib/ehcbase/Prelude.hs)
Compiling Haskell              hw                     (hw.hs)
% ./hw
Hello World
% 
\end{verbatim}
      Note that the compiler is ran from the @bin/100@ directory and the path to the library must be passed explicitly.
\end{itemize}

%%]

%%[extensions doclatex
%%]

%%[languageStatus doclatex
For now, see info on \eref{FirstRelease}{the upcoming first release} and \eref{LanguageFeatures}{language features}.

Encoding of availability:

\begin{tabular}{ll}
\textbf{Encoding} & \textbf{Meaning} \\ \hline
Y & is available \\
YN & is partially available \\
N & is not yet available \\
NN & is not and will never be available \\
\end{tabular}

%%]

%%[inHaskell98NotInEhc doclatex
Availability of features for Haskell, with file suffix @.hs@:

\begin{tabular}{ll}
\textbf{Feature} & \textbf{Available?} \\ \hline
n+k patterns & NN \\
@deriving@ construct & YN, for @Show@, @Read@, @Eq@, @Ord@, @Enum@, @Bounded@ \\ 
@default@ construct & N \\ 
@Prelude@: predefined instances & YN, not for tuples \\ 
Irrefutable patterns & YN, nested patterns too lazy \\
Strictness annotation in data types & YN, ignored \\
Literate Haskell source format & YN, only \verb@\begin{code}@ .. \verb@\end{code}@ \\
Operator infixity determines parsing & YN, some subtle report examples are not treated as defined \\
Foreign function interface & YN, enough to make @Prelude@ work \\
Exceptions & YN, depending on backend \\
\end{tabular}

Additionally, availability of features for EH (Essential Haskell), with file suffix @.eh@:

\begin{tabular}{ll}
\textbf{Feature} & \textbf{Available?} \\ \hline
Modules & NN \\
Automatic binding groups detection  & NN, one let binding means binding group \\
Literate source format & NN \\
@newtype@ declarations & N \\
\end{tabular}

%%]

%%[inHaskellPrimeNotInEhc doclatex
%%]

%%[inEhcNotIn98Prime doclatex
\begin{tabular}{ll}
\textbf{Feature} & \textbf{Available?} \\ \hline
\lref{lexically-scoped-type-variables}{Lexically scoped type variables} & Y \\
\lref{existential-types}{Existential quantification} & Y \\
\lref{partial-type-signatures}{Partial type signatures} & Y \\
Multiparameter type classes & Y \\
Functional dependencies & N \\
\lref{kind-inference}{Explicit kinding} & Y \\
\lref{kind-inference}{Polymorphic kind inference} & Y \\
Extensible records & YN \\
\end{tabular}

%%]

%%[commandlineInvocation doclatex
\label{CommandLine}
As printed by \verb=bin/100/ehc --help=:

\begin{pre}
%%@[exec:bin/100/ehc --help%%]
\end{pre}

%%]

%%[commandlineOptions doclatex
Only options for which the implementation is actively maintained are discussed.
Other options can be used but are either for internal use of can be disabled sometime.
Defaults for options are valid only for variant 100 of EHC.
Boolean options are indicated by @Bool@, where @True@ and @False@ can be indicated by one of \verb@0|1|no|yes|off|on|-|+@.

\begin{itemize}
\item \verb|-c[<format>]|, \verb|--code[=<format>]|. Generate code or other forms of output. Output \verb|<format>|s:
 \begin{itemize}
 \item \verb|bexe| (default): bytecode interpreter based executable.
 \item \verb|exe|: full program analysis C code based executable.
 \item \verb|lexe|: full program analysis LLVM code based executable. Not yet fully supported.
 \end{itemize}
 The remaining formats generate intermediate results and are intended for debugging purposes.
\item \verb|--cpp|. Preprocess with \href{http://gcc.gnu.org/onlinedocs/cpp/}{cpp}.
\item \verb|-d|, \verb|--debug|. Syntactic option sugar for \verb|--pretty=ast --verbose=2|.
\item \verb|--dump-core-stages[=Bool]|. Dump all stages of internal Core transformations.
\item \verb|--dump-grin-stages[=Bool]|. Dump all stages of internal Grin transformations.
\item \verb|-h|, \verb|--help|. Print commandline help and quit.
\item \verb|--no-prelude|. Don't assume the presence of @Prelude@.
\item \verb|--no-recomp|. Don't check for the necessity to recompile, recompile allways instead.
\item \verb|--numeric-version|. Print version and quit.
\item \verb|-O[<level>]|, \verb|--optimise[=<level>]|. Optimisation level. Currently this makes little difference. Levels:
 \begin{itemize}
 \item \verb|0|: none.
 \item \verb|1| (default): basic.
 \item \verb|2|: much
 \end{itemize}
\item \verb|-p[<format>]|, \verb|--pretty[=<format>]|. Generate pretty printed version of program. Pretty printed output is not parseable by ehc; it is an approximation of the original programtext.
 Output \verb|<format>|s:
 \begin{itemize}
 \item \verb|hs|: Haskell.
 \item \verb|eh|: EH
 \item \verb|ast|: dump EH abstract syntax tree, \verb|--verbose| adds additional computed information.
 \item \verb|-|: no pretty printing.
 \end{itemize}
\item \verb|-Ppath|, \verb|--search-path=path|. Add @path@ to the search path for modules.
\item \verb|-v[<level>]|, \verb|--verbose[=<level>]|. Verbosity level. Verbosity \verb|<level>|s are accumulative in their reported messages:
 \begin{itemize}
 \item \verb|0|: quiet.
 \item \verb|1| (default): progress of main compile phases and modules.
 \item \verb|2|: progress of internal processing.
 \item \verb|3|: additional debugging info.
 \end{itemize}
\end{itemize}
%%]

%%[andFurther doclatex
See also
\begin{itemize}
\item \eref{HowToExperimentWithEHC}{How to experiment} with EHC.
\item \eref{EhcStructureDocumentation}{Structure} of EHC.
\item \eref{EhcTechnicalDocumentation}{Internal (technical) documention} of EHC.
\item \eref{Shuffle}{Shuffle} for manipulating source chunks.
\item \eref{Text2TextDocumentation}{Text2Text} for documentation formatting.
\item \href{http://haskell.org/ghc/}{GHC}.
\item \href{http://www.cs.uu.nl/wiki/HUT/WebHome}{HUT library}.
\end{itemize}
%%]

