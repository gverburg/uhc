###########################################################################################
# Shared makefile stuff
###########################################################################################

.SUFFIXES:
.SUFFIXES: .pdf .tex .bib .html .lhs .sty .lag .cag .chs

###########################################################################################
# EHC variants.
# 90-99 are reserved for very Haskell specific functionality (like deriving)
# 100-101 are used (temporary hopefully) for debugging performance problems
###########################################################################################

# 1 : explicitly typed lambda calculus
# 2 : + type inference (implicit typing)
# 3 : + polymorphism
# 4 : + quantifiers everywhere, existentials
# 5 : + datatypes
# 6 : + kinds (+inference)
# 7 : + fixed size records
# 8 : + code gen
# 9 : + CHR, class system, local instances
# 10: + (extensible) records (lack predicates)
# 11: + type synonyms
# 12: + explicit passing of implicit parameters (partially done)
# 13: + higher order predicates (dict trafo's) (partially done)
# 14: + existentially quantified class predicates (TBD)
# 15: + functional dependencies (TBD)
# 16: + GADT (TBD)
# 20: + module system
# 95: + deriving construct
# 96: + exception handling
# 97: + numbers: Integer, Float, Double
# 98: + IO
# 99: + the rest to make uhc
# 100: - unnecessary stuff (experimental)
# 101: - remove of necessary stuff to play with AG dependencies, mem usage

# 50: + GADT experiment
# 4_2: + 2 pass type inference, quantifier propagation experiment

###########################################################################################
# EHC variant partitioning into public/non-public (experimental, ...) + code/noncode variants
###########################################################################################

EHC_UHC_VARIANT							:= 99
EHC_PUB_NOCODE_VARIANTS					:= 1 2 3 4 5 6 7
EHC_PUB_CODE_VARIANTS					:= 8 9 10 11 12 13 14 15 16 20 95 96 97 98 100 101
EHC_PUB_VARIANTS						:= $(EHC_PUB_NOCODE_VARIANTS) $(EHC_PUB_CODE_VARIANTS)
EHC_OTHER_NOCODE_VARIANTS				:= 4_2 6_4 7_2
EHC_OTHER_CODE_VARIANTS					:= 50 $(EHC_UHC_VARIANT)
EHC_OTHER_VARIANTS						:= $(EHC_OTHER_NOCODE_VARIANTS) $(EHC_OTHER_CODE_VARIANTS)
EHC_CODE_VARIANTS						:= $(EHC_PUB_CODE_VARIANTS) $(EHC_OTHER_CODE_VARIANTS)
EHC_VARIANTS							:= $(EHC_PUB_VARIANTS) $(EHC_OTHER_VARIANTS)

GRIN_PUB_VARIANTS						:= $(EHC_PUB_CODE_VARIANTS)
GRIN_VARIANTS							:= $(GRIN_PUB_VARIANTS) $(EHC_UHC_VARIANT)

TEST_VARIANTS							:= $(EHC_PUB_NOCODE_VARIANTS) 8 9 10 11

###########################################################################################
# Locations in source, build and install
###########################################################################################

# location for binaries
BIN_PREFIX			:= $(TOP_PREFIX)bin/
BINABS_PREFIX		:= $(TOPABS_PREFIX)bin/

# location for haddock
HDOC_PREFIX			:= $(TOP_PREFIX)hdoc/
HDOCABS_PREFIX		:= $(TOPABS_PREFIX)hdoc/

# location for libraries
LIB_PREFIX			:= $(TOP_PREFIX)lib/

# location for cabal installed stuff (mainly libraries), and other inplace installs
INS_PREFIX			:= $(TOP_PREFIX)@INPLACE_INSTALL_DIR@/
INSABS_PREFIX		:= $(TOPABS_PREFIX)@INPLACE_INSTALL_DIR@/
INSABS_FLAG_PREFIX	:= $(INSABS_PREFIX)ins-flg-
INSABS_LIB_PREFIX	:= $(INSABS_PREFIX)lib/
INSABS_INC_PREFIX	:= $(INSABS_PREFIX)include/

# location for building
BLD_PREFIX			:= $(TOP_PREFIX)build/
BLDABS_PREFIX		:= $(TOPABS_PREFIX)build/
BLD_BIN_PREFIX		:= $(BLD_PREFIX)bin/
BLD_LIBUTIL_PREFIX	:= $(BLD_PREFIX)libutil/

# location for doc (end products)
DOC_PREFIX			:= $(TOP_PREFIX)doc/

###########################################################################################
# Commands
###########################################################################################

# compilers and tools used
AGC					:= @UUAGC_CMD@
GHC					:= @GHC_CMD@
GHC_VERSION         := @GHC_VERSION@
GCC					:= @GCC_CMD@
AR					:= @AR_CMD@
RANLIB				:= @RANLIB_CMD@
OPEN_FOR_EDIT		:= bbedit
STRIP				:= $(STRIP_CMD)
FILTER_NONEMP_FILES	:= $(BINABS_PREFIX)filterOutEmptyFiles

# lhs2TeX
LHS2TEX_ENV			:= $(LHS2TEX)
LHS2TEX_CMD			:= LHS2TEX=".$(PATHS_SEP)../../$(FMT_SRC_PREFIX)$(PATHS_SEP)$(LHS2TEX_ENV)" lhs2TeX

# latex
LATEX_ENV			:= $(TEXINPUTS)
PDFLATEX			:= TEXINPUTS=".$(PATHS_SEP_COL)../../$(LATEX_SRC_PREFIX)$(PATHS_SEP_COL)$(LATEX_EHC_SUBDIRS)$(LATEX_ENV)" pdflatex
BIBTEX				:= BSTINPUTS=".$(PATHS_SEP_COL)../../$(LATEX_SRC_PREFIX)$(PATHS_SEP_COL)$(LATEX_ENV)" BIBINPUTS=".$(PATHS_SEP_COL)../../$(LATEX_SRC_PREFIX)$(LATEX_ENV)" bibtex
MAKEINDEX			:= makeindex

###########################################################################################
# Options to commands
###########################################################################################

# GHC options
GHC_EHC_PKG_UULIB	:= uulib
GHC_OPTS			:= -fglasgow-exts $(OPT_GHC_STANDARD_PACKAGES) -package $(GHC_EHC_PKG_UULIB)
GHC_OPTS_OPTIM		:= -O2
GHC_OPTS_WHEN_EHC	:= @GHC_EHC_OPTIONS@

# UUAGC options
UUAGC_OPTS_WHEN_EHC				:= @UUAGC_OPTIONS@
UUAGC_OPTS_WHEN_EHC_AST_DATA	:= @UUAGC_EHC_AST_OPTIONS@
UUAGC_OPTS_WHEN_EHC_AST_SEM		:= @UUAGC_EHC_SEM_OPTIONS@

# UUAGC options for production version (i.e. uhc, ehc variant >=99)
UUAGC_OPTS_WHEN_UHC				:=
UUAGC_OPTS_WHEN_UHC_AST_DATA	:= --strictdata
UUAGC_OPTS_WHEN_UHC_AST_SEM		:= --Wignore --strictwrap -O

# GCC options
GCC_OPTS_WHEN_EHC	:= @GCC_EHC_OPTIONS@

# cabal options
CABAL_CONFIGURE_OPTS_WHEN_EHC	:= @CABAL_CONFIGURE_OPTIONS@
CABAL_SETUP_OPTS	:= --ghc --with-compiler=$(GHC) $(CABAL_CONFIGURE_OPTS_WHEN_EHC)
CABAL_OPT_ALLOW_UNDECIDABLE_INSTANCES := @CABAL_OPT_ALLOW_UNDECIDABLE_INSTANCES@

# C compiler options, some are also extended by sub makefiles
EHC_GCC_CC_OPTS			:= -I$(INSABS_INC_PREFIX) $(GCC_OPTS_WHEN_EHC)
EHC_GCC_LD_OPTS			:= -L$(INSABS_LIB_PREFIX)
RTS_GCC_CC_OPTS_OPTIM	:= -O3

# library building, using libtool
LIBTOOL_STATIC		:= @LIBTOOL_STATIC_CMD@
LIBTOOL_DYNAMIC		:= @LIBTOOL_DYNAMIC_CMD@

# lhs2tex options
LHS2TEX_OPTS_DFLT	:= 
LHS2TEX_OPTS_POLY	:= $(LHS2TEX_OPTS_DFLT) --poly
LHS2TEX_OPTS_NEWC	:= $(LHS2TEX_OPTS_DFLT) --newcode

# ruler2 options
RULER2_OPTS_DFLT	:= $(RULER2_OPTS_VERSION)
RULER2_OPTS			:= $(RULER2_OPTS_DFLT)

###########################################################################################
# Shuffle order for EHC variants
###########################################################################################

# order to shuffle (see ehc/src/files1.mk for a complete list)
# 4_99: interim for stuff from 4, needed for 4_2, because of ruler generated material uptil 4_2
EHC_SHUFFLE_ORDER	:= 1 < 2 < 3 < 4 < 4_99 < 5 < 6 < 7 < 8 < 9 < 10 < 11 < 12 < 13 < 14 < 15 < 16 < 20 < 95 < 96 < 97 < 98 < $(EHC_UHC_VARIANT) < 100 < 101, 4_99 < 4_2, 6 < 6_4, 7 < 7_2, 10 < 50

###########################################################################################
# Misc
###########################################################################################

# target suffix for core
CORE_TARG_SUFFIX	:= grin2

# subst's
SUBST_BAR_IN_TT		:= sed -e '/begin{TT[^}]*}/,/end{TT[^}]*}/s/|/||/g'
SUBST_EHC			:= perl $(BIN_PREFIX)substehc.pl
SUBST_LINE_CMT		:= sed -e 's/{-\# LINE[^\#]*\#-}//' -e '/{-\#  \#-}/d'
SUBST_SH			:= perl $(BIN_PREFIX)substsh.pl

# indentation of (test) output
INDENT2				:= sed -e 's/^/  /'
INDENT4				:= sed -e 's/^/    /'

# make programming utils
head				= $(word 1,$(1))
tail				= $(wordlist 2,$(words $(1)),$(1))
comma				:= ,
empty				:=
space				:= $(empty) $(empty)

# generate cabal file
# $1: pkg name
# $2: version
# $3: build-depends (additional)
# $4: extensions (additional)
# $5: synopsis
# $6: exposed modules
GEN_CABAL			= \
					( \
					echo   "Name:				$(strip $(1))" ; \
					echo   "Version:			$(strip $(2))" ; \
					echo   "License:			PublicDomain" ; \
					echo   "Author:				Atze Dijkstra" ; \
					echo   "Homepage:			http://www.cs.uu.nl/wiki/Ehc/WebHome" ; \
					echo   "Category:			Testing" ; \
					echo   "Build-Depends:		$(subst $(space),$(comma),$(strip base haskell98 mtl fgl $(GHC_EHC_PKG_UULIB) $(3)))" ; \
					echo   "Extensions:			$(subst $(space),$(comma),$(strip RankNTypes MultiParamTypeClasses FunctionalDependencies $(4)))" ; \
					echo   "Synopsis:			$(strip $(5))" ; \
					echo   "Exposed-Modules:	$(subst $(space),$(comma),$(strip $(6)))" ; \
					echo   "C-Sources:			$(subst $(space),$(comma),$(strip $(7)))" ; \
					echo   "Ghc-Options:		$(GHC_OPTS_WHEN_EHC)" \
					)

# generate simplest cabal Setup.hs
GEN_CABAL_SETUP		= @(echo "import Distribution.Simple" ; echo "main = defaultMain")

# compile cabal setup
# $1: src
# $2: exec
GHC_CABAL			= $(GHC) -package Cabal -o $(2) $(1)  ; $(STRIP_CMD) $(2)

# subst _ by x
# $1: text
SUBS_US_X			= $(subst _,x,$(1))

# make a static library
# $1: library
# $2: files
ifeq ($(LIBTOOL_STATIC),no)
LIB_MK_STATIC		= $(AR) r $(1) $(2) ; $(RANLIB) $(1)
else
LIB_MK_STATIC		= $(LIBTOOL_STATIC) $(1) $(2)
endif
