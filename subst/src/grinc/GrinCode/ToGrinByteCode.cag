%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Haskell importable interface to Grin's byte code gen
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[8 hs module {%{GRIN}GrinCode.ToGrinByteCode}
%%]

%%[8 hs import(Data.Maybe,Data.List,EH.Util.Pretty,qualified EH.Util.FastSeq as Seq,EH.Util.Utils,qualified Data.Set as Set,qualified Data.Map as Map)
%%]

%%[8 hs import({%{EH}Base.Common},{%{EH}Base.Opts},{%{EH}Base.Builtin})
%%]

%%[8 hs import({%{EH}Error})
%%]

%%[8 hs import({%{EH}GrinCode.Pretty},qualified {%{GRIN}GrinByteCode} as GB,{%{EH}Core},{%{EH}GrinCode},{%{GRIN}BuiltinPrims})
%%]

%%[8 hs export(grinMod2ByteCodeMod)
%%]

%%[20 hs import({%{EH}Ty(tyRowCanonOrder)})
%%]

%%[8 import({GrinCode/TrfLocal/CommonFreeVar})
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Haskell itf
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[8.grinMod2ByteCodeMod hs
grinMod2ByteCodeMod :: EHCOpts -> GrModule -> (GB.Module,[Err])
grinMod2ByteCodeMod opts gmod
  =  let  t = wrap_GrAGItf  (sem_GrAGItf (GrAGItf_AGItf gmod))
                            (Inh_GrAGItf
                               {opts_Inh_GrAGItf = opts
                               })
     in   (gbMod_Syn_GrAGItf t, errs_Syn_GrAGItf t)
%%]

%%[20 -8.grinMod2ByteCodeMod hs
grinMod2ByteCodeMod :: EHCOpts -> [HsName] -> HsName2OffsetMpMp -> HsName2OffsetMp -> GrModule -> (GB.Module,[Err])
grinMod2ByteCodeMod opts allImpNmL impNmOffMpMp expNmOffMp gmod
  =  let  t = wrap_GrAGItf  (sem_GrAGItf (GrAGItf_AGItf gmod))
                            (Inh_GrAGItf
                               { expNmOffMp_Inh_GrAGItf = expNmOffMp
                               , impNmOffMpMp_Inh_GrAGItf = impNmOffMpMp
                               , allImpNmL_Inh_GrAGItf = allImpNmL
                               , opts_Inh_GrAGItf = opts
                               })
     in   (gbMod_Syn_GrAGItf t, errs_Syn_GrAGItf t)
%%]

%%[8 import({GrinCode/AbsSyn})
WRAPPER GrAGItf
%%]

There is a cyclic dependency:

*** UU.AG warning  ***
problem  : Direct circular dependency pattern for inherited attribute
            stkDepth and synthesized attribute i of nonterminal GrAltL
pattern  : see help
help     : The following attributes formed the cycle:
           GrExpr.Case, inherited attribute altL.stkDepth ("build/8/lib-grinc/GRIN8/GrinCode/ToGrinByteCode.ag"(line 158, column 33))
           GrAltL.Cons, inherited attribute lhs.stkDepth
           GrAltL.Cons, inherited attribute hd.stkDepth ("build/8/lib-grinc/GRIN8/GrinCode/ToGrinByteCode.ag"(line 147, column 20))
           GrAlt.Alt, inherited attribute lhs.stkDepth
           GrAlt.Alt, local attribute stkDepth ("build/8/lib-grinc/GRIN8/GrinCode/ToGrinByteCode.ag"(line 166, column 33))
           GrAlt.Alt, inherited attribute expr.stkDepth ("build/8/lib-grinc/GRIN8/GrinCode/ToGrinByteCode.ag"(line 147, column 20))
           GrExpr.App, inherited attribute lhs.stkDepth
           GrExpr.App, local attribute retIns ("build/8/lib-grinc/GRIN8/GrinCode/ToGrinByteCode.ag"(line 442, column 33))
           GrExpr.App, synthesized attribute lhs.i ("build/8/lib-grinc/GRIN8/GrinCode/ToGrinByteCode.ag"(line 483, column 33))
           GrAlt.Alt, synthesized attribute expr.i
           GrAlt.Alt, synthesized attribute lhs.i ("build/8/lib-grinc/GRIN8/GrinCode/ToGrinByteCode.ag"(line 487, column 33))
           GrAltL.Cons, synthesized attribute hd.i
           GrAltL.Cons, synthesized attribute lhs.i ("build/8/lib-grinc/GRIN8/GrinCode/ToGrinByteCode.ag"(line 476, column 30))
           GrExpr.Case, synthesized attribute altL.i
           GrExpr.Case, local attribute scrutineeStkInc ("build/8/lib-grinc/GRIN8/GrinCode/ToGrinByteCode.ag"(line 380, column 61))
           GrExpr.Case, inherited attribute altL.stkDepth ("build/8/lib-grinc/GRIN8/GrinCode/ToGrinByteCode.ag"(line 158, column 33))

but tearing apart the culprit definition hides the connection between these:

  | Case        loc         .   (valIns,valStkInc,retIsDone,scrutineeStkInc)

perhaps later...

%%[8
PRAGMA nocycle
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Global info
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[8
ATTR AllBind AllGrExpr GrModule GrAGItf [ opts: EHCOpts | | ]
%%]

%%[8
ATTR AllNTNoMod [ modNmConstInx: Int | | ]
%%]

%%[20
ATTR GrAGItf GrModule [ expNmOffMp: HsName2OffsetMp  allImpNmL: {[HsName]} | | ]
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Module name map to field nr in node with imported modules
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[20
ATTR GrAGItf GrModule AllBind AllGrExpr [ impNmOffMpMp: HsName2OffsetMpMp | | ]
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Constants
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[8 hs
type ConstMp = Map.Map GB.Const Int
%%]

%%[8
ATTR AllNTNoMod [ | constMp: ConstMp | ]

SEM GrModule
  | Mod         loc         .   moduleNmAlpha   =   hsnShowAlphanumeric @moduleNm
                (loc.modNmConstInx,globalL.strMp,globalL.constMp)
                                                =   constStrAdd @moduleNmAlpha Map.empty Map.empty
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Strings
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[8 hs
type StrMp = Map.Map String GB.Const

strAdd :: String -> StrMp -> (GB.Const,StrMp)
strAdd str strMp 
  = case Map.lookup str strMp of
      Just c -> (c,strMp)
      _      -> (c,Map.insert str c strMp)
             where c        = GB.Const_Str $ Map.size strMp

constStrAdd :: String -> StrMp -> ConstMp -> (Int,StrMp,ConstMp)
constStrAdd str strMp constMp
  = case Map.lookup str strMp of
      Just c | isJust mbCnst
        -> (fromJust mbCnst,strMp,constMp)
        where mbCnst = Map.lookup c constMp
      _ -> (constInx,strMp',Map.insert c constInx constMp)
        where constInx = Map.size constMp
              (c,strMp') = strAdd str strMp

constAdd :: GB.Const -> ConstMp -> (Int,ConstMp)
constAdd c constMp
  = case Map.lookup c constMp of
      Just i -> (i,constMp)
      _      -> (constInx,Map.insert c constInx constMp)
             where constInx = Map.size constMp

constCFunAdd :: String -> ConstMp -> (Int,ConstMp)
constCFunAdd nm = constAdd (GB.Const_CFunction nm)
%%]

%%[20 hs
constImpNodeAdd :: ConstMp -> (Int,ConstMp)
constImpNodeAdd = constAdd GB.Const_ImpNode
%%]

%%[8
ATTR AllNTNoMod [ | strMp: StrMp | ]

SEM GrVal
  | LitStr      (loc.constInx,lhs.strMp,lhs.constMp)
                                                =   constStrAdd @str @lhs.strMp @lhs.constMp

SEM GrBind
  | Bind		(loc.strConst,expr.strMp)		=	strAdd (show @nm) @lhs.strMp

SEM GrExpr
  | FFI         (loc.constInx,lhs.constMp)      =   constCFunAdd @nm @lhs.constMp
                (loc.strConst,lhs.strMp)        =   strAdd @nm @lhs.strMp
  | Eval        (loc.strConst,lhs.strMp)        =   strAdd (show hsnEval) @lhs.strMp
  | Call        (loc.strConst,argL.strMp)       =   strAdd (show @nm) @lhs.strMp
  | App         (loc.strConst,argL.strMp)       =   strAdd (show hsnApply) @lhs.strMp
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Debug info
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[8
SEM GrExpr
  | FFI Call Eval App
  				loc			.	mbDebugStrInx	=	if ehcOptGenDebug @lhs.opts then Just (GB.constInx @strConst) else Nothing
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Labels
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[8
ATTR AllGrExpr AllBind [ | labelId: {GB.LabelId} | ]

SEM GrModule
  | Mod         loc         .   labelId         =   0

SEM GrAlt
  | Alt         (expr.labelId,loc.altLabel)     =   GB.newLabelId @lhs.labelId

SEM GrExpr
  | Case        (loc.labelId2,loc.aftCaseLabel) =   GB.newLabelId @lhs.labelId
                (altL.labelId,loc.at1stOffLabel)=   GB.newLabelId @labelId2
  | * - Case Catch Seq
                (lhs.labelId,loc.retLocLabel)   =   mkRetLabel @lhs.returnCtxt @lhs.labelId
%%]

%%[8
ATTR AllAlt [ | | altLocRefs USE {++} {[]}: {[GB.LocRef]} ]

SEM GrAlt
  | Alt         loc         .   altLocRef       =   GB.LocRef_Label @altLabel
                loc         .   altLocRefs      =   [@altLocRef]

SEM GrExpr
  | Case        loc         .   aftCaseLocRef   =   GB.LocRef_Label @aftCaseLabel
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Case labels
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[8
SEM GrExpr
  | Case        loc         .   nrOfAlts        =   length @altL.altLocRefs
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Determine how names introduced by case alt are used: often only 1; then a different fetch can be done
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[8 hs
data AltFetch
  = AltFetch_Many   [HsName]                -- introduced names
  | AltFetch_One    HsName Int              -- name, field offset in node (excluding header)
  | AltFetch_Zero
  deriving Eq
%%]

%%[8
SEM GrAlt
  | Alt         loc         .   altFetch        =   case [ x | x@(n,o) <- zip @pat.introNmL [0..], n `Map.member` @expr.gathFviMp ] of
                                                      []      -> AltFetch_Zero
                                                      [(n,o)] -> AltFetch_One n o
                                                      _       -> AltFetch_Many @pat.introNmL
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Stack depth simulation
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[8
ATTR AllGrExpr [ | stkDepth: {GB.StackDepth} | ]

SEM GrBind
  | Bind        loc         .   stkDepth        =   0

SEM GrExpr
  | Unit Store Call Eval App FFI FetchUpdate
                loc         .   valDepth        =   @lhs.stkDepth + @valStkInc
  | Unit Store Call Eval App FFI FetchUpdate Case
                lhs         .   stkDepth        =   @valDepth
  | Seq         body        .   stkDepth        =   @expr.stkDepth + @seqStkInc
  | Case        altL        .   stkDepth        =   @lhs.stkDepth + @scrutineeStkInc
                loc         .   valDepth        =   @altL.stkDepth

SEM GrAlt
  | Alt         loc         .   fetchDepth      =   case @altFetch of
                                                      AltFetch_Many ns   -> length ns - 1
                                                      AltFetch_One  _ _  -> 1
                                                      AltFetch_Zero      -> 0
                            .   stkDepth        =   @lhs.stkDepth + @fetchDepth
                lhs         .   stkDepth        =   case @lhs.returnCtxt of
                                                      ReturnCtxt_CaseFallThrough
                                                        -> @expr.stkDepth           -- scrutinee remains on stack
                                                      _ -> @lhs.stkDepth            -- scrutinee is replaced with value of same size

%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Tail call info
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[8 hs
data ReturnCtxt
  = ReturnCtxt_Returns      Int                         -- return from function (nr of arguments)
  | ReturnCtxt_Continues                                -- don't return, leave result on stack
  | ReturnCtxt_CaseReturns  GB.LabelId GB.StackDepth    -- return from case alt (return destination, return stack depth)
  | ReturnCtxt_CaseFallThrough                          -- return from case with only 1 alt, so don't clean up stack
%%]

%%[8
ATTR AllGrExpr [ returnCtxt: ReturnCtxt | | ]

SEM GrBind
  | Bind        expr        .   returnCtxt      =   ReturnCtxt_Returns (length @argNmL)

SEM GrExpr
  | Seq         expr        .   returnCtxt      =   ReturnCtxt_Continues
  | Case        altL        .   returnCtxt      =   case @lhs.returnCtxt of
                                                      ReturnCtxt_Continues
                                                        | @altL.nrAlts == 1 -> ReturnCtxt_CaseFallThrough
                                                        | otherwise         -> ReturnCtxt_CaseReturns @aftCaseLabel @lhs.stkDepth
                                                      _                     -> @lhs.returnCtxt
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Alt info
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[8
ATTR GrAltL [ | | nrAlts: Int ]

SEM GrAltL
  | Cons        lhs         .   nrAlts          =   1 + @tl.nrAlts
  | Nil         lhs         .   nrAlts          =   0
%%]

%%[8
ATTR AllAlt [ | | isEnum USE {&&} {True}: Bool ]

SEM GrAlt
  | Alt         lhs         .   isEnum          =   @altFetch == AltFetch_Zero
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Named value introduction
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[8 import({GrinCode/TrfLocal/CommonIntroName})
%%]

%%[8 hs
data NmIntro
  = NmIntro_Single    HsName
  | NmIntro_Grp       GrTag [HsName]
  | NmIntro_None
%%]

%%[8
ATTR GrPatAlt GrPatLam [ | | nmIntro: NmIntro ]

SEM GrPatAlt
  | Node        lhs         .   nmIntro         =   NmIntro_Grp @tag.self @fldL
  | * - Node
                lhs         .   nmIntro         =   NmIntro_None

SEM GrPatLam
  | Var         lhs         .   nmIntro         =   NmIntro_Single @nm
  | VarNode     lhs         .   nmIntro         =   NmIntro_Grp (error "VarNode-grpHead") (tail @fldL.introNmL)
  | * - Var VarNode
                lhs         .   nmIntro         =   NmIntro_None
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Named value access
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[8 hs
patNmL2DepL :: [HsName] -> AssocL HsName Int
patNmL2DepL nmL = zip (reverse nmL) [0..]

patNmL2DepL2 :: [HsName] -> AssocL HsName Int
patNmL2DepL2 nmL = zip nmL [0, -1 ..]

patNmL2VAGam' :: GB.StackDepth -> AssocL HsName Int -> GB.ValAccessGam
patNmL2VAGam' dep nmDepL = Map.fromList [ (n,GB.Val_LocalOffset (dep+d)) | (n,d) <- nmDepL ]

patNmL2VAGam :: GB.StackDepth -> [HsName] -> GB.ValAccessGam
patNmL2VAGam dep nmL = patNmL2VAGam' dep $ patNmL2DepL nmL
%%]

%%[8
ATTR AllGrExpr AllBind [ vaGam: {GB.ValAccessGam} | | ]

SEM GrModule
  | Mod         loc         .   vaGam           =   Map.fromList $ map (\(n,o) -> (n,GB.Val_GlobEntry $ GB.eiEntryNr o)) $ Map.toList @entryNmMp

SEM GrExpr
  | Seq         body        .   vaGam           =   @newVaGam `Map.union` @lhs.vaGam

SEM GrBind
  | Bind        loc         .   newVaGam        =   Map.fromList [ (n,GB.Val_LocalOffset (@stkDepth-o)) | (n,o) <- zip @argNmL [GB.nrCallRetWords ..] ]
                expr        .   vaGam           =   @newVaGam `Map.union` @lhs.vaGam

SEM GrAlt
  | Alt         loc         .   newVaGam        =   case @altFetch of
                                                      AltFetch_Many ns  -> patNmL2VAGam' @stkDepth $ patNmL2DepL2 ns
                                                      AltFetch_One  n _ -> patNmL2VAGam' @stkDepth $ patNmL2DepL2 [n]
                                                      _                 -> Map.empty
                expr        .   vaGam           =   @newVaGam `Map.union` @lhs.vaGam
%%]

%%[8
SEM GrExpr
  | *           loc         .   nmEnv           =   GB.NmEnv
                                                      { GB.neVAGam = @lhs.vaGam
%%[[20
                                                      , GB.neImpNmMp = @lhs.impNmOffMpMp
%%]]
                                                      }

SEM GrBind
  | Bind        loc         .   nmEnv           =   GB.NmEnv
                                                      { GB.neVAGam = @lhs.vaGam
%%[[20
                                                      , GB.neImpNmMp = @lhs.impNmOffMpMp
%%]]
                                                      }

SEM GrModule
  | Mod         loc         .   nmEnv           =   GB.NmEnv
                                                      { GB.neVAGam = @vaGam
%%[[20
                                                      , GB.neImpNmMp = @lhs.impNmOffMpMp
%%]]
                                                      }
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Extra check whether all used names are defined
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[8
ATTR GrAGItf GrModule [ | | errs: {[Err]} ]

SEM GrModule
  | Mod         loc         .   errs            =   let undefNms = (Map.keysSet @bindL.gathFviMp `Set.difference` Map.keysSet @vaGam)
%%[[20
                                                                     `Set.difference` offMpMpKeysSet @lhs.impNmOffMpMp
%%]]
                                                    in  if Set.null undefNms
                                                        then []
                                                        else [rngLift emptyRange mkErr_NamesNotIntrod "(Internal) GRIN ByteCode location" $ Set.toList undefNms]
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% GrVal Value introduction
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[8
ATTR GrVal [ | | grvalIntro: {GB.GrValIntro} ]
ATTR GrValL [ | | grvalIntroL: {[GB.GrValIntro]} ]

SEM GrVal
  | Var         lhs         .   grvalIntro      =   GB.GrValIntro_Nm @nm
  | LitInt      lhs         .   grvalIntro      =   GB.GrValIntro_Int (toInteger @int)
  | LitStr      lhs         .   grvalIntro      =   GB.GrValIntro_Str @str (GB.linkConst @constInx)
  | Node        lhs         .   grvalIntro      =   GB.GrValIntro_Grp @tag.self @fldL.grvalIntroL
  | * - Var LitStr Node LitInt
                lhs         .   grvalIntro      =   GB.GrValIntro_None

SEM GrValL
  | Nil         lhs         .   grvalIntroL     =   []
  | Cons        lhs         .   grvalIntroL     =   @hd.grvalIntro : @tl.grvalIntroL
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Delayed unit gval
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[8 hs
data UnitIntro
  = UnitIntro   GB.GrValIntro
%%]

%%[8
ATTR GrExpr [ isSeqArgCtxt: Bool | | ]

SEM GrBind
  | Bind        expr        .   isSeqArgCtxt    =   False

SEM GrAlt
  | Alt         expr        .   isSeqArgCtxt    =   False

SEM GrExpr
  | Seq         expr        .   isSeqArgCtxt    =   True
  | * - Seq     loc         .   isSeqArgCtxt    =   False
%%]

%%[8
ATTR GrExpr [ | | mbUnitIntro: {Maybe UnitIntro} ]

SEM GrExpr
  | * - Unit    lhs         .   mbUnitIntro     =   Nothing
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Expr Value introduction
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[8 hs
data EValIntro
  = EValIntro_TOS_One   { eviDepth :: GB.StackDepth }
  | EValIntro_TOS_Grp   { eviDepth :: GB.StackDepth, eviSize :: Int }
  | EValIntro_None

%%]

%%[8
ATTR GrExpr [ | | evalIntro: EValIntro ]

SEM GrExpr
  | Unit Store Call Eval App Case FFI
                lhs         .   evalIntro       =   EValIntro_TOS_One @valDepth
  | * - Unit Store Call Eval App Case Seq FFI
                lhs         .   evalIntro       =   EValIntro_None
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% FFI primitives
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[8
SEM GrExpr
  | FFI         loc         .   mbGbPrim        =   lookupPrim BackendGrinByteCode @nm
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Expr Value codegen
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[8
SEM GrExpr
  | Unit        loc         .   (valIns,valStkInc,retIsDone,mbUnitIntro)
                                                =   case GB.gviLd (GB.defaultOptimCtxt {GB.ocxOmitTOSLd = ehcOptOptimise @lhs.opts >= OptimiseNormal}) @nmEnv @lhs.modNmConstInx @lhs.stkDepth @val.grvalIntro of
                                                      GB.GrValIntroAlt_OnTOS ins inc _ | not @lhs.isSeqArgCtxt
                                                        -> (ins,inc,False,Nothing)
                                                      _ -> (Seq.empty,0,True,Just (UnitIntro @val.grvalIntro))
  | Store       loc         .   (valIns,valStkInc,retIsDone)
                                                =   case GB.gviLd GB.defaultOptimCtxt @nmEnv @lhs.modNmConstInx @lhs.stkDepth @val.grvalIntro of
                                                      GB.GrValIntroAlt_OnTOS ins inc _
                                                        -> (ins, inc, False)
  | Call        loc         .   (valIns,valStkInc,retIsDone)
                                                =   case GB.gviLdFold GB.defaultOptimCtxt @nmEnv @lhs.modNmConstInx @lhs.stkDepth @argL.grvalIntroL of
                                                      GB.GrValIntroAlt_OnTOS ins inc _
                                                        -> case @lhs.returnCtxt of
                                                             ReturnCtxt_Returns nrArgsOuter
                                                               -> (ins Seq.:++: fins Seq.:++: Seq.fromList [GB.tailcall GB.InsOp_LocB_TOS nArgMine nrArgsOuter {- retOffSurr -}], 0, True)
                                                               where (fins,fdep) = GB.nmLd GB.defaultOptimCtxt @nmEnv @lhs.modNmConstInx (@lhs.stkDepth + inc) @nm
                                                                     nArgMine    = length @argL.grvalIntroL
                                                                     -- retOffSurr  = @lhs.stkDepth + inc + fdep
                                                             _ -> (ins', inc', False)
                                                               where (ins',inc') = GB.gvCall @mbDebugStrInx @nmEnv @lhs.modNmConstInx ins inc @lhs.stkDepth @nm
  | FFI         loc         .   (valIns,valStkInc,retIsDone)
                                                =   case @mbGbPrim of
                                                      Just gbPrim | gbprimNrArgs gbPrim == length @argL && ehcOptOptimise @lhs.opts >= OptimiseNormal
                                                        -> case gbprimMk gbPrim GB.defaultOptimCtxt @nmEnv @lhs.modNmConstInx @lhs.stkDepth $ map GB.GrValIntro_Nm $ @argL of
                                                             GB.GrValIntroAlt_OnTOS ins inc _
                                                               -> (ins, inc, False)
                                                             _ -> panic ("ToGrinByteCode.mbGbPrim:" ++ show @nm)
                                                      _ -> case GB.gviLdFold GB.defaultOptimCtxt @nmEnv @lhs.modNmConstInx @lhs.stkDepth $ map GB.GrValIntro_Nm $ @argL of
                                                             GB.GrValIntroAlt_OnTOS ins inc _
                                                               -> (ins Seq.:++: fins Seq.:++: Seq.fromList [GB.callc @mbDebugStrInx inc], 1, False)
                                                               where fins = Seq.fromList [GB.ldg GB.InsOp_LocB_TOS $ GB.linkConst @constInx]
  | FetchUpdate loc         .   (valIns,valStkInc,retIsDone)
                                                =   case GB.gviLdFold GB.defaultOptimCtxt @nmEnv @lhs.modNmConstInx @lhs.stkDepth $ map GB.GrValIntro_Nm $ [@src,@dst] of
                                                      GB.GrValIntroAlt_OnTOS ins inc _
                                                        -> (ins Seq.:++: Seq.fromList [GB.fetchupdate], 0, False)
  | Eval        loc         .   (valIns,valStkInc,retIsDone)
                                                =   let (ins,inc) = GB.nmLd (GB.defaultOptimCtxt {GB.ocxOmitTOSLd = ehcOptOptimise @lhs.opts >= OptimiseNormal}) @nmEnv @lhs.modNmConstInx @lhs.stkDepth @nm
                                                    in  case @lhs.returnCtxt of
                                                          ReturnCtxt_Returns nrArgsOuter
                                                            -> (ins Seq.:++: eins, 0, True)
                                                            where eins       = Seq.fromList [GB.taileval GB.InsOp_LocB_TOS nrArgsOuter {- retOffSurr -}]
                                                                  -- retOffSurr = @lhs.stkDepth + inc
                                                          _ -> (ins Seq.:++: eins, inc, False)
                                                            where eins = Seq.fromList [GB.eval @mbDebugStrInx GB.InsOp_LocB_TOS]
  | App         loc         .   (valIns,valStkInc,retIsDone)
                                                =   case GB.gviLdFold GB.defaultOptimCtxt @nmEnv @lhs.modNmConstInx @lhs.stkDepth @argL.grvalIntroL of
                                                      GB.GrValIntroAlt_OnTOS ins inc _
                                                        -> (ins Seq.:++: Seq.fromList [GB.ldc (length @argL.grvalIntroL)] Seq.:++: fins Seq.:++: Seq.fromList [GB.apply @mbDebugStrInx GB.InsOp_LocB_TOS], 1, False)
                                                        where (fins,_) = GB.nmLd GB.defaultOptimCtxt @nmEnv @lhs.modNmConstInx (@lhs.stkDepth + inc + 1) @nm
  | Case        loc         .   (valIns,valStkInc,retIsDone,scrutineeStkInc)
                                                =   case GB.gviLd GB.defaultOptimCtxt @nmEnv @lhs.modNmConstInx @lhs.stkDepth @val.grvalIntro of
                                                      GB.GrValIntroAlt_OnTOS ins inc _
                                                        | @altL.nrAlts == 1
                                                          -> (ins Seq.:++: @altL.i,1,True,inc)
                                                        | otherwise
                                                          -> (ins Seq.:++: insc Seq.:++: ins',1,True,incc+inc)
                                                          where ins' = Seq.fromList [GB.casecall,GB.label (GB.LocRef_Label @at1stOffLabel),GB.link $ GB.linkOffsets @nrOfAlts]
                                                                        Seq.:++: Seq.fromList [ GB.labelref l | l <- @altL.altLocRefs ]
                                                                        Seq.:++: @altL.i
                                                                        Seq.:++: Seq.fromList [GB.label @aftCaseLocRef]
                                                                (insc,incc)
                                                                     = if @altL.isEnum
                                                                       then (Seq.empty,-1)
                                                                       else (Seq.fromList [GB.ldnt],0)
  | Seq         loc         .   (seqIns,seqStkInc,newVaGam)
                                                =   let nm ins inc nmIntro
                                                          = case nmIntro of
                                                              (NmIntro_Single nm)
                                                                -> (ins,inc,Map.fromList [(nm,GB.Val_LocalOffset (@expr.stkDepth+inc))])
                                                              (NmIntro_Grp _ nmL) | not (null nmL)
                                                                -> (ins Seq.:++: fins, inc' + length nmL,g)
                                                                where fins = Seq.fromList [GB.fetch GB.InsOp_LocB_TOS]
                                                                      inc' = inc - 1
                                                                      g = patNmL2VAGam (@expr.stkDepth+inc) nmL
                                                              _ -> (ins,inc,Map.empty)
                                                    in  case (@expr.mbUnitIntro,@pat.nmIntro) of
                                                          (Just (UnitIntro (GB.GrValIntro_Int i)),NmIntro_Single nmp)
                                                            | ehcOptOptimise @lhs.opts >= OptimiseNormal
                                                              -> (Seq.empty,0,Map.singleton nmp (GB.Val_Int i))
                                                          (Just (UnitIntro gvi),nmi)
                                                              -> nm ins inc nmi
                                                              where (GB.GrValIntroAlt_OnTOS ins inc _) = GB.gviLd GB.defaultOptimCtxt @nmEnv @lhs.modNmConstInx @expr.stkDepth gvi
                                                          _   -> nm Seq.empty 0 @pat.nmIntro
%%]

%%[8 hs
mkRetLabel :: ReturnCtxt -> GB.LabelId -> (GB.LabelId,GB.LabelId)
mkRetLabel returnCtxt l
  = case returnCtxt of
      ReturnCtxt_CaseReturns _ _
        -> GB.newLabelId l
      _ -> (l,l)

mkRet :: ReturnCtxt -> GB.LabelId -> GB.StackDepth -> GB.StackDepth -> GB.InsSeq
mkRet returnCtxt retLocLbl stkDepth inc
  = case returnCtxt of
      ReturnCtxt_Returns nrArgsOuter
        -> Seq.fromList [GB.retcall 1 nrArgsOuter {- retOffSurr -}]
        -- where retOffSurr  = stkDepth + inc
      ReturnCtxt_CaseReturns labelId dep
        -> Seq.fromList [ GB.retcase 1 (stkDepth + inc - dep)
                 , GB.label $ GB.LocRef_Label retLocLbl
                 , GB.link $ GB.linkOffsets 1
                 , GB.labelref $ GB.LocRef_Label labelId
                 ]
      ReturnCtxt_CaseFallThrough
        -> Seq.empty
      _ -> Seq.empty
%%]

%%[8
SEM GrExpr
  | Unit Store Call Eval App FFI
                loc         .   retIns          =   if @retIsDone
                                                    then Seq.empty
                                                    else mkRet @lhs.returnCtxt @retLocLabel @lhs.stkDepth @valStkInc
  | * - Unit Store Call Eval App FFI
                loc         .   retIns          =   Seq.empty
                            .   retFixOffs      =   Seq.empty
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Global entry points
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[8
ATTR AllBind [ | | entryNms USE {Seq.:++:} {Seq.empty}: {Seq.FastSeq GB.EntryInfo} ]

SEM GrBind
  | Bind        lhs         .   entryNms        =   Seq.singleton (GB.EntryInfo @nm 0 (null @argNmL) @strConst)
                loc         .   entryInx        =   GB.vaEntryInx $ panicJust "GrBind.Bind.entryInx" $ GB.nmEnvLookup @nm @nmEnv
%%]

%%[8.entryNmMp
SEM GrModule
  | Mod         loc         .   (entryNmMp,entryL,isCafL)
                                                =   let entryL = zipWith (\i e -> e {GB.eiEntryNr = i}) [0..] $ Seq.toList @bindL.entryNms
                                                        mpMod = Map.fromList [ (GB.eiNm e, e) | e <- entryL ]
%%[[20
                                                        mpReExp = Map.fromList $ zip [ n | n <- Map.keys @lhs.expNmOffMp, not (n `Map.member` mpMod) ] [Map.size mpMod ..]
%%]]
                                                    in  ( mpMod, entryL
                                                        , map GB.eiIsCAF entryL
                                                        )
%%]

%%[8
SEM GrModule
  | Mod         loc         .   mainEntry       =   maybe 0 GB.vaEntryInx $ GB.nmEnvLookup hsnMain @nmEnv
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Code generation
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[8
ATTR GrAGItf GrModule [ | | gbMod: {GB.Module} ]

SEM GrModule
  | Mod         lhs         .   gbMod           =   GB.Module_Mod @moduleNmAlpha
%%[[20
                                                      [ (n,hsnShowAlphanumeric n) | n <- @lhs.allImpNmL ]
                                                      [ (n,hsnShowAlphanumeric n) | (n,_) <- sortOn (fst.snd) $ Map.toList @lhs.impNmOffMpMp ]
                                                      [ m | Just m <- map (\(n,_) -> Map.lookup n @entryNmMp) $ sortOn snd $ Map.toList @lhs.expNmOffMp ]
%%]]
                                                      @entryL
                                                      (Seq.toList $ @bindL.i)
                                                      [ s | (s,_) <- sortOn (GB.constInx . snd) $ Map.toList @bindL.strMp ]
                                                      [ c | (c,_) <- sortOn snd $ Map.toList @bindL.constMp ]
                                                      [ i | (i,True) <- zip [0..] @isCafL ]
                                                      @mainEntry
%%]
                                                      [ e | e@(n,_) <- tyRowCanonOrder $ Map.toList @entryNmMp, n `Set.member` @lhs.expNmS ]

%%[8
ATTR AllBind AllGrExpr [ | | i USE {Seq.:++:} {Seq.empty}: {GB.InsSeq} ]

SEM GrBind
  | Bind        lhs         .   i               =   Seq.fromList [GB.label (GB.LocRef_CodeEntry @entryInx),GB.meta @nm] Seq.:++: @expr.i

SEM GrExpr
  | Unit Store Call Eval App Case FFI FetchUpdate
                lhs         .   i               =   @valIns Seq.:++: @retIns
  | Seq         lhs         .   i               =   @expr.i Seq.:++: @seqIns Seq.:++: @body.i Seq.:++: @retIns

SEM GrAlt
  | Alt         lhs         .   i               =   let fetch = case @altFetch of
                                                                  AltFetch_Many _  -> Seq.fromList [GB.fetch GB.InsOp_LocB_TOS]
                                                                  AltFetch_One _ o -> Seq.fromList [GB.l2ts (o + GB.nrNodeHdrWords)]
                                                                  AltFetch_Zero    -> Seq.empty
                                                    in  Seq.fromList [GB.label @altLocRef] Seq.:++: fetch Seq.:++: @expr.i
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% SELF
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[8
ATTR GrTag [ | | self: SELF ]
%%]

