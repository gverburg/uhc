%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Unbox Int and Char
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[8 import({GrinCode/AbsSyn})
%%]

%%[8 hs module {%{GRIN}GrinCode.Trf.TestUnbox}
%%]

%%[8 hs import({%{EH}Base.Common}, {%{EH}Base.Builtin}, {%{GRIN}GRINCCommon}, {%{EH}GrinCode})
%%]

%%[8 hs export(testUnbox)

testUnbox :: (GrModule,Int,HptMap) -> (GrModule,Int,HptMap)
testUnbox (input,unique,hptMap)
  = let inh = Inh_GrAGItf {uniq_Inh_GrAGItf=unique}
        syn = wrap_GrAGItf (sem_GrAGItf (GrAGItf_AGItf input)) inh
    in  (trf_Syn_GrAGItf syn, uniq_Syn_GrAGItf syn, hptMap)

%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Wrapper
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[8.wrapper
WRAPPER GrAGItf
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Transformation: insert a test for boxedness before each  FetchField x 0
%%% if there are #U tags in the alternatives of the case
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[8
ATTR GrAGItf AllNT [ | uniq: Int  | ]
ATTR GrAGItf [ | | trf: GrModule ]
ATTR AllNT   [ | | trf: SELF     ]
%%]

%%[8

ATTR GrExpr [ | | isFetchTag: {Bool}   
                  getName: {HsName}  
                  isCaseHavingUnboxies: {Bool} 
                  startsWithCaseHavingUnboxies: {Bool} 
                  getExpr: {GrExpr}
                  getPat: {GrPatLam}
                  getBody: {GrExpr}
            ] 
            
ATTR GrAlt    GrAltL [ | | hasUnboxies USE {||} {False} : {Bool} ]
ATTR GrPatAlt GrTag  [ | | isUnboxy: {Bool} ]


SEM GrExpr
  | FetchField     lhs . isFetchTag   =  @offset == 0
                   lhs . getName      =  @nm
  | * - FetchField lhs . isFetchTag   =  False
                   lhs . getName      =  error "TestUnbox.cag: getName taken from non-FetchField"


SEM GrExpr
  | Seq            loc . original     =  GrExpr_Seq @expr.trf @pat.trf @body.trf
                   loc . newcase      =  \e -> let newName = HNmNr @lhs.uniq Nothing
                                               in  GrExpr_Case (GrVal_Var @expr.getName)
                                                               [ GrAlt_Alt (GrPatAlt_Tag GrTag_Unboxed) 
                                                                           (GrExpr_Seq (GrExpr_FetchField @expr.getName 1 (Just GrTag_Unboxed))
                                                                                       (GrPatLam_Var newName)
                                                                                       (GrExpr_Unit (GrVal_Node GrTag_Unboxed [GrVal_Var newName]))
                                                                           )
                                                               , GrAlt_Alt (GrPatAlt_Tag GrTag_Any) 
                                                                           (GrExpr_Seq @expr.trf @pat.trf e)
                                                               ]
                   lhs . trf          =  if @expr.isFetchTag && @body.startsWithCaseHavingUnboxies
                                         then GrExpr_Seq (@loc.newcase @body.getExpr) @body.getPat @body.getBody
                                         else if @expr.isFetchTag && @body.isCaseHavingUnboxies
                                              then @loc.newcase @body.trf
                                              else @loc.original
                                              
                   expr. uniq         =  if @expr.isFetchTag && ( @body.startsWithCaseHavingUnboxies || @body.isCaseHavingUnboxies )
                                          then @lhs.uniq + 1
                                          else @lhs.uniq
                                         
  | Seq            lhs . startsWithCaseHavingUnboxies = @expr.isCaseHavingUnboxies
  | * - Seq        lhs . startsWithCaseHavingUnboxies = False
  | Case           lhs . isCaseHavingUnboxies         = @altL.hasUnboxies
  | * - Case       loc . isCaseHavingUnboxies         = False
  
  | Seq            lhs . getExpr = @expr.trf
                   lhs . getPat  = @pat.trf
                   lhs . getBody = @body.trf
  | * - Seq        lhs . getExpr = error "getExpr from non-Seq"
                   lhs . getPat  = error "getPat from non-Seq"
                   lhs . getBody = error "getBody from non-Seq"
  
SEM GrAlt
  | Alt            lhs . hasUnboxies = @pat.isUnboxy
 
SEM GrPatAlt
  | Tag            lhs . isUnboxy = @tag.isUnboxy
  | * - Tag        lhs . isUnboxy = False
  
SEM GrTag
  | Unboxed        lhs . isUnboxy = True
  | * - Unboxed    lhs . isUnboxy = False
  

SEM GrAltL
  | Nil            lhs . trf = []
  | Cons           lhs . trf = -- if @hd.hasUnboxies
                               -- then @tl.trf               -- in a unique context, the head (containing the #U case) is not needed
                               -- else 
                                       @hd.trf : @tl.trf

%%]

