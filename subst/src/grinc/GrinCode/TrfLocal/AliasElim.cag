%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Eliminate name aliases, to avoid unnecessary variable introductions, hence runtime loads
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Remove bindings of names to names.
When directly executed absence of this transformation would lead to additional loads.

Tricky:
for:

..  ;  \p -> ... ; \p' -> unit p

it is assumed no useful computation takes place in between p and p'.
Useful here means an eval.
Probably do it different????

%%[8 import({GrinCode/AbsSyn})
%%]

%%[8 hs module {%{GRIN}GrinCode.TrfLocal.AliasElim}
%%]

%%[8 hs import(qualified Data.Map as Map,qualified Data.Set as Set,Data.Maybe)
%%]

%%[8 hs import({%{EH}Base.Builtin}, {%{EH}Base.Common}, {%{GRIN}GRINCCommon}, {%{EH}GrinCode})
%%]

%%[8 import({GrinCode/TrfLocal/CommonAliasAG},{GrinCode/TrfLocal/CommonRenameAG})
%%]

%%[8 hs export(grAliasElim)
grAliasElim :: GrModule -> GrModule
grAliasElim grmod
  = trf_Syn_GrAGItf t
  where t = wrap_GrAGItf (sem_GrAGItf $ GrAGItf_AGItf grmod)
            $ Inh_GrAGItf
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Wrapper
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[8.wrapper
WRAPPER GrAGItf
%%]

There is a cyclic dependency, but it is by design:

*** UU.AG warning  ***
problem  : Direct circular dependency pattern for inherited attribute
            nmAliasMp and synthesized attribute trf of nonterminal GrExpr
pattern  : see help
help     : The following attributes formed the cycle:
           GrExpr.Seq, inherited attribute body.nmAliasMp ("build/8/lib-grinc/GRIN8/GrinCode/TrfLocal/AliasElim.ag"(line 37, column 33))
           GrExpr.App, inherited attribute lhs.nmAliasMp
           GrExpr.App, inherited attribute argL.nmAliasMp ("build/8/lib-grinc/GRIN8//GrinCode/TrfLocal/CommonRenameAG.ag"(line 1, column 38))
           GrValL.Cons, inherited attribute lhs.nmAliasMp
           GrValL.Cons, inherited attribute hd.nmAliasMp ("build/8/lib-grinc/GRIN8//GrinCode/TrfLocal/CommonRenameAG.ag"(line 1, column 38))
           GrVal.Var, inherited attribute lhs.nmAliasMp
           GrVal.Var, synthesized attribute lhs.trf ("build/8/lib-grinc/GRIN8//GrinCode/TrfLocal/CommonRenameAG.ag"(line 42, column 33))
           GrValL.Cons, synthesized attribute hd.trf
           GrValL.Cons, local attribute trf ("build/8/lib-grinc/GRIN8//GrinCode/TrfLocal/CommonRenameAG.ag"(line 18, column 18))
           GrValL.Cons, synthesized attribute lhs.trf ("build/8/lib-grinc/GRIN8//GrinCode/TrfLocal/CommonRenameAG.ag"(line 18, column 18))
           GrExpr.App, synthesized attribute argL.trf
           GrExpr.App, synthesized attribute lhs.trf ("build/8/lib-grinc/GRIN8//GrinCode/TrfLocal/CommonRenameAG.ag"(line 22, column 33))
           GrExpr.Seq, synthesized attribute body.trf
           GrExpr.Seq, local attribute trf ("build/8/lib-grinc/GRIN8//GrinCode/TrfLocal/CommonRenameAG.ag"(line 18, column 18))
           GrExpr.Seq, local attribute newNmAliasMp ("build/8/lib-grinc/GRIN8/GrinCode/TrfLocal/AliasElim.ag"(line 58, column 52))
           GrExpr.Seq, inherited attribute body.nmAliasMp ("build/8/lib-grinc/GRIN8/GrinCode/TrfLocal/AliasElim.ag"(line 37, column 33))

%%[8
PRAGMA nocycle
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Defaults for imported code
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[8
SEM GrAGItf
  | AGItf		loc			.	mkNewNm			=	id
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Name introduction
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[8
SEM GrExpr
  | Seq         body        .   nmAliasMp       =   @newNmAliasMp `Map.union` @lhs.nmAliasMp
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Transformation: remove 'unit n1 : \n2 -> ...' combi
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[8
ATTR GrAGItf [ | | trf: GrModule ]
%%]

%%[8 hs
nmAliasOne :: NmAliasMp -> NmAlias -> NmAlias -> (GrExpr->GrExpr,NmAliasMp)
nmAliasOne mpGlob e p
  = case (e,p) of
      (NmAlias_Nm ne, NmAlias_Nm np)
        -> (id,Map.singleton np $ nmAliasRepl' mpGlob ne)
      (NmAlias_Const _ c, NmAlias_Nm np)
        -> (GrExpr_Seq (GrExpr_Unit c) (GrPatLam_Var np),Map.empty)
      _ -> (id,Map.empty)

nmAliasGrp :: NmAliasMp -> [NmAlias] -> [NmAlias] -> (GrExpr->GrExpr,NmAliasMp)
nmAliasGrp mpGlob eAliL pAliL
  = (foldr (.) id mkel, Map.unions mpl)
  where (mkel,mpl) = unzip $ zipWith (nmAliasOne mpGlob) eAliL pAliL
%%]

%%[8
SEM GrExpr
  | Seq         loc         .   (seqTrf,mkExtraSeq,newNmAliasMp)
                                                =   case (@expr.nmAlias,@pat.nmAlias,@body.nmAlias) of
                                                      (_,NmAlias_Nm p,NmAlias_Nm b) | p == b						-- last unit in body yields p, without intermediate computation, may well remove it. See note at begin.
                                                        -> (@expr.trf,id,Map.empty)
                                                      (NmAlias_Eval e,pp@(NmAlias_Nm p),_)							-- allow reference to evaluated value instead
                                                        -> (@trf,id,Map.singleton e pp)
                                                      (e@(NmAlias_Nm _),p@(NmAlias_Nm _),_)							-- p is alias for e, map p to e
                                                        -> (@body.trf,mke,mp)
                                                        where (mke,mp) = nmAliasOne @lhs.nmAliasMp e p
                                                      (NmAlias_Grp _ es,NmAlias_Grp _ ps,_)							-- node is directly matched -> fields are aliases
                                                        -> (@body.trf,mke,mp)
                                                        where (mke,mp) = nmAliasGrp @lhs.nmAliasMp es ps
                                                      (e@(NmAlias_Grp _ _),NmAlias_Nm p,_)							-- this + next is equivalent to previous, but delayed
                                                        -> (@trf,id,Map.singleton p (e {naliNm = p}))
                                                      (NmAlias_Nm e,NmAlias_Grp _ ps,_) | isJust mbAli
                                                        -> case mbAli of
                                                             Just (NmAlias_Grp _ es)
                                                               -> (@body.trf,mke,mp)
                                                               where (mke,mp) = nmAliasGrp @lhs.nmAliasMp es ps
                                                             _ -> (@trf,id,Map.empty)
                                                        where mbAli = Map.lookup e @lhs.nmAliasMp
                                                      _ -> (@trf,id,Map.empty)
                lhs         .   trf             =   @mkExtraSeq @seqTrf
%%]
