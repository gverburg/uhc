%%[0
%include lhs2TeX.fmt
%include afp.fmt
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Haskell importable interface to EH/AbsSyn
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[1 hs module {%{EH}EH} import({%{EH}Base.Common},{%{EH}Base.Builtin})
%%]

%%[1 hs export(AGItf(..), Decl(..), Decls, TyExpr(..), Expr(..), PatExpr(..))
%%]

%%[1 hs import({%{EH}HS}(Range))
%%]

%%[1 hs export(mkLet)
%%]

%%[4 hs import({%{EH}Ty})
%%]

%%[5 hs export(TyExprs, TyVar(..), TyVars, CaseAlt(..), CaseAlts, DataConstr(..), DataConstrs)
%%]

%%[5 hs export(mkCase,mkCase',mkIf,mkIf',mkError,mkStr,mkAlt)
%%]

%%[6 hs export(KiExpr(..))
%%]

%%[7 hs export(RecExpr(..), RecPatExpr(..), RowTyExpr(..), DataField(..), DataFields, DataFieldExpr(..), DataFieldPatExpr(..))
%%]

%%[7_2 hs import({%{EH}Ty.TyConPat})
%%]

%%[7_2 hs export(AnnDtMonoRestrictions, AnnDtMonoRestrict(..))
%%]

%%[8 hs import(qualified Data.Set as Set)
%%]

%%[8 hs export(mkLet',mkIf'')
%%]

%%[9 hs export(ehIsDeclVal)
%%]

%%[9 hs export(PrExpr(..), PrExprs)
%%]

%%[9 hs export(mkUnit,mkError')
%%]

%%[15 hs export(FuncDep(..), FuncDeps)
%%]

%%[50 hs export(DataConstrEq(..), DataConstrEqs)
%%]

%%[1 ag import({EH/AbsSyn})
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Observations
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[9 hs
ehIsDeclVal :: Decl -> Bool
%%[[1
ehIsDeclVal (Decl_Val   _ _) = True
%%][99
ehIsDeclVal (Decl_Val _ _ _) = True
%%]]
ehIsDeclVal _                = False
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Constructing
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[1.mkLet hs
mkLet :: Range -> Maybe [Decl] -> Expr -> Expr
mkLet r md e
  = case md of
      Just d@(_:_) -> rngLift r Expr_Let d e
      _            -> e
%%]

%%[8 -1.mkLet hs
mkLet' :: Bool -> Range -> Maybe [Decl] -> Expr -> Expr
mkLet' isStrict r md e
  = case md of
      Just d@(_:_) -> rngLift r Expr_Let isStrict d e
      _            -> e

mkLet :: Range -> Maybe [Decl] -> Expr -> Expr
mkLet = mkLet' False
%%]

%%[9 hs
mkUnit :: Range -> Expr
mkUnit r = rngLift r Expr_Rec (rngLift r RecExpr_Empty)
%%]
mkUnit :: Range -> Expr
mkUnit _ = semCon (hsnProd 0)

%%[5 hs
mkError':: HsName -> Range -> String -> Expr
mkError' e r m
  = mkApp [rngLift r Expr_Var e,mkStr r (show r ++ ": " ++ m)]

mkError :: Range -> String -> Expr
mkError = mkError' hsnError

mkStr :: Range -> String -> Expr
mkStr r s
  = rngLift r Expr_SConst s
%%]

%%[5 hs
%%[[5
mkIf' :: [HsName] -> Range -> Expr -> Expr -> Expr -> Expr
mkIf' (bn:tn:fn:_) r c t e
%%][8
mkIf'' :: [HsName] -> Range -> Expr -> Expr -> Expr -> Maybe (Set.Set UID) -> Expr
mkIf'' (bn:tn:fn:_) r c t e i
%%]]
  = case c of
%%[[5
      Expr_Con n
%%][99
      Expr_Con _ n
%%]]
          | n == tn -> t
          | n == fn -> e
      _ -> mkCase' r
             ( rngLift r Expr_TypeAs (rngLift r TyExpr_Con bn) c )
%%[[8
             i False
%%]]
             [ mkAlt r (rngLift r PatExpr_Con tn) t
             , mkAlt r (rngLift r PatExpr_Con fn) e
             ]
%%]

%%[8 hs
mkIf' :: [HsName] -> Range -> Expr -> Expr -> Expr -> Expr
mkIf' ns r c t e = mkIf'' ns r c t e Nothing
%%]

%%[5 hs
mkIf :: Range -> Expr -> Expr -> Expr -> Expr
mkIf = mkIf' [hsnBool,hsnTrue,hsnFalse]
%%]

%%[5 hs
mkAlt :: Range -> PatExpr -> Expr -> CaseAlt
mkAlt r p e = rngLift r CaseAlt_Pat p e
%%]

%%[5.mkCase hs
mkCase :: Range -> Expr -> [(PatExpr,Expr)] -> Expr
mkCase r c as = mkCase' r c [ mkAlt r p e | (p,e) <- as ]

mkCase' :: Range -> Expr -> [CaseAlt] -> Expr
mkCase' r c as = rngLift r Expr_Case c as
%%]

%%[8 -5.mkCase hs
mkCase' :: Range -> Expr  -> Maybe (Set.Set UID) -> Bool -> [CaseAlt] -> Expr
mkCase' r c id istup as
  = rngLift r Expr_Case c as id istup

mkCase :: Range -> Expr -> [(PatExpr,Expr)] -> Expr
mkCase r c as
  = mkCase' r c Nothing False [ mkAlt r p e | (p,e) <- as ]
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Construct some EH AST node, providing dummy initial extra args (position), if any
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[1.mkEH hs export(mkEH)
mkEH :: x -> x
mkEH = rngLift emptyRange
%%]

%%[99 -1.mkEH hs export(mkEH)
mkEH :: (Range -> x) -> x
mkEH = rngLift emptyRange
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% SemApp class instances
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[1 hs
instance SemApp Expr where
  semApp       = mkEH Expr_App
  semAppTop    = mkEH Expr_AppTop
  semCon       = mkEH Expr_Con . mkHNm
  semParens    = mkEH Expr_Parens
%%[[1
  mkRngCon _   = Expr_Con . mkHNm
  mkRngVar _   = Expr_Var . mkHNm
%%][99
  mkRngCon r   = Expr_Con r . mkHNm
  mkRngVar r   = Expr_Var r . mkHNm
%%]]
%%[[7
  mkProdApp l
    = mkEH Expr_Rec $ mkEH RecExpr_Empty `mkRow` l
    where mkRow = foldl (\r e -> mkEH RecExpr_Ext r Nothing e)
%%]]
%%]


%%[1 hs
instance SemApp PatExpr where
  semApp       = mkEH PatExpr_App
  semAppTop    = mkEH PatExpr_AppTop
  semCon       = mkEH PatExpr_Con . mkHNm
  semParens    = mkEH PatExpr_Parens
%%[[1
  mkRngCon _   = PatExpr_Con . mkHNm
  mkRngVar _   = PatExpr_Var . mkHNm
%%][99
  mkRngCon r   = PatExpr_Con r . mkHNm
  mkRngVar r   = PatExpr_Var r . mkHNm
%%]]
%%[[7
  mkProdApp l
    = mkEH PatExpr_Rec $ mkEH RecPatExpr_Empty `mkRow` l
    where mkRow = foldl (\r e -> mkEH RecPatExpr_Ext r Nothing e)
%%]]
%%]

%%[1 hs
instance SemApp TyExpr where
  semApp       = mkEH TyExpr_App
  semAppTop    = mkEH TyExpr_AppTop
  semCon       = mkEH TyExpr_Con . mkHNm
  semParens    = mkEH TyExpr_Parens
%%[[1
  mkRngCon _   = TyExpr_Con . mkHNm
%%][99
  mkRngCon r   = TyExpr_Con r . mkHNm
%%]]
%%[[1
  mkRngVar     = mkRngCon
%%][3
  mkRngVar _   = TyExpr_Var . mkHNm
%%][99
  mkRngVar r   = TyExpr_Var r . mkHNm
%%]]
%%[[7
  mkProdApp l
    = mkEH TyExpr_Row $ mkEH RowTyExpr_Empty `mkRow` l
    where mkRow = foldl (\r e -> mkEH RowTyExpr_Ext r Nothing e)
%%]]
%%]

%%[6 hs
instance SemApp KiExpr where
  semApp       = mkEH KiExpr_App
  semAppTop    = mkEH KiExpr_AppTop
  semCon       = mkEH KiExpr_Con . mkHNm
  semParens    = mkEH KiExpr_Parens
%%[[1
  mkRngCon _   = KiExpr_Con . mkHNm
  mkRngVar _   = KiExpr_Var . mkHNm
%%][99
  mkRngCon r   = KiExpr_Con r . mkHNm
  mkRngVar r   = KiExpr_Var r . mkHNm
%%]]
%%]

