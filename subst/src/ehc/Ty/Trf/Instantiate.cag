%%[0
%include lhs2TeX.fmt
%include afp.fmt
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Haskell importable interface to Ty instantiate
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[3 hs module {%{EH}Ty.Trf.Instantiate}
%%]

%%[3.tyInst hs import({%{EH}Base.Common},{%{EH}Ty},{%{EH}VarMp},{%{EH}Substitutable}) export(tyInst)
%%]

%%[4.tyInst -3.tyInst hs import({%{EH}Base.Common},{%{EH}Ty},{%{EH}VarMp},{%{EH}Substitutable})
%%]

%%[4 hs import({%{EH}Base.Debug},EH.Util.Pretty)
%%]

%%[4 hs import(Data.List) export(tyInst1Quants, tyInst1Exists, instCoConst, instContra,instCo)
%%]

%%[4_2 hs export(instPlain,instFixed,instMeet)
%%]

%%[6_4 hs export(instCoExist)
%%]

%%[4 ag import({Ty/AbsSyn})
WRAPPER TyAGItf
%%]

%%[50 hs export(HowToInst,instCoFixed)
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% tyInst
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[3.tyInst hs
tyInst' :: (TyVarId -> Ty) -> UID -> Ty -> Ty
tyInst' mkFreshTy uniq ty
  = s |=> ty'
  where  i u (Ty_Quant v t)  =  let  (u',v') = mkNewUID u
                                     (s,t') = i u' t
                                in   ((v `varmpTyUnit` (mkFreshTy v')) |=> s,t')
         i _ t               =  (emptyVarMp,t)
         (s,ty')             =  i uniq ty

tyInst :: UID -> Ty -> Ty
tyInst = tyInst' mkTyVar
%%]

%%[3.tyInstKnown hs export(tyInstKnown)
tyInstKnown :: UID -> Ty -> Ty
tyInstKnown = tyInst' (\tv -> Ty_Var tv TyVarCateg_Fixed)
%%]

%%[4.HowToInst hs
type HowToInst = TyQu -> TyVarId -> Ty

instCoConst, instContra, instCo :: HowToInst
instCoConst  q v = if tyquIsForall q then Ty_Var v TyVarCateg_Plain else mkTyCon ("C_" ++ show v)
instContra   q v = if tyquIsForall q then Ty_Var v TyVarCateg_Fixed else Ty_Var v TyVarCateg_Plain
instCo       q v = if tyquIsForall q then Ty_Var v TyVarCateg_Plain else Ty_Var v TyVarCateg_Fixed
%%]
instCoConst      = instCo
instCoConst  q v = if tyquIsForall q then Ty_Var v TyVarCateg_Plain else mkTyCon ("C_" ++ show v)

%%[4_2 hs
instPlain, instFixed, instMeet :: HowToInst
instPlain  _    = mkTyVar
instFixed  _ v  = Ty_Var v TyVarCateg_Fixed
instMeet   _ v  = Ty_Both v []
%%]

%%[6_4 hs
instCoExist :: HowToInst
instCoExist  q v = if tyquIsForall q then Ty_Var v TyVarCateg_Plain else Ty_Var v TyVarCateg_Exist
%%]

%%[50 hs
instCoFixed :: HowToInst
instCoFixed  q v = if tyquIsForall q then Ty_Var v TyVarCateg_Plain else Ty_Var v TyVarCateg_Fixed
%%]

%%[4.tyInst -(3.tyInst 3.tyInstKnown) hs
tyInst :: UID -> Bool -> HowToInst -> Ty -> (Ty,TyVarIdL)
tyInst uniq onlyExists howToInst ty
  = let  t  =  wrap_TyAGItf
                  (sem_TyAGItf (TyAGItf_AGItf ty))
                  (Inh_TyAGItf {gUniq_Inh_TyAGItf = uniq, onlyExists_Inh_TyAGItf = onlyExists, howToInst_Inh_TyAGItf = howToInst})
    in   (repl_Syn_TyAGItf t,replTvL_Syn_TyAGItf t)

tyInst1Quants :: UID -> HowToInst -> Ty -> (Ty,TyVarIdL)
tyInst1Quants uniq howToInst ty = tyInst uniq False howToInst ty
%%]

%%[4.tyInst1Exists hs
tyInst1Exists :: UID -> Ty -> Ty
tyInst1Exists uniq ty = fst (tyInst uniq True instCoConst ty)
%%]

%%[6_4.tyInst1Exists -4.tyInst1Exists hs
tyInst1Exists :: UID -> Ty -> Ty
tyInst1Exists uniq ty = fst (tyInst uniq True instCoExist ty)
%%]

tyInst :: UID -> Bool -> HowToInst -> Ty -> (Ty,TyVarIdL)
tyInst uniq onlyExists howToInst ty
  = (s |=> ty',tvl)
  where  i u mbQ (Ty_Quant q v t) | not (tyquIsForall q && onlyExists) && maybe True (==q) mbQ
                             =  let  (u',v')        = mkNewUID u
                                     (s,t',tvl')    = i u' (Just q) t
                                in   ((v `varmpTyUnit` (howToInst q v')) |=> s,t',v':tvl')
         i _ _ t             =  (emptyVarMp,t,[])
         (s,ty',tvl)         =  i uniq Nothing ty


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Options
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[4
ATTR TyAGItf AllTy [ howToInst: HowToInst  onlyExists: Bool | | ]
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Where to stop
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[4
ATTR AllTy [ allow: Bool  mbQ: {Maybe TyQu} | | ]

SEM TyAGItf
  | AGItf           ty          .   allow       =   True
                                .   mbQ         =   Nothing

SEM Ty
  | Quant           loc         .   allow       =   @lhs.allow
                                                        && not (tyquIsForall @qu.repl && @lhs.onlyExists)
                                                        && maybe True (== @qu.repl) @lhs.mbQ
                    ty          .   mbQ         =   Just @qu.repl
  | * - Quant       loc         .   allow       =   False
%%]

%%[9
SEM Ty
  | Quant           loc         .   allow       :   Bool
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Unique
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[4
ATTR AllTy [ | gUniq: UID | ]
ATTR TyAGItf [ gUniq: UID | | ]

SEM Ty
  | Quant           (ty.gUniq,loc.lUniq)        =   mkNewUID @lhs.gUniq
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Substution to replace tvars
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[4
ATTR AllTy [ replSubst: VarMp | gathSubst: VarMp | ]
ATTR Ty TyAGItf [ | | replTvL USE {++} {[]}: TyVarIdL ]
ATTR AllTyAndFlds [ | | repl: SELF ]
ATTR TyAGItf [ | | repl: Ty ]

SEM TyAGItf
  | AGItf           ty          .   gathSubst   =   emptyVarMp
                                .   replSubst   =   @ty.gathSubst

SEM Ty
  | Quant           loc         .   tvNew       =   @lUniq
                    ty          .   gathSubst   =   if @allow
                                                    then  (@tv `varmpTyUnit` @lhs.howToInst @qu.repl @tvNew) `varmpPlus` @lhs.gathSubst
                                                    else  (@lhs.gathSubst)
%%]

%%[9
SEM Ty
  | Quant           loc         .   tvNew       :   UID
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Replacement
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[4
SEM Ty
  | Quant           lhs         .   (repl,replTvL)
                                                =   if @allow
                                                    then  (@ty.repl,@tvNew : @ty.replTvL)
                                                    else  (@repl,[])
  | Var             lhs         .   repl        =   maybe @repl id (varmpTyLookup @tv @lhs.replSubst)
%%]

%%[50
SEM Ty
  | Equal           lhs         .   repl        =   maybe @repl (\t -> Ty_Equal (tyVar t) @ty.repl) (varmpTyLookup @tv @lhs.replSubst)
%%]

