%%[0
%include lhs2TeX.fmt
%include afp.fmt
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Module itf
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[3 hs module {%{EH}Ty.Trf.Quantify} import(EH.Util.Utils,{%{EH}Base.Builtin},{%{EH}Base.Common},{%{EH}Ty},{%{EH}VarMp},{%{EH}Substitutable}) export(tyQuantify, tyQuantifyClosed)
%%]

%%[4 hs import({%{EH}Base.Debug},EH.Util.Pretty)
%%]

%%[4 hs import(qualified Data.Set as Set,qualified Data.Map as Map,Data.List as List)
%%]

%%[4 ag import({Ty/AbsSyn},{Ty/CommonAG},{Ty/TyVarCommon})
WRAPPER TyAGItf
%%]

%%[6 hs export(kiQuantify)
%%]

%%[9 hs import(Data.Maybe,EH.Util.Utils,EH.Util.Pretty) export(tyQuantifyRank,TyQuOut(..),TyQuOpts(..),defaultTyQuOpts)
%%]

%%[99
%%]
PRAGMA nostrictcase

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Haskell importable interface to Ty quantify
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[3.tyQuantify hs
tyQuantify :: (TyVarId -> Bool) -> Ty -> Ty
tyQuantify tvIsBound ty = mkTyQu (filter (not.tvIsBound) (ftv ty)) ty
%%]

%%[3.tyQuantifyClosed hs
tyQuantifyClosed :: Ty -> Ty
tyQuantifyClosed = tyQuantify (const False)
%%]

%%[9.tyQuantifyClosed -3.tyQuantifyClosed hs
tyQuantifyClosed :: Ty -> Ty
tyQuantifyClosed = tyQuantifyRank [1..]

tyQuantifyRank :: [Int] -> Ty -> Ty
tyQuantifyRank rL ty
  = tqoTy (tyQuantifyWithOpts (defaultTyQuOpts {tqoptQuRanks = rL}) (const False) TyQu_Forall ty)
%%]

%%[4.tyQuantify -3.tyQuantify hs
tyQuantify :: (TyVarId -> Bool) -> Ty -> Ty
tyQuantify tvIsBound ty
  = let  t  =  wrap_TyAGItf
                  (sem_TyAGItf (TyAGItf_AGItf ty))
                  (Inh_TyAGItf {tvIsBound_Inh_TyAGItf = tvIsBound})
    in   quTy_Syn_TyAGItf t
%%]

%%[6.tyQuantify -4.tyQuantify hs
tyQuantify :: (TyVarId -> Bool) -> Ty -> Ty
tyQuantify tvIsBound ty = tyQuantify' tvIsBound TyQu_Forall ty

kiQuantify :: (TyVarId -> Bool) -> Ty -> Ty
kiQuantify tvIsBound ty = tyQuantify' tvIsBound TyQu_KiForall ty
%%]

%%[6.tyQuantifyPrime hs
tyQuantify' :: (TyVarId -> Bool) -> TyQu -> Ty -> Ty
tyQuantify' tvIsBound baseQuant ty
  = let  t  =  wrap_TyAGItf
                  (sem_TyAGItf  (TyAGItf_AGItf ty))
                  (Inh_TyAGItf  { baseQu_Inh_TyAGItf        = baseQuant
                                , tvIsBound_Inh_TyAGItf     = tvIsBound
                                })
    in   quTy_Syn_TyAGItf t
%%]

%%[9.tyQuantifyPrime -6.tyQuantifyPrime hs
tyQuantify' :: (TyVarId -> Bool) -> TyQu -> Ty -> Ty
tyQuantify' tvIsBound baseQuant ty = tqoTy (tyQuantifyWithOpts defaultTyQuOpts tvIsBound baseQuant ty)
%%]

%%[9 hs
data TyQuOpts  = TyQuOpts  {tqoptQuRanks :: [Int]}

defaultTyQuOpts :: TyQuOpts
defaultTyQuOpts = TyQuOpts [1..]

data TyQuOut
  = TyQuOut   { tqoTy               ::  Ty
              }
%%]

%%[9 hs
tyQuantifyWithOpts :: TyQuOpts -> (TyVarId -> Bool) -> TyQu -> Ty -> TyQuOut
tyQuantifyWithOpts opts tvIsBound baseQuant ty
  = let  t  =  wrap_TyAGItf
                  (sem_TyAGItf  (TyAGItf_AGItf ty))
                  (Inh_TyAGItf  { baseQu_Inh_TyAGItf        = baseQuant
                                , tvIsBound_Inh_TyAGItf     = tvIsBound
                                , opts_Inh_TyAGItf          = opts
                                })
    in   TyQuOut
            { tqoTy                 = quTy_Syn_TyAGItf t
            }
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Init of coco
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[4
SEM TyAGItf
  | AGItf       ty          .   coco        =   CoVariant
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Options
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[9
ATTR TyAGItf AllTy [ opts: TyQuOpts | | ]

SEM TyAGItf
  | AGItf       ty          .   opts        =   @lhs.opts {tqoptQuRanks = take 5 (tqoptQuRanks @lhs.opts)}
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Fixed tvars
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[4
ATTR AllTy [ | | gathFxTvM USE {`Map.union`} {Map.empty}: TvCatMp ]
ATTR AllTy [ fxTvM: TvCatMp | | ]

SEM Ty
  | Var         lhs         .   gathFxTvM   =   @tv `Map.singleton` @categ.self

SEM TyAGItf
  | AGItf       loc         .   fxTvM       =   @ty.gathFxTvM
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Free row vars
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[90
ATTR Ty [ | | frRowTvL: TyVarIdL ]

SEM Ty
  | Ext         lhs         .   frRowTvL    =   @ty.frRowTvL
  | App         loc         .   frRowTvL    =   @func.frRowTvL `List.union` @arg.frRowTvL
  | * - App Ext
                lhs         .   frRowTvL    =   []
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Rank
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[4
ATTR AllTy [ rank: Int | | ]

SEM Ty
  | App         arg         .   rank        =   @lhs.rank + (if @isArrowArg then 1 else 0)

SEM TyAGItf
  | AGItf       ty          .   rank        =   1
%%]

%%[9
SEM Ty
  | Var App Pred
                loc         .   isQuRank    =   @lhs.rank `elem` tqoptQuRanks @lhs.opts
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Is location in type a place where we treat quantification specially?
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[6_4.isSpecLoc
ATTR Ty [ | | isSpecLoc: Bool  isSpecLocL: [Bool] ]

SEM Ty
  | App         loc         .   isSpecLoc   =   @isSpineRoot && (@appIsArrow || @appIsLikeProd)
                            .   isSpecLocL  =   @arg.isSpecLoc : @func.isSpecLocL
  | * - App     loc         .   isSpecLoc   =   False
                            .   isSpecLocL  =   []
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Is location in type a place where quantification of previously existentialized tvar may be done?
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[6_4
SEM Ty
  | App         loc         .   isReQuExLoc =   @lhs.rank > 1
                                                ||  @lhs.rank == 1
                                                    &&  (@lhs.tyCtxt == TyQuCtxtArrow && not @arg.isArrow
                                                        || @lhs.tyCtxt /= TyQuCtxtArrow
                                                        )
  | Var         loc         .   isReQuExLoc =   True
%%]

%%[9
%%]
SEM Ty
  | Pred        loc         .   isReQuExLoc =   True

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Is location in type a place where quantification of fixed tvar may be done?
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[4
SEM Ty
  | App         loc         .   isQuFxLoc   =   @lhs.rank > 1
                                                ||  @lhs.rank == 1
                                                    &&  (@lhs.tyCtxt == TyQuCtxtArrow && not @arg.isArrow
                                                        || @lhs.tyCtxt == TyQuCtxtOther
                                                        )
  | Var         loc         .   isQuFxLoc   =   False
%%]

%%[9
SEM Ty
  | Pred        loc         .   isQuFxLoc   =   False
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Determine quantifiable tvars
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[4.tvBoundAdd hs
tvBoundAdd :: (TyVarId -> Bool) -> TyVarIdS -> TyVarId -> Bool
tvBoundAdd tvIsBound tvS = \v -> v `Set.member` tvS || tvIsBound v
%%]

%%[4.tvarsToQuant hs
tvarsToQuant :: Bool -> TvCatMp -> (TyVarId -> Bool) -> (TyVarId -> Bool) -> TyVarIdS -> (TyVarIdS,TyVarIdS,TyVarId -> Bool)
tvarsToQuant isQuLoc _ mayQuFx tvIsBound tvS
  =  if isQuLoc
     then  let boundables = Set.filter (\tv -> not (tvIsBound tv)) tvS
           in (boundables,Set.empty,tvBoundAdd tvIsBound boundables)
     else  (Set.empty,Set.empty,tvIsBound)
%%]

%%[6_4.tvarsToQuant -4.tvarsToQuant hs
tvarsToQuant :: Bool -> TvCatMp -> (TyVarId -> Bool) -> (TyVarId -> Bool) -> TyVarIdS -> (TyVarIdS,TyVarIdS,TyVarId -> Bool)
tvarsToQuant isQuLoc fxTvM mayQuFx tvIsBound tvS
  =  if isQuLoc
     then  let  tvFrS = Set.filter (\tv -> not (tvIsBound tv)) tvS
                (bndEx,bnd) = Set.partition (tvIsEx fxTvM) tvFrS
           in   (bnd,Set.filter mayQuFx bndEx,tvBoundAdd tvIsBound tvFrS)
     else  (Set.empty,Set.empty,tvIsBound)
%%]

%%[4.tvMayQuFx hs
tvMayQuFx :: TyQu -> TvCatMp -> Bool -> TyVarId -> Bool
tvMayQuFx qu fxTvM isQuFxLoc tv
  = True
%%]

%%[6_4.tvMayQuFx -4.tvMayQuFx hs
tvMayQuFx :: TyQu -> TvCatMp -> Bool -> TyVarId -> Bool
tvMayQuFx qu fxTvM isQuFxLoc tv
  = isQuFxLoc 
%%]

%%[4.tvIsBound
ATTR TyAGItf AllTy [ tvIsBound: {TyVarId -> Bool} | | ]

SEM TyAGItf
  | AGItf       loc         .   (qBndTvS,qBndExTvS,tvIsBound)
                                                        =   tvarsToQuant True @fxTvM (const False) @lhs.tvIsBound @qHereTvS

SEM Ty
  | App Var     loc         .   (qBndTvS,qBndExTvS,tvIsBound)
                                                        =   tvarsToQuant @isQuLoc @lhs.fxTvM (tvMayQuFx @hereQu @lhs.fxTvM @isQuFxLoc) @lhs.tvIsBound @qHereTvS
  | Quant       loc         .   tvIsBound               =   tvBoundAdd @lhs.tvIsBound @introTVarS
%%]

%%[9
SEM Ty
  | App Var     loc         .   (qBndTvS,qBndExTvS,tvIsBound)
                                                        :=  tvarsToQuant @isQuLoc @lhs.fxTvM (tvMayQuFx @hereQu @lhs.fxTvM @isQuFxLoc) @lhs.tvIsBound @qHereTvS
%%]
SEM Ty
  | App Var     loc         .   (qBndTvS,qBndExTvS,tvIsBound)
                                                        :=  tvarsToQuant @isQuLoc @lhs.fxTvM (tvMayQuFx @hereQu @lhs.fxTvM @isQuFxLoc) @lhs.tvIsBound (@qHereTvS `Set.union` ftvSet @candPrL)

%%[9
SEM Ty
  | Pred        loc         .   (qBndTvS,qBndExTvS,tvIsBound)
                                                        =   tvarsToQuant @isQuLoc @lhs.fxTvM (const False) @lhs.tvIsBound @qHereTvS
%%]

%%[11
SEM Ty
  | Lam         loc         .   tvIsBound               =   tvBoundAdd @lhs.tvIsBound @introTVarS
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Which quantifier to use for quantification
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[4.hereQu
SEM TyAGItf
  | AGItf       loc         .   hereQu          =   TyQu_Forall

SEM Ty
  | App         loc         .   qAsExist        =   @appIsLikeProd || @lhs.coco == ContraVariant && not @appIsArrow
  | Var         loc         .   qAsExist        =   @lhs.coco == ContraVariant
  | App Var     loc         .   hereQu          =   if @qAsExist then TyQu_Exists else TyQu_Forall
  | Quant       loc         .   hereQu          =   @qu.self
%%]

%%[6.hereQu
ATTR TyAGItf AllTy [ baseQu: TyQu | | ]

SEM TyAGItf
  | AGItf       loc         .   hereQu          :=  @lhs.baseQu

SEM Ty
  | App Var     loc         .   hereQu          :=  if @qAsExist then tyquExists @lhs.baseQu else @lhs.baseQu
%%]

%%[9.hereQu
SEM Ty
  | App         loc         .   qAsExist        :=  (@appIsLikeProd || @lhs.coco == ContraVariant && not @appIsArrow)
  | Var         loc         .   qAsExist        :=  @lhs.coco == ContraVariant
%%]
SEM Ty
  | App         loc         .   qAsExist        :=  @hasNoInsPrL && (@appIsLikeProd || @lhs.coco == ContraVariant && not @appIsArrow)
  | Var         loc         .   qAsExist        :=  @hasNoInsPrL && @lhs.coco == ContraVariant

%%[9
SEM Ty
  | Pred        loc         .   qAsExist        =   @lhs.coco == ContraVariant
                            .   hereQu          =   if @qAsExist then tyquExists @lhs.baseQu else @lhs.baseQu
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Quantified type
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[4 hs
mkTyQuEx :: TyQu -> TyVarIdS -> TyVarIdS -> Ty -> Ty
mkTyQuEx q tvS tvExS t = mkTyQu q (Set.toList tvS) (mkTyQu (tyquExists q) (Set.toList tvExS) t)
%%]

%%[4.quTy
ATTR TyAGItf [ | | quTy: Ty ]
ATTR AllTyAndFlds [ | | quTy: SELF ]

SEM TyAGItf
  | AGItf       lhs         .   quTy            =   mkTyQuEx @hereQu @qBndTvS @qBndExTvS @ty.quTy

SEM Ty
  | Var         lhs         .   quTy            =   mkTyQuEx @hereQu @qBndTvS @qBndExTvS (Ty_Var @tv @categ.quTy)
  | App         loc         .   quTy            =   mkTyQuEx @hereQu @qBndTvS @qBndExTvS (Ty_App @func.quTy @arg.quTy)
  | Quant       lhs         .   quTy            =   Ty_Quant @qu.self @tv @ty.quTy
%%]

%%[9 hs
mkTyQuForRank :: Bool -> TyQu -> TyVarIdS -> TyVarIdS -> Ty -> Ty
mkTyQuForRank allow q tvS tvExS t = if allow then mkTyQuEx q tvS tvExS t else t
%%]

%%[9
SEM Ty
  | Var         lhs         .   quTy            :=  mkTyQuForRank @isQuRank @hereQu @qBndTvS @qBndExTvS $ Ty_Var @tv @categ.quTy
  | App         loc         .   quTy            :=  let  (rwYTvS,rwNTvS) = Set.partition (`Set.member` @frRowTvS) @qBndTvS
                                                    in   mkTyQuForRank @isQuRank @hereQu rwNTvS @qBndExTvS
                                                         $  mkTyQuForRank @isQuRank @lhs.baseQu rwYTvS Set.empty
                                                         $  Ty_App @func.quTy @arg.quTy
  | Pred        lhs         .   quTy            =   mkTyQuForRank @isQuRank @hereQu @qBndTvS @qBndExTvS (Ty_Pred @pr.quTy)
%%]

%%[11
SEM Ty
  | Lam         lhs         .   quTy            =   Ty_Lam @tv @ty.quTy
%%]

