%%[0
%include lhs2TeX.fmt
%include afp.fmt
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Haskell importable interface to Ty subst
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[2 hs module {%{EH}Ty.Trf.Subst} import({%{EH}Base.Common},{%{EH}Ty},{%{EH}VarMp})
%%]

%%[3 hs import(qualified Data.Map as Map)
%%]

%%[2.WRAPPER ag import({Ty/AbsSyn})
WRAPPER TyAGItf
%%]

%%[2.tyAppVarMp hs export(tyAppVarMp)
tyAppVarMp :: VarMp -> Ty -> Ty
tyAppVarMp varmp ty
  = repl_Syn_TyAGItf t
  where t = wrap_TyAGItf
              (sem_TyAGItf (TyAGItf_AGItf ty))
              (Inh_TyAGItf {varmp_Inh_TyAGItf = varmp})
%%]

%%[4 -2.tyAppVarMp hs export(tyAppVarMp,tyAppVarMp2)
tyAppVarMp' :: VarMp -> TVUseMp -> Ty -> (Ty,VarMp)
tyAppVarMp' varmp usemp ty
  = (repl_Syn_TyAGItf t,cycVarMp_Syn_TyAGItf t)
  where t = wrap_TyAGItf
              (sem_TyAGItf (TyAGItf_AGItf ty))
              (Inh_TyAGItf {varmp_Inh_TyAGItf = varmp, tvUseMp_Inh_TyAGItf = usemp})

tyAppVarMp :: VarMp -> Ty -> Ty
tyAppVarMp varmp ty
  = ty'
  where (ty',_) = tyAppVarMp' varmp Map.empty ty

tyAppVarMp2 :: VarMp -> Ty -> (Ty,VarMp)
tyAppVarMp2 varmp ty
  = tyAppVarMp' varmp Map.empty ty
%%]

%%[100 -4.tyAppVarMp hs export(tyAppVarMp,tyAppVarMp2)
tyAppVarMp' :: VarMp -> TVUseMp -> Ty -> (Ty,VarMp,Bool)
tyAppVarMp' varmp usemp ty
  = (repl_Syn_TyAGItf t,cycVarMp_Syn_TyAGItf t,isChanged_Syn_TyAGItf t)
  where t = wrap_TyAGItf
              (sem_TyAGItf (TyAGItf_AGItf ty))
              (Inh_TyAGItf {varmp_Inh_TyAGItf = varmp, tvUseMp_Inh_TyAGItf = usemp})

tyAppVarMp :: VarMp -> Ty -> Ty
tyAppVarMp varmp ty
  = if isChanged then ty' else ty
  where (ty',_,isChanged) = tyAppVarMp' varmp Map.empty ty

tyAppVarMp2 :: VarMp -> Ty -> (Ty,VarMp)
tyAppVarMp2 varmp ty
  = if isChanged then (ty',m) else (ty,emptyVarMp)
  where (ty',m,isChanged) = tyAppVarMp' varmp Map.empty ty
%%]

%%[10
WRAPPER LabelAGItf
%%]

%%[10 hs export(labelAppVarMp)
labelAppVarMp varmp label
  = repl_Syn_LabelAGItf t
  where t = wrap_LabelAGItf
              (sem_LabelAGItf (LabelAGItf_AGItf label))
              (Inh_LabelAGItf {varmp_Inh_LabelAGItf = varmp})
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% TyVar usage kind
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[3 hs
data TVUse
  = TVBound		-- is already bound
%%[[4
  | TVSubst		-- is being substituted (for occur check implementation)
%%]]

type TVUseMp = Map.Map TyVarId TVUse
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Utils
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[3 hs
type IsBound = TyVarId -> Bool
%%]

%%[3.tvRepl hs
tvRepl :: TyVarId -> VarMp -> TVUseMp -> Ty -> Ty
tvRepl tv vmp ump repl
  = case (varmpTyLookup tv vmp) of
       Just t | not (tv `Map.member` ump)  -> t
       _                                   -> repl
%%]

%%[4.tvRepl -3.tvRepl hs
tvRepl :: TyVarId -> VarMp -> TVUseMp -> Ty -> (Ty,VarMp)
tvRepl tv vmp ump repl
  = case (varmpTyLookup tv vmp,Map.lookup tv ump) of
       (Just t,Nothing)       -> tyAppVarMp' vmp (Map.insert tv TVSubst ump) t
       (Just t,Just TVBound)  -> (repl,emptyVarMp)
       (Just t,Just TVSubst)  -> (t,varmpTyUnit tv t)
       _                      -> (repl,emptyVarMp)
%%]

20070622: not sorted out properly:

%%[100 -4.tvRepl hs
tvRepl :: TyVarId -> VarMp -> TVUseMp -> Maybe (Ty,VarMp)
tvRepl tv vmp ump
  = case (varmpTyLookup tv vmp) of
       (Just t,Nothing)       -> Just (tyAppVarMp' vmp ump t)
       (Just t,Just TVBound)  -> Nothing
       (Just t,Just TVSubst)  -> Just (t,varmpFilter (\k _ -> k == tv) vmp)
       _                      -> Nothing

repl :: x -> Maybe (x,VarMp) -> (x,VarMp,Bool)
repl x = maybe (x,emptyVarMp,False) (\(x',cm) -> (x',cm,True))
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Is changed?
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[100
ATTR TyAGItf AllTyAndFlds [ | | isChanged USE {||} {False}: Bool ]
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% TyVar usage
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[3
ATTR
  AllTy
%%[[4
  TyAGItf
%%]]
    [ tvUseMp: TVUseMp | | ]

SEM Ty
  | Quant
%%[[11
    Lam
%%]]
                    ty      .   tvUseMp     =   Map.insert @tv TVBound @lhs.tvUseMp
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Cycle detection, delayed occur check
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[4
ATTR TyAGItf AllTy  [ | | cycVarMp USE {`varmpPlus`} {emptyVarMp}: VarMp ]
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Apply substitution
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[2.TySubst
ATTR TyAGItf AllTy  [ varmp: VarMp  | |             ]
ATTR AllTyAndFlds   [               | | repl: SELF  ]
ATTR TyAGItf        [               | | repl: Ty    ]
%%]

%%[10
ATTR LabelAGItf Label  [ varmp: VarMp  | |             ]
ATTR LabelAGItf        [               | | repl: Label    ]
%%]

%%[2
SEM Ty
  | Var             lhs     .   repl        =   maybe @repl id (varmpTyLookup @tv @lhs.varmp)
%%]

%%[3
SEM Ty
  | Var             lhs     .   repl        :=  tvRepl @tv @lhs.varmp @lhs.tvUseMp @repl
%%]

%%[4
SEM Ty
  | Var             lhs     .   (repl,cycVarMp)
  											:=  tvRepl @tv @lhs.varmp @lhs.tvUseMp @repl
%%]

%%[100
SEM Ty
  | Var             lhs     .   (repl,cycVarMp,isChanged)
                                            :=  repl @repl $ tvRepl @tv @lhs.varmp @lhs.tvUseMp
%%]

%%[9
SEM Impls
  | Tail            lhs     .   repl        =   maybe @repl id (varmpImplsLookup @iv @lhs.varmp)

SEM Pred
  | Var             lhs     .   repl        =   maybe @repl id (varmpPredLookup @pv @lhs.varmp)
%%]

%%[100
SEM Impls
  | Tail            lhs     .   (repl,isChanged)
                                            :=  repl @repl $ varmpImplsLookup @iv @lhs.varmp

SEM Pred
  | Var             lhs     .   (repl,isChanged)
                                            :=  repl @repl $ varmpPredLookup @pv @lhs.varmp
%%]

%%[10
SEM Label
  | Var             lhs     .   repl        =   maybe @repl id (varmpLabelLookup @lv @lhs.varmp)

SEM RowExts
  | Exts            lhs     .   repl        =   RowExts_Exts $ assocLMapElt (tyAppVarMp @lhs.varmp) @exts
  | Var             lhs     .   repl        =   maybe @repl id (varmpExtsLookup @ev @lhs.varmp)
%%]

%%[100
SEM Label
  | Var             lhs     .   (repl,isChanged)
                                            :=  repl @repl $ varmpLabelLookup @lv @lhs.varmp

SEM RowExts
  | Exts            lhs     .   (repl,isChanged)
                                            :=  let (ls,ts) = unzip @exts
                                                    (ts',chs) = unzip $ map (tyAppVarMp' @lhs.varmp) ts
                                                in  (RowExts_Exts $ zip ls ts',or chs)
  | Var             lhs     .   (repl,isChanged)
                                            :=  repl @repl $ varmpExtsLookup @ev @lhs.varmp
%%]

%%[13
SEM PredSeq
  | Var             lhs     .   repl        =   maybe @repl id (varmpPredSeqLookup @av @lhs.varmp)
%%]

%%[100
SEM PredSeq
  | Var             lhs     .   (repl,isChanged)
                                            :=  repl @repl $ varmpPredSeqLookup @av @lhs.varmp
%%]


