%%[0
%include lhs2TeX.fmt
%include afp.fmt
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Haskell importable interface to Ty subst
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[2 hs module {%{EH}Ty.Ftv} import(Data.List,{%{EH}Base.Common},{%{EH}Ty})
%%]

%%[4 hs import(qualified Data.Map as Map)
%%]

%%[2.WRAPPER ag import({Ty/AbsSyn})
WRAPPER TyAGItf
%%]

%%[2.tyFtv hs export(tyFtv)
tyFtv :: Ty -> TyVarIdL
tyFtv ty
  =  let  t =  wrap_TyAGItf
                 (sem_TyAGItf (TyAGItf_AGItf ty))
                 (Inh_TyAGItf)
     in   tvs_Syn_TyAGItf t
%%]

%%[4.tyFtv -2.tyFtv hs export(tyFtvMp,tyFtv)
tyFtvMp :: Ty -> TvCatMp
tyFtvMp ty
  =  let  t =  wrap_TyAGItf
                 (sem_TyAGItf (TyAGItf_AGItf ty))
                 (Inh_TyAGItf)
     in   tvMp_Syn_TyAGItf t

tyFtv :: Ty -> TyVarIdL
tyFtv = Map.keys . tyFtvMp
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Extract ty vars
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[2.TyFtv
ATTR TyAGItf AllTy  [ | | tvs USE {`union`} {[]}: TyVarIdL ]

SEM Ty
  | Var             lhs     .   tvs         =   [@tv]
%%]

%%[3.TyFtv
SEM Ty
  | Quant           lhs     .   tvs         =   @tv `delete` @ty.tvs
%%]

%%[4 -(2.TyFtv 3.TyFtv)
ATTR TyAGItf AllTy  [ | | tvMp USE {`Map.union`} {Map.empty}: TvCatMp ]
ATTR TyVarCateg [ | | self: SELF ]

SEM Ty
  | Var             lhs     .   tvMp        =   @tv `Map.singleton` @categ.self
  | Quant
%%[[11
    Lam
%%]]
                    lhs     .   tvMp        =   @tv `Map.delete` @ty.tvMp 
%%]

%%[10
%%]
SEM Pred
  | RowSplit		lhs		.	tvMp		=	Map.unions [@ty.tvMp,@exts.tvMp] 

SEM RowExts
  | Exts			lhs		.	tvMp		=	Map.unions [ tyFtvMp t | (_,t) <- @exts ] 

%%[13
SEM PredSeq
  | Var  			lhs		.	tvMp		=	@av `Map.singleton` TyVarCateg_Plain
%%]

%%[50
SEM Ty
  | Equal           lhs     .   tvs         =   [@tv] `union` @ty.tvs
%%]

