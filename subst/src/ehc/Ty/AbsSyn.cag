%%[0
%include lhs2TeX.fmt
%include afp.fmt
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Abstract syntax for Ty
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Top level
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[1.TyAGItf
DATA TyAGItf
  | AGItf       ty              : Ty
%%]

%%[10
DATA LabelAGItf
  | AGItf       lab            	: Label
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Type structure
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[1.Ty
DATA Ty
  | Con         nm              : {HsName}
  | App         func            : Ty
                arg             : Ty
  | Any
%%]

%%[2.TyVar
DATA Ty
  | Var         tv              : {TyVarId}
%%]

%%[3.TyVar -2.TyVar
DATA Ty
  | Var         tv              : {TyVarId}
                categ           : TyVarCateg

DATA TyVarCateg
  | Plain
  | Fixed
%%]

%%[3.Quant
DATA Ty
  | Quant       tv              : {TyVarId}
                ty              : Ty
%%]

%%[4.Quant -3.Quant
DATA Ty
  | Quant       qu              : TyQu
                tv              : {TyVarId}
                ty              : Ty

DATA TyQu
  | Forall
  | Exists
%%]

%%[4_2.TyBoth
DATA Ty
  | Both        tv              : {TyVarId}
                tyL             : TyL

TYPE TyL        =   [Ty]
%%]

%%[4_2.TyAlts
DATA Ty
  | Alts        tv              : {TyVarId}
                tyL             : TyPlusL
%%]

%%[6.TyQu
DATA TyQu
  | KiForall
  | KiExists
%%]

%%[6_4
DATA TyVarCateg
  | Exist
%%]

Adds an annotation to the type expression. The annotation can be added at any
place, though typical places of an annotation are just above a type variable
and type constructor.

Normal type inference doesn't add these annotations. We infuse these annotations
to a Ty, after type inference has been performed. We've added the annotations
in such a way that a computation on a Ty that does not need annotations, can
just behave as if they do not exist and let copy-rules do the remainder.

%%[7_2.annotation
DATA Ty
  | Ann         ann             : {Annotation Ty}
                ty              : Ty
%%]

Type constructors are special in our case. It is either an expanded type
constructor, exposing the contents of the data type it represents, or a
truncated one, hiding the contents. Expansions means that a data type is
unfolded given it's type arguments. Expansion should be tightly controlled,
because it could lead easily to enourmous types, or not terminate.

Note: We will not expand a data type without constructors. It is useless
      since basic annotation works already for that.

%%[7_2.annotationExp
DATA Ty
  | ExpTyCon    constrs         : TyExpConstrs
                args            : {[TyVarId]}
                ty              : Ty
    
  | TruncTyCon  anns            : {Annotations Ty}
                ty              : Ty

TYPE TyExpConstrs = [TyExpConstr]

DATA TyExpConstr
  | Constr      nm              : {HsName}
                fields          : TyExpFields

TYPE TyExpFields = [TyExpField]

DATA TyExpField
  | Field       ty              : Ty
%%]

%%[7.Ty
DATA Ty
  | Ext         ty              : Ty
                nm              : {HsName}
                extTy           : Ty
%%]

%%[9.Ty
DATA Ty
  | Pred        pr              : Pred
  | Impls       impls           : Impls

DATA Impls
  | Tail        iv              : {ImplsVarId}
                proveOccs		: {[ImplsProveOcc]}
  | Cons        iv              : {ImplsVarId}
                pr              : Pred
                pv              : {PredOccId}
                proveOccs		: {[ImplsProveOcc]}
                tl              : Impls
  | Nil
%%]

%%[11
DATA Ty
  | Lam         tv              : {TyVarId}
                ty              : Ty
%%]

%%[50.Ty
DATA Ty
  | Equal       tv              : {TyVarId}
                ty              : Ty
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Type plus additional info
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[4_2.TyPlus
DATA TyPlus
  | Ty          ty              : Ty
                hardness        : {TyHardness}
                offering        : {TyNeed}
%%]

%%[9_1.TyPlus -4_1.TyPlus
DATA TyPlus
  | Ty          ty              : Ty
                plv             : {TyPlusId}
%%]

%%[4_2.TyPlusL
TYPE TyPlusL    =   [TyPlus]
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Predicates
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[9
DATA Pred
  | Class       ty              : Ty
  | Pred        ty              : Ty
%%]

%%[10
DATA Pred
  | Lacks       ty              : Ty
                lab             : Label
%%]

%%[10
DATA Label
  | Lab			nm              : HsName
%%]

%%[13
DATA Pred
  | Arrow       args            : PredSeq
                res             : Pred

DATA PredSeq
  | Cons        hd              : Pred
                tl              : PredSeq
  | Nil
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% CHR specific
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[9
DATA Pred
  | Var         pv              : TyVarId
%%]

%%[10
DATA Label
  | Var			lv              : LabelVarId		
%%]

%%[13
DATA PredSeq
  | Var         av              : TyVarId

DATA Pred
  | Preds       seq             : PredSeq
%%]

RowSplit is not used, but left in for now:

%%[10
%%]
DATA Pred
  | RowSplit	ty				: Ty				
  				exts			: RowExts

%%[10
%%]
DATA RowExts										
  | Exts		exts			: {AssocL HsName Ty}
  | Var			ev              : UID

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% SET's
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[1
SET AllTyTy
  = Ty
%%[[4_2
    TyL TyPlus TyPlusL
%%]]
%%[[7_2
    TyExpConstrs TyExpConstr TyExpFields TyExpField
%%]]
%%]

%%[1
SET AllTy
  = AllTyTy
%%[[9
    Pred Impls
%%]]
%%[[10
%%]]
%%[[13
    PredSeq
%%]]
%%]
    RowExts

%%[1
SET AllTyAndFlds
  = AllTy
%%[[3
    TyVarCateg
%%]]
%%[[4
    TyQu
%%]]
%%[[10
    Label
%%]]
%%]

Less concise version:

%%[1.AllTy
%%]
SET AllTyTy         = Ty
SET AllTy           = AllTyTy
SET AllTyAndFlds    = AllTy

%%[3.AllTy -1.AllTy
%%]
SET AllTyTy         = Ty
SET AllTy           = AllTyTy
SET AllTyAndFlds    = AllTy TyVarCateg

%%[4.AllTy -3.AllTy
%%]
SET AllTyTy         = Ty
SET AllTy           = AllTyTy
SET AllTyAndFlds    = AllTy TyVarCateg TyQu

%%[4_2.AllTy -4.AllTy
%%]
SET AllTyTy         = Ty TyL TyPlus TyPlusL
SET AllTy           = AllTyTy
SET AllTyAndFlds    = AllTy TyVarCateg TyQu

%%[7_2.AllTy -4.AllTy
%%]
SET AllTyTy         = Ty TyExpConstrs TyExpConstr TyExpFields TyExpField
SET AllTy           = AllTyTy
SET AllTyAndFlds    = AllTy TyVarCateg TyQu

%%[9.AllTy -4.AllTy
%%]
SET AllTyTy         = Ty
SET AllTy           = AllTyTy Pred Impls
SET AllTyAndFlds    = AllTy TyVarCateg TyQu

%%[9_1.AllTy -4_2.AllTy
%%]
SET AllTyTy         = Ty TyL TyPlus TyPlusL
SET AllTy           = AllTyTy Pred Impls
SET AllTyAndFlds    = AllTy TyVarCateg TyQu

%%[10.AllTy -9.AllTy
%%]
SET AllTyTy         = Ty
SET AllTy           = AllTyTy Pred Impls Label
SET AllTyAndFlds    = AllTy TyVarCateg TyQu

