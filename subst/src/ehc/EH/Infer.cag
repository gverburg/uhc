%%[0
%include lhs2TeX.fmt
%include afp.fmt
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Let expressions
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

-- generated from ruler rules into EHRulerRules, was 1.Let
%%[5.Let
SEM Expr
  | Let         loc         .   gathTySigGam_l_     =   @decls.gathTySigGam
                decls       .   patValGam           =   gamPushGam @gathTySigGam_l_ @lhs.valGam
                loc         .   (valGam_l_,valGam_g_)
                                                    =   gamPop @decls.patValGam
                decls       .   valGam              =   @decls.patValGam
                body        .   valGam              =   @decls.patValGam
%%]

-- generated from ruler rules into EHRulerRules, was 2.Let
%%[5.Let
SEM Expr
  | Let         decls       .   patTyVarMp          =   @lhs.tyVarMp
                            .   tyVarMp             =   @decls.patTyVarMp
%%]

-- generated from ruler rules into EHRulerRules, was 3.Let
%%[5.Let
SEM Expr
  | Let         loc         .   lSubsValGam_        =   @decls.tyVarMp |=> @valGam_l_
                            .   gSubsValGam_        =   @decls.tyVarMp |=> @valGam_g_
                            .   gTyTvL              =   ftv @gSubsValGam_
                            .   quValGam_           =   valGamQuantify @gTyTvL @lSubsValGam
                body        .   valGam              :=  gamPushGam @quValGam_ @gSubsValGam_
%%]

-- generated from ruler rules into EHRulerRules, was 4.Let
%%[5.Let
SEM Expr
  | Let         loc         .   gathTySigGam_l_     :=  valGamInst1Exists @lUniq @decls.gathTySigGam
                loc         .   quValGam_ex_        :=  valGamInst1Exists @lUniq2 . valGamQuantify @gTyTvL $ @lSubsValGam_
                            .   quValGam_           :=  emptyGam
                body        .   valGam              :=  gamPushGam @quValGam_ex_ @gSubsValGam_
%%]

%%[4_2 hs
valElimExprAlts :: FIOpts -> FIEnv -> TyVarIdL -> UID -> VarMp -> ValGam -> (ValGam,VarMp,ErrGam)
valElimExprAlts fio fe globTvL u c g
  = (g',c'',eg)
  where  (g',c',eg) = valGamElimAlts fio fe globTvL u c g
         c'' = varmpDelAlphaRename c'
%%]

-- generated from ruler rules into EHRulerRules, was 4_2.Let
%%[90.Let
SEM Expr
  | Let         decls       .   tySigTyVarMp        =   emptyVarMp
                loc         .   (_,lExSigTyVarMp)   =   valGamInst1ExistsWithVarMp @decls.tySigTyVarMp @lUniq @decls.gathTySigGam
                            .   lExplTyVarMp        =   @lExSigTyVarMp |=> @decls.tySigTyVarMp
                decls       .   patValGam           :=  gamPushGam @decls.gathTySigGam @lhs.valGam
                            .   patTyVarMp          :=  @lExplTyVarMp
                            .   imprTyVarMp         =   @decls.patTyVarMp |=> @lhs.imprTyVarMp
                loc         .   (_,imprTyVarMp_elim_,_)
                                                    =   valElimExprAlts joinFIOpts @fe (ftv @valGam_g_) @lUniq4 @decls.imprTyVarMp @valGam_l_
                decls       .   tyVarMp             :=  @imprTyVarMp_elim_ |=> @decls.patTyVarMp |=> @lhs.tyVarMp
                loc         .   (quValGam_ex_,lQuTyVarMp)
                                                    :=  let  (g1,c1) = valGamQuantifyWithVarMp @decls.tyVarMp @gTyTvL @valGam_l_
                                                             (g2,c2) = valGamInst1ExistsWithVarMp (c1 |=> @decls.tyVarMp) @lUniq2 g1
                                                        in   (g2,c2 |=> c1)
                body        .   imprTyVarMp         =   @imprTyVarMp_elim_ |=> @decls.imprTyVarMp
                            .   tyVarMp             :=  @lQuTyVarMp |=> @decls.tyVarMp
                            .   valGam              :=  @decls.patValGam
%%]

%%[9
SEM Expr
  | Let         loc         .   (quValGam_ex_,tqoGam)
                                                    :=  let  (vg,tqog) = valGamQuantify @gTyTvL @quantPrOccL @lSubsValGam_
                                                        in   (valGamInst1Exists @lUniq2 vg,tqog)
                            .   tmpoTyVarMp         =   foldr (\tmpo c -> tmpoImplsVarMp tmpo |=> c) emptyVarMp (gamElts @tqoGam)
%%]

%%[50
%%]
SEM Expr
  | Let         loc         .   lElimEqualValGam    =   valGamElimEqual (@decls.tyVarMp |=> @valGam_l_)
                            .   lSubsValGam_        :=  @lElimEqualValGam

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Known type and instantiation required
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

-- generated from ruler rules into EHRulerRules, was 1.tyInstKnown
%%[5.tyInstKnown
SEM Decl
  | Val         loc         .   knTy                =   @ty_sig_
%%]

-- generated from ruler rules into EHRulerRules, was 2.tyInstKnown
%%[5.tyInstKnown
SEM Decl
  | Val         expr        .   knTy                =   if @hasTySig then @knTy else @patExpr.ty
%%]

-- generated from ruler rules into EHRulerRules, was 3.tyInstKnown
%%[5.tyInstKnown
SEM Decl
  | Val         loc         .   knTy                :=  tyInstKnown @lUniq @ty_sig_
%%]

-- generated from ruler rules into EHRulerRules, was 4.tyInstKnown
%%[5.tyInstKnown
SEM Decl
  | Val         loc         .   knTy                :=  @ty_sig_
%%]

%%[9.tyInstKnown
%%]

SEM Decl
  | Val         expr        .   knTy                :=  if @hasTySig  then @knTy
                                                                      else [mkImplsVar @lUniq2] `mkArrow` @patExpr.ty

%%[1010.tyInstKnown
SEM Decl
  | DynVal      loc         .   knTy                =   Ty_Any
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Final type
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[2.finValGam
ATTR AllDecl [ finValGam: ValGam | | ]
ATTR AllNT [ finTyVarMp: VarMp | | ]

SEM Expr
  | Let         loc         .   finValGamDecls      =   @lhs.finTyVarMp |=> (gamTop @decls.patValGam)
                decls       .   finValGam           =   @finValGamDecls

SEM Decl
  | TySig       loc         .   finalTy             =   vgiTy $ fromJust
                                                        $ valGamLookup @nm $ @lhs.finValGam

SEM AGItf
  | AGItf       expr        .   finTyVarMp          =   @expr.tyVarMp
%%]

%%[3.finValGam
SEM Expr
  | Let         loc         .   finValGamDecls      :=  @lhs.finTyVarMp |=> @quValGam_
%%]

%%[4.finValGam
SEM Expr
  | Let         loc         .   finValGamDecls      :=  @lhs.finTyVarMp |=> @quValGam_ex_
%%]

%%[9
SEM Expr
  | Let         loc         .   finTyVarMp          =   @tmpoTyVarMp |=> @lhs.finTyVarMp
%%]

%%[1010
SEM Decl
  | DynTySig    loc         .   finalTy             =   vgiTy . fromJust
                                                        . valGamLookup @nm $ @lhs.finValGam
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Final kind
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[7.finTyGam
ATTR AllNT [ finKiVarMp: VarMp | | ]

SEM AGItf
  | AGItf       expr        .   finKiVarMp          =   @expr.kiVarMp
%%]

%%[7
%%]
ATTR AllNT [ finTyGam: TyGam |  | ]

SEM AGItf
  | AGItf       expr        .   finTyGam            =   emptyGam

SEM Expr
  | Let         loc         .   finTyGam            =   @lhs.finKiVarMp |=> @decls.patTyGam

%%[7
ATTR AllNT [ finTyKiGam: TyKiGam |  | ]

SEM AGItf
  | AGItf       expr        .   finTyKiGam          =   emptyGam

SEM Expr
  | Let         loc         .   finTyKiGam          =   @lhs.finKiVarMp |=> @decls.patTyKiGam

%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Known kind
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[6
SEM Decl
  | Data
%%[[11
    Type
%%]]
                loc         .   knKi                =   @sigKi
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Type inferencing, decls, top level, abstraction
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[1.valGam
ATTR
  AllDecl AllExpr
%%[[5
  AllDataConstr AllCase
%%]]
    [ valGam: ValGam | | ]
ATTR AllPatExpr [ | valGam: ValGam | ]
%%]

%%[1.initValGam
SEM AGItf
  | AGItf       expr        .   valGam              =   emptyGam
%%]

%%[20 -1.initValGam
ATTR AGItf [ valGam: ValGam | | ]
%%]

%%[1.patValGam
ATTR AllDecl [ | patValGam: ValGam | ]
%%]

-- generated from ruler rules into EHRulerRules, was 1.patValGam.Val
%%[5.patValGam.Val
SEM Decl
  | Val         patExpr     .   valGam              =   @lhs.patValGam
                lhs         .   patValGam           =   @patExpr.valGam
                expr        .   valGam              =   @lhs.valGam
%%]

%%[2.tyVarMp
ATTR AllDecl [ | tyVarMp: VarMp  patTyVarMp: VarMp | ]

SEM AGItf
  | AGItf       expr        .   tyVarMp             =   emptyVarMp
%%]

%%[5
ATTR AllCase [ | tyVarMp: VarMp | ]
%%]

-- generated from ruler rules into EHRulerRules, was 2.tyVarMp.Val
%%[5.tyVarMp.Val
SEM Decl
  | Val         patExpr     .   tyVarMp             =   @lhs.patTyVarMp
                lhs         .   patTyVarMp          =   @patExpr.tyVarMp
                expr        .   tyVarMp             =   @lhs.tyVarMp
%%]

%%[4_2
ATTR AllDecl AllExpr [ | imprTyVarMp: VarMp | ]

SEM AGItf
  | AGItf       expr        .   imprTyVarMp         =   emptyVarMp
%%]

-- generated from ruler rules into EHRulerRules, was 4_2.Val
%%[90.Val
SEM Decl
  | Val         loc         .   imprFO              =   fitsIn impredFIOpts @fe uidStart @expr.imprTyVarMp (@expr.imprTyVarMp |=> @patExpr.ty) @expr.imprTy
                lhs         .   imprTyVarMp         =   foVarMp @imprFO |=> @expr.imprTyVarMp
%%]
SEM AGItf
  | AGItf       expr        .   tyVarMp             :=  emptyVarMp

SEM AGItf
  | AGItf       loc         .   (exprTyVarMp1,ambTvS)
                                                    =   cnstrElimForgetAlts @expr.imprTyVarMp
                            .   exprTyVarMp         =   let (eC,(vC,_))
                                                              =  varmpMapThrTy  (\v t (c,u) ->  let  (u',u1) = mkNewLevUID u
                                                                                                     (t',c') = tyFreshVar (`Set.member` @ambTvS) u1 c t
                                                                                                in   (t',(c',u'))
                                                                                )
                                                                                (emptyVarMp,@lUniq)
                                                                 @exprTyVarMp1
                                                        in  eC
                expr        .   tyVarMp             :=  emptyVarMp

SEM AGItf
  | AGItf       loc         .   (exprTyVarMp1,ambTvS)
                                                    =   cnstrElimForgetAlts @expr.imprTyVarMp
                            .   exprTyVarMp         =   let (eC,(vC,_))
                                                              =  varmpMapThrTy  (\v t (c,u) ->  let  (u',u1) = mkNewLevUID u
                                                                                                     (t',c') = tyFreshVar (`Set.member` @ambTvS) u1 c t
                                                                                                in   (t',(c',u'))
                                                                                )
                                                                                (emptyVarMp,@lUniq)
                                                                 @exprTyVarMp1
                                                        in  eC
                expr        .   tyVarMp             :=  @exprTyVarMp1

                            .   exprTyVarMp         =   fst
                                                        .  varmpMapThrTy (\v t u -> let (u',u1) = mkNewLevUID u in (tyFreshVar (const True) u1 t,u')) @lUniq
                                                        $  @exprTyVarMp1

%%[5_2
ATTR AllCase [ | imprTyVarMp: VarMp | ]
%%]

%%[50
SEM Decl
  | Val         loc         .   (_,elimEqVarMp)     =   tyElimEqual @expr.ty
                lhs         .   tyVarMp             =   @elimEqVarMp |=> @expr.tyVarMp
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Kind inferencing, decls, top level, abstraction
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Decl should merge with one in InferTyExpr

%%[1.tyGam
ATTR AllDecl AllExpr [ tyGam: TyGam | | ]
%%]

%%[3
%%]
SEM Decl
  | TySig       lhs         .   tyGam               =   @lhs.tyGam

%%[4
ATTR AllPatExpr [ | tyGam: TyGam | ]
%%]

%%[5
ATTR AllDataConstr AllCase [ tyGam: TyGam | | ]
ATTR AllDecl [ | patTyGam: TyGam | ]
%%]

%%[5
SEM Expr
  | Let         decls       .   patTyGam            =   gamPushNew @lhs.tyGam
                            .   tyGam               =   @decls.patTyGam
%%]

%%[7
ATTR AllDataField [ | tyGam: TyGam | ]
%%]

%%[50
ATTR AllDataConstrEq [ | tyGam: TyGam | ]
%%]

%%[6
ATTR AllDecl AllExpr AllDataConstr AllCase [ tyKiGam: TyKiGam | | ]
ATTR
  AllPatExpr
%%[[7
  AllDataField
%%]]
    [ | tyKiGam: TyKiGam | ]
%%]

%%[6
ATTR AllDecl [ | patTyKiGam: TyKiGam | ]
%%]

%%[6
ATTR AllExpr AllPatExpr AllData AllCase AllDecl [ | kiVarMp: VarMp | ]
ATTR AllDecl [ | patKiVarMp: VarMp | ]
%%]

%%[6
SEM Expr
  | Let         decls       .   patTyGam            :=  gamPushGam @decls.gathKiSigGam @lhs.tyGam
                            .   patTyKiGam          =   gamPushGam @decls.gathTyKiSigGam @lhs.tyKiGam
                            .   patKiVarMp          =   @lhs.kiVarMp
                loc         .   (tyGam_l_,tyGam_g_) =   gamPop @decls.patTyGam
                            .   (tyKiGam_l_,tyKiGam_g_)
                            						=   gamPop @decls.patTyKiGam
                decls       .   tyGam               :=  gamPushGam @tyGam_l_ @lhs.tyGam
                            .   tyKiGam             =   gamPushGam @tyKiGam_l_ @lhs.tyKiGam
                            .   kiVarMp             =   @decls.patKiVarMp
                loc         .   lSubsTyKiGam        =   @decls.kiVarMp |=> @tyKiGam_l_
                            .   gSubsTyKiGam        =   @decls.kiVarMp |=> @tyKiGam_g_
                            .   gKiTvL              =   ftv @gSubsTyKiGam
                            .   lQuTyKiGam          =   tyKiGamInst1Exists @lUniq3 . tyKiGamQuantify @gKiTvL $ @lSubsTyKiGam
                body        .   tyGam               =   gamAddGam @tyGam_l_ @tyGam_g_
                            .   tyKiGam             =   gamAddGam @lQuTyKiGam @gSubsTyKiGam
%%]
                            .   gKiTvL              =   ftv @gSubsTyGam

%%[6
SEM Decl
  | TySig       tyExpr      .   tyGam               =   gamPushNew @lhs.tyGam
                            .   tyKiGam             =   gamPushNew @lhs.tyKiGam
                loc         .   fo_                 =   fitsIn weakFIOpts emptyFE @lUniq2 @tyExpr.kiVarMp @tyExpr.ki kiStar
                lhs         .   kiVarMp             =   foVarMp @fo_ |=> @tyExpr.kiVarMp
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Gamma/Environment for fitting
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[4.Decl.fe
SEM Decl
  | *           loc         .   fe                  =   emptyFE
%%]

%%[11 -4.Decl.fe
SEM Decl
  | *           loc         .   fe                  =   emptyFE
                                                            { feTyGam = @lhs.tyGam
%%[[99
                                                            , feRange = @range
%%]]
                                                            }
%%]

%%[9
SEM Decl
  | Instance    loc         .   fe                  :=  emptyFE
                                                            { feEHCOpts = @lhs.opts
                                                            , fePredScope = @lhs.predScope
%%[[11
                                                            , feTyGam = @lhs.tyGam
%%]]
%%[[99
                                                            , feRange = @range
%%]]
                                                            }
                            .   fe2                 =   emptyFE
%%[[11
                                                            { feTyGam = @lhs.tyGam
%%[[99
                                                            , feRange = @range
%%]]
                                                            }
%%]]
%%]

%%[4.FIEnv
SEM Expr
  | *           loc         .   fe                  =   emptyFE
%%]

%%[7.FIEnv
SEM RecExpr
  | *           loc         .   fe                  =   emptyFE

SEM DataFieldExpr
  | *           loc         .   fe                  =   emptyFE
%%]

%%[9.FIEnv -(4.FIEnv 7.FIEnv)
SEM Expr
  | Let         loc         .   fe                  =   emptyFE
                                                            { feEHCOpts = @lhs.opts
                                                            , fePredScope = @lhs.predScope
%%[[11
                                                            , feTyGam = @lhs.tyGam
%%]]
%%[[99
                                                            , feRange = @range
%%]]
                                                            }
  | Lam AppTop
%%[[12
    LamImpl
%%]]
                loc         .   fe                  =   emptyFE
                                                            { feEHCOpts = @lhs.opts
                                                            , fePredScope = @predScope
%%[[11
                                                            , feTyGam = @lhs.tyGam
%%]]
%%[[99
                                                            , feRange = @range
%%]]
                                                            }
  | * - Lam AppTop Let
%%[[12
    LamImpl
%%]]
                loc         .   fe                  =   emptyFE
                                                            { feEHCOpts = @lhs.opts
                                                            , fePredScope = @lhs.predScope
%%[[11
                                                            , feTyGam = @lhs.tyGam
%%]]
%%[[99
                                                            , feRange = @range
%%]]
                                                            }

SEM RecExpr
  | *           loc         .   fe                  =   emptyFE
                                                            { feEHCOpts = @lhs.opts
                                                            , fePredScope = @lhs.predScope
%%[[11
                                                            , feTyGam = @lhs.tyGam
%%]]
%%[[99
                                                            , feRange = @range
%%]]
                                                            }

SEM DataFieldExpr
  | *           loc         .   fe                  =   emptyFE
                                                            { feEHCOpts = @lhs.opts
                                                            , fePredScope = @lhs.predScope
%%[[11
                                                            , feTyGam = @lhs.tyGam
%%]]
%%[[99
                                                            , feRange = @range
%%]]
                                                            }
%%]

%%[4
SEM PatExpr
  | *           loc         .   fe                  =   emptyFE
%%[[9
                                                            { feEHCOpts = @lhs.opts
                                                            , fePredScope = @lhs.predScope
%%[[11
                                                            , feTyGam = @lhs.tyGam
%%]]
%%[[99
                                                            , feRange = @range
%%]]
                                                            }
%%]]
%%]

%%[7
SEM RecPatExpr
  | *           loc         .   fe                  =   emptyFE
%%[[9
                                                            { feEHCOpts = @lhs.opts
                                                            , fePredScope = @lhs.predScope
%%[[11
                                                            , feTyGam = @lhs.tyGam
%%]]
%%[[99
                                                            , feRange = @range
%%]]
                                                            }
%%]]
%%]

%%[7
SEM DataFieldPatExpr
  | *           loc         .   fe                  =   emptyFE
%%[[9
                                                            { feEHCOpts = @lhs.opts
                                                            , fePredScope = @lhs.predScope
%%[[11
                                                            , feTyGam = @lhs.tyGam
%%]]
%%[[99
                                                            , feRange = @range
%%]]
                                                            }
%%]]
%%]

%%[4
SEM TyExpr
  | *           loc         .   fe                  =   emptyFE
%%]

%%[9
SEM PrExpr
  | *           loc         .   fe2                 =   emptyFE
%%[[11
                                                            { feTyGam = @lhs.tyGam }
%%]]
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Id of case
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[8
SEM Expr
  | Case        loc         .   caseIds     =   maybe (Set.singleton uidStart) id @mbCaseIds
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% RCEEnv (primarily for ToCore)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[8
SEM Expr
  | Lam Sel DataFields
%%[[12
    LamImpl
%%]]
                loc         .   rceEnv      =   (emptyRCEEnv @lhs.opts) { rceValGam = @lhs.valGam, rceDataGam = @lhs.dataGam }
  | Case        loc         .   rceEnv      =   (emptyRCEEnv @lhs.opts)
                                                            { rceValGam  = @lhs.valGam, rceDataGam = @lhs.dataGam
                                                            , rceCaseIds = @caseIds
                                                            }
%%]

%%[8
SEM PatExpr
  | AppTop Rec DataFields
                loc         .   rceEnv      =   (emptyRCEEnv @lhs.opts) { rceValGam = @lhs.valGam, rceDataGam = @lhs.dataGam }
%%]

%%[8
SEM Decl
  | Data        loc         .   rceEnv      =   (emptyRCEEnv @lhs.opts) { rceValGam = @lhs.valGam, rceDataGam = @lhs.dataGam }
%%]

%%[95
SEM Decl
  | Instance    loc         .   rceEnv      =   (emptyRCEEnv @lhs.opts) { rceValGam = @lhs.valGam, rceDataGam = @lhs.dataGam }
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Init of tyGam
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[1.initTyGam
SEM AGItf
  | AGItf       loc         .   tyGam               =   initTyGam
%%]

%%[2.initTyGam -1.initTyGam
SEM AGItf
  | AGItf       loc         .   tyGam               =   agFakeDependOn @expr.gUniq initTyGam		-- fake dependency for uuagc --cycle
%%]

This is not maintained w.r.t. tyKiGam:

%%[7_2.initTyGam -2.initTyGam
SEM AGItf
  | AGItf       loc         .   tyGam               :=  assocLToGam
                                                          [ (hsnArrow       , mkTGI (Ty_Con hsnArrow) ([kiStar,kiStar] `mkArrow` kiStar))
                                                          , (hsnInt         , mkTGI tyInt kiStar)
                                                          , (hsnChar        , mkTGI tyChar kiStar)
                                                          , (hsnRow         , mkTGI (Ty_Con hsnUnknown) kiRow)
                                                          , (hsnRec         , mkTGI (Ty_Con hsnRec) ([kiRow] `mkArrow` kiStar))
                                                          , (hsnSum         , mkTGI (Ty_Con hsnSum) ([kiRow] `mkArrow` kiStar))
                                                          , (hsnRowEmpty    , mkTGI (Ty_Con hsnRowEmpty) kiRow)
                                                          , (hsnRow         , mkTGI (Ty_Con hsnUnknown) kiRow)
                                                          , (hsnRec         , mkTGI (Ty_Con hsnRec) ([kiRow] `mkArrow` kiStar))
                                                          , (hsnSum         , mkTGI (Ty_Con hsnSum) ([kiRow] `mkArrow` kiStar))
                                                          , (hsnRowEmpty    , mkTGI (Ty_Con hsnRowEmpty) kiRow)
                                                          ]
%%]

%%[20 -2.initTyGam
ATTR AGItf [ tyGam: TyGam | | ]
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Init of tyKiGam
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

This is incomplete for variant 7_2.

%%[6.initTyGam
SEM AGItf
  | AGItf       loc         .   tyKiGam            =   agFakeDependOn @expr.gUniq initTyKiGam
%%]

%%[20 -6.initTyGam
ATTR AGItf [ tyKiGam: TyKiGam | | ]
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Sort, but no inferencing && etc
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[6
ATTR AllExpr AllTyExpr AllPatExpr AllData AllCase AllDecl [ kiGam: KiGam | | ]
%%]

%%[6
SEM AGItf
  | AGItf       loc         .   kiVarMp             =   emptyVarMp
%%]

%%[6.initKiGam
SEM AGItf
  | AGItf       loc         .   kiGam               =   agFakeDependOn @expr.gUniq initKiGam		-- fake dependency for uuagc --cycle
%%]

%%[20 -6.initKiGam
ATTR AGItf [ kiGam: KiGam | | ]

SEM AGItf
  | AGItf       loc         .   kiGam               =   agFakeDependOn @expr.gUniq @lhs.kiGam		-- fake dependency for uuagc --cycle
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Type signatures
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[1.gathTySigGam
ATTR AllDecl [ | | gathTySigGam USE {`gamAddGam`} {emptyGam}: ValGam ]
%%]

%%[1
SEM Decls
  | Cons		lhs			.	gathTySigGam		= 	agFakeDependOn @lhs.opts $ @hd.gathTySigGam `gamAddGam` @tl.gathTySigGam
%%]

-- generated from ruler rules into EHRulerRules, was 1.gamSigTyGath
%%[5.gamSigTyGath
SEM Decl
  | TySig       loc         .   gamSigTy            =   @tyExpr.ty
                            .   gathTySigGam        =   @nm `gamSingleton` ValGamInfo @gamSigTy
%%]
SEM Expr
  | Let         decls       .   gathTySigGam        =   emptyGam

%%[1.tySigGam
ATTR AllDecl [ tySigGam: ValGam | | ]
%%]

-- generated from ruler rules into EHRulerRules, was 1.tySigGam.TysigLet
%%[5.tySigGam.TysigLet
SEM Expr
  | Let         decls       .   tySigGam            =   @decls.gathTySigGam
%%]

-- generated from ruler rules into EHRulerRules, was 1.tySigGam.Val
%%[5.tySigGam.Val
SEM Decl
  | Val         loc         .   (ty_sig_,hasTySig)  =   case @patExpr.mbTopNm of
                                                          Nothing
                                                            ->  (Ty_Any,False)
                                                          Just nm
                                                            ->  case gamLookup nm @lhs.tySigGam of
                                                                  Nothing   -> (Ty_Any,False)
                                                                  Just vgi  -> (vgiTy vgi,True)
%%]

-- generated from ruler rules into EHRulerRules, was 3.TySig
%%[5.TySig
SEM Decl
  | TySig       loc         .   ty_sig_             =   tyQuantify (`elem` @tyExpr.tyVarWildL) @tyExpr.ty
                            .   gamSigTy            :=  @ty_sig_
%%]

%%[4_2
ATTR AllDecl [ | tySigTyVarMp: VarMp | ]
%%]

-- generated from ruler rules into EHRulerRules, was 4_2.TySig
%%[90
SEM Decl
  | TySig       loc         .   (gamSigTy,gamSigVarMp)
                                                    :=  tyAsVarMp @lUniq @ty_sig_
                lhs         .   tySigTyVarMp        =   @gamSigVarMp |=> @lhs.tySigTyVarMp
%%]

-- generated from ruler rules into EHRulerRules, was 4_2.Let.tySigGam
%%[90.Let.tySigGam
SEM Expr
  | Let         decls       .   tySigGam            :=  @decls.tySigTyVarMp |=> @decls.gathTySigGam
%%]

%%[6
SEM Decl
  | TySig       loc         .   gTyTvL              =   ftv . map (tgiTy.snd) . gamToAssocL $ @lhs.tyGam
                            .   ty_sig_             :=  tyQuantify (`elem` (@tyExpr.tyVarWildL ++ @gTyTvL)) @tyExpr.ty
%%]

%%[9
SEM Decl
  | TySig       loc         .   ty_sig_             :=  tyQuantify (`elem` (@tyExpr.tyVarWildL ++ @gTyTvL)) @tyExpr.ty
%%]

%%[8
SEM Decl
  | FFI         loc         .   ty_sig_             =   tyQuantifyClosed @tyExpr.ty
                lhs         .   gathTySigGam        =   @nm `gamSingleton` ValGamInfo @ty_sig_
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Kind signatures
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[6.kiSigGam
ATTR AllDecl [ kiSigGam: TyGam | gathKiSigGam: TyGam | ]

SEM Expr
  | Let         decls       .   gathKiSigGam        =   emptyGam
                            .   kiSigGam            =   @decls.gathKiSigGam

SEM Decl
  | KiSig       lhs         .   gathKiSigGam        =   gamAdd @nm (mkTGI (Ty_Con @nm)) @lhs.gathKiSigGam
%%]

SEM Expr
  | Let         decls       .   gathKiSigGam        =   emptyGam
                            .   kiSigGam            =   @decls.gathKiSigGam

SEM Decl
  | Data
    Type
                loc         .   (sigKi,hasKiSig)    =   case gamLookup @tyNm @lhs.kiSigGam of
                                                          Nothing   -> (Ty_Any,False)
                                                          Just tgi  -> (tgiKi tgi,True)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Kind signatures (based on TyKiGam)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

20070529: Not finished

%%[6
ATTR AllDecl [ tyKiSigGam: TyKiGam | | gathTyKiSigGam USE {`gamUnion`} {emptyGam}: TyKiGam ]

SEM Decl
  | KiSig       lhs         .   gathTyKiSigGam      =   tyKiGamNameSingleton @nm (TyKiGamInfo @sigKi)

SEM Expr
  | Let         decls       .   tyKiSigGam          =   @decls.gathTyKiSigGam
%%]

%%[6
SEM Decl
  | Data
%%[[11
    Type
%%]]
                loc         .   (sigKi,hasKiSig)    =   case tyKiGamLookupByName @tyNm @lhs.tyKiSigGam of
                                                          Nothing -> (Ty_Any,False)
                                                          Just i  -> (tkgiKi i,True)
%%]

%%[6
SEM Decl
  | KiSig       loc         .   sigKi               =   kiQuantify (const False) @kiExpr.ki
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Include binding for pattern var?
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[1.inclVarBind
ATTR PatExpr [ inclVarBind: Bool | | ]

SEM PatExpr
  | AppTop      patExpr     .   inclVarBind         =   True

SEM Decl
  | Val         patExpr     .   inclVarBind         =   False

SEM Expr
  | Lam         arg         .   inclVarBind         =   True
%%]

%%[2
SEM Decl
  | Val         patExpr     .   inclVarBind         :=  not @hasTySig
%%]

%%[5
SEM CaseAlt
  | Pat         patExpr     .   inclVarBind         =   True
%%]

%%[7
SEM RecPatExpr
  | Ext Expr    patExpr     .   inclVarBind         =   True

SEM DataFieldPatExpr
  | Ext         patExpr     .   inclVarBind         =   True
%%]

%%[12
SEM Expr
  | LamImpl     arg         .   inclVarBind         =   True
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Top name of pattern
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[1.mbTopNm
ATTR PatExpr [ | | mbTopNm: {Maybe HsName} ]

SEM PatExpr
  | Var VarAs   loc         .   mbTopNm             =   if @nm == hsnWild then Nothing else Just @nm
%%[[1
  | * - Var VarAs
                loc         .   mbTopNm             =   Nothing
%%][8
  | Irrefutable loc         .   mbTopNm             =   @patExpr.mbTopNm
  | * - Var VarAs Irrefutable
                loc         .   mbTopNm             =   Nothing
%%]]
%%]

%%[7.topNm
ATTR PatExpr [ | | topNm: HsName ]

SEM PatExpr
  | Var VarAs   loc         .   topNm               =   if @nm == hsnWild then uidHNm @lUniq else @nm
  | App         lhs         .   topNm               =   hsnUnknown
  | AppTop Con Rec CConst IConst DataFields
%%[[97
    Expr
%%]]
                loc         .   topNm               =   uidHNm @lUniq
  | SConst      loc         .   topNm               =   uidHNm @uniq1
%%[[8
  | Irrefutable loc         .   topNm               =   @patExpr.topNm
%%]]
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Records, default (positional) name if absent
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[7
ATTR RecPatExpr RowTyExpr RecExpr [ | positionalFldNmL: {[HsName]} | ]
ATTR RecPatExpr [ matchOnFld: Bool | | hasAFldRef: Bool ]

SEM Expr
  | Rec         recExpr     .   positionalFldNmL    =   positionalFldNames

SEM TyExpr
  | Row         rowTyExpr   .   positionalFldNmL    =   positionalFldNames

SEM PatExpr
  | Rec         recPatExpr  .   positionalFldNmL    =   positionalFldNames
                            .   matchOnFld          =   @recPatExpr.hasAFldRef

SEM RecPatExpr
  | Ext         lhs         .   hasAFldRef          =   maybe @recPatExpr.hasAFldRef (const True) @mbNm
                (loc.positionalNm,lhs.positionalFldNmL)
                                                    =   hdAndTl @recPatExpr.positionalFldNmL
                loc         .   nm                  =   case @mbNm of
                                                          Just nm                     -> nm
                                                          Nothing  | @lhs.matchOnFld  -> @patExpr.topNm
                                                                   | otherwise        -> @positionalNm
  | * - Ext     lhs         .   hasAFldRef          =   False
 
SEM RowTyExpr
  | Ext         (loc.positionalNm,lhs.positionalFldNmL)
                                                    =   hdAndTl @rowTyExpr.positionalFldNmL
                loc         .   nm                  =   maybe @positionalNm id @mbNm

SEM RecExpr
  | Ext         (loc.positionalNm,lhs.positionalFldNmL)
                                                    =   hdAndTl @recExpr.positionalFldNmL
                loc         .   nm                  =   maybe @positionalNm id @mbNm
%%]

%%[10
SEM PrExpr
  | Lacks       rowTyExpr   .   positionalFldNmL    =   positionalFldNames
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% How to do subsumption
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[4.fiOpts.init
ATTR AllExpr AllPatExpr [ fiOpts: FIOpts | | ]

SEM AGItf
  | AGItf       expr        .  fiOpts               =   strongFIOpts
%%]

-- generated from ruler rules into EHRulerRules, was/from 4.fiOpts.init
%%[5.fiOpts.init
SEM Expr
  | AppImpred   func        .  fiOpts               =   strongFIOpts
                loc         .  argFIOpts            =   strongFIOpts
                arg         .  fiOpts               =   @argFIOpts

%%]

-- generated from ruler rules into EHRulerRules, was 2.App
%%[5.fiOpts.init
SEM Decl
  | Val         expr        .  fiOpts               =   strongFIOpts
                patExpr     .  fiOpts               =   strongFIOpts
%%]

-- generated from ruler rules into EHRulerRules, was 2.App
%%[5.fiOpts.init
SEM Expr
  | Lam         loc         .  knFunFIOpts          =   @lhs.fiOpts {fioBindRFirst=True}
  | App         func        .  fiOpts               =   strongFIOpts
                loc         .  argFIOpts            =   instLFIOpts
                arg         .  fiOpts               =   @argFIOpts
%%]

-- 20070205 - AD, should be generated from ruler rules, but not yet is
%%[5
SEM Expr
  | TypeAs      loc         .  asFiOpts             =   strongFIOpts
                expr        .  fiOpts               =   @asFiOpts
%%]

%%[5
ATTR AllCase [ fiOpts: FIOpts | | ]

SEM Decl
  | Val         expr        .  fiOpts               :=  if @hasTySig then strongFIOpts else weakFIOpts

SEM CaseAlt
  | Pat         patExpr     .  fiOpts               =   strongFIOpts

SEM Expr
  | Case        expr		.	fiOpts				=	weakFIOpts
%%]

%%[7
ATTR DataFieldExpr [ fldFIOpts: FIOpts | | ]

SEM RecExpr
  | Ext Upd     expr        .  fiOpts               =   strongFIOpts

SEM Expr
  | DataFields  loc         .  fldFIOpts            =   strongFIOpts

SEM DataFieldExpr
  | Upd         expr        .  fiOpts               =   @lhs.fldFIOpts

SEM Expr
  | Rec         loc         .  fiOpts               =   strongFIOpts
%%]

%%[9
SEM Expr
  | App         func        .  fiOpts               :=  implFIOpts

SEM Decl
  | InstanceIntro
                expr        .  fiOpts               =   strongFIOpts
%%]

%%[12
SEM Expr
  | AppImpl     arg         .  fiOpts               =   strongFIOpts
%%]

%%[1010
SEM Decl
  | DynVal      expr        .  fiOpts               =   strongFIOpts
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Predicate env, for intro of predicates
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[9
ATTR AllDecl [ | patClGam1: ClGam  patClGam2: ClGam | ]
ATTR NTPrf AllPrExpr AllTyExpr AllData AllPatExpr [ clGam: ClGam | | ]
%%]

%%[9.initClGam
SEM AGItf
  | AGItf       loc         .   clGam              =   initClGam
%%]

%%[20 -9.initClGam
ATTR AGItf [ clGam: ClGam | | ]
%%]

%%[9
SEM Expr
  | Let         decls       .   patClGam1           =   gamPushNew @lhs.clGam
                            .   patClGam2           =   @decls.patClGam1
                loc         .   (lClGam,gClGam)     =   gamPop $ gamNoDups @decls.patClGam2
                decls       .   clGam               =   gamPushGam @lClGam @lhs.clGam
                body        .   clGam               =   gamPushGam @lClGam @gClGam
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Is let a first let in a sequence of lets?
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[9
ATTR Expr [ isFirstLet: Bool | | ]

SEM CaseAlt
  | Pat         loc         .   isFirstLet          =   True

SEM DataFieldExpr
  | Expr Upd    loc         .   isFirstLet          =   True

SEM Decl
  | InstanceIntro Val
                loc         .   isFirstLet          =   True

SEM RecExpr
  | Expr Ext Upd
                loc         .   isFirstLet          =   True

SEM AGItf
  | AGItf       loc         .   isFirstLet          =   True

SEM Expr
  | Let         loc         .   isFirstLet          =   False
%%]

%%[97
SEM PatExpr
  | Expr        loc         .   isFirstLet          =   True

%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% The Ty_Con name of a TyExpr, if any
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[9
%%]
ATTR TyExpr PrExpr [ | | mbConNm USE {`const`} {Nothing}: {Maybe HsName} ]

SEM PrExpr
  | Arrow		lhs			.	mbConNm				=	Just hsnPrArrow

SEM TyExpr
  | Con			lhs			.	mbConNm				=	Just @nm
  | App			lhs			.	mbConNm				=	@func.mbConNm
  | Var			lhs			.	mbConNm				=	Nothing

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% The XX_App function name of a XX, if any
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[1.Expr.ConNm
ATTR Expr [ | | appFunNm: HsName ]

SEM Expr
  | Con         lhs     .   appFunNm    =   @nm
  | App         lhs     .   appFunNm    =   @func.appFunNm
  | * - Con App
                lhs     .   appFunNm    =   hsnUnknown
%%]

%%[4
SEM Expr
  | AppImpred   lhs     .   appFunNm    :=  @func.appFunNm
%%]

%%[7
ATTR RecExpr [ | | extNm: HsName ]

SEM RecExpr
  | Empty       lhs     .   extNm       =   hsnRowEmpty
  | * - Empty Ext Upd
                lhs     .   extNm       =   hsnUnknown

SEM Expr
  | Rec         loc     .   appFunNm    :=  @recExpr.extNm
%%]

%%[12
SEM Expr
  | AppImpl     lhs     .   appFunNm    :=  @func.appFunNm
%%]

%%[1
ATTR TyExpr [ | | appFunNm: HsName ]

SEM TyExpr
  | Con         lhs     .   appFunNm    =   @nm
  | App         lhs     .   appFunNm    =   @func.appFunNm
  | * - App Con
                lhs     .   appFunNm    =   hsnUnknown

%%]

%%[7
ATTR RowTyExpr [ | | extNm: HsName ]

SEM RowTyExpr
  | Empty       lhs     .   extNm       =   hsnRowEmpty
  | * - Empty Ext
                lhs     .   extNm       =   hsnUnknown

SEM TyExpr
  | Row         lhs     .   appFunNm    :=  @rowTyExpr.extNm
%%]

%%[1.PatExpr
ATTR PatExpr [ | | appFunNm: HsName ]

SEM PatExpr
  | Con         loc     .   appFunNm    =   @nm
  | AppTop      loc     .   appFunNm    =   @patExpr.appFunNm
  | App         lhs     .   appFunNm    =   @func.appFunNm
  | * - App Con
                lhs     .   appFunNm    =   hsnUnknown
%%]

%%[7
ATTR RecPatExpr [ | | extNm: HsName ]

SEM RecPatExpr
  | Empty       lhs     .   extNm       =   hsnRowEmpty
  | * - Empty Ext
                lhs     .   extNm       =   hsnUnknown

SEM PatExpr
  | Rec         loc     .   appFunNm    :=  @recPatExpr.extNm
%%]

%%[6
ATTR KiExpr [ | | appFunNm: HsName ]

SEM KiExpr
  | Con         lhs     .   appFunNm    =   @nm
  | App         lhs     .   appFunNm    =   @func.appFunNm
  | * - Con App
                lhs     .   appFunNm    =   hsnUnknown
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Additional fake dependencies
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[9
SEM Decls
  | Cons        hd          .   gUniq               =   agFakeDependOn @hd.predSameScopeCounter @lhs.gUniq
%%]

%%[7
SEM CaseAlts
  | Cons        hd          .   kiVarMp             =   agFakeDependOn @hd.gathDataGam @lhs.kiVarMp
%%]

%%[9
SEM TyExprs
  | Cons        hd          .   clGam               =   agFakeDependOn @hd.tyVarWildL @lhs.clGam
%%]

%%[7
SEM DataFieldPatExpr
  | Ext         dataFieldPatExpr
                            .   kiVarMp             =   agFakeDependOn @dataFieldPatExpr.tyGam @lhs.kiVarMp

%%]

