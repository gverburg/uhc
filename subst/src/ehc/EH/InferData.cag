%%[0
%include lhs2TeX.fmt
%include afp.fmt
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Kind inferencing for data, placeholders, known ki use
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[5.tyGam
SEM Decl
  | Data        tyVars      .   tyGam               =   emptyGam
                lhs         .   patTyGam            =   gamAdd @tyNm (TyGamInfo (Ty_Con @tyNm)) @lhs.patTyGam
                constrs     .   tyGam               =   gamPushGam @tyVars.tyGam @lhs.tyGam
%%]

%%[6
SEM Decl
  | Data        loc         .   dataTgi             =   mkTGI (Ty_Con @tyNm)
                            .   dataTkgi            =   TyKiGamInfo (tyEnsureNonAny @lUniq @knKi)
                lhs         .   patTyGam            :=  if @hasKiSig  then @lhs.patTyGam
                                                                      else gamAdd @tyNm @dataTgi @lhs.patTyGam
                            .   patTyKiGam          =   if @hasKiSig  then @lhs.patTyKiGam
                                                                      else tyKiGamNameSingleton @tyNm @dataTkgi `gamUnion` @lhs.patTyKiGam
                loc         .   fo_                 =   fitsIn  strongFIOpts emptyFE @lUniq2 @lhs.patKiVarMp
                                                                (@lhs.patKiVarMp |=> (@tyVars.kiL `mkArrow` kiStar))
                                                                (@lhs.patKiVarMp |=> (tkgiKi @dataTkgi))
                            .   dataKi              =   foTy @fo_
                lhs         .   patKiVarMp          =   foVarMp @fo_ |=> @lhs.patKiVarMp
                constrs     .   tyKiGam             =   gamPushGam  (tyKiGamInst1Exists @lUniq3 (@lhs.kiVarMp |=> @tyVars.tyKiGam))
                                                                    @lhs.tyKiGam
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Kind inferencing for data
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[6
SEM DataConstr
  | Constr      loc         .   fldsKiVarMp         =   @fields.kiVarMp
                            .   (_,fo_)             =   fitsInL  weakFIOpts emptyFE @lUniq @fldsKiVarMp
                                                                 (@fldsKiVarMp |=> @fields.kiL)
                                                                 (repeat kiStar)
				loc			.	fo_					:	FIOut
                lhs         .   kiVarMp             =   agFakeDependOn @lhs.dataTy $ foVarMp @fo_ |=> @fldsKiVarMp
%%]

%%[50
SEM DataConstr
  | Constr      loc         .   fldsKiVarMp         :=  @eqs.kiVarMp

SEM DataConstrEq
  | Eq          loc         .   fo_                 =   fitsIn weakFIOpts emptyFE @lUniq @tyExpr.kiVarMp (@tyExpr.kiVarMp |=> @tyVar.ki) (@tyExpr.ki)
                lhs         .   kiVarMp             =   foVarMp @fo_ |=> @tyExpr.kiVarMp
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Data info gam
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[7.dataGam
ATTR
  AllDecl AllExpr AllCase
%%[[97
  AllPatExpr
%%]]
    [ | gathDataGam: DataGam | ]
ATTR AllDecl AllExpr AllCase AllPatExpr [ dataGam: DataGam | | ]

SEM AGItf
  | AGItf       expr        .   gathDataGam         =   emptyGam
%%]

%%[7.initDataGam
SEM AGItf
  | AGItf       expr        .   dataGam             =   @expr.gathDataGam
%%]

%%[20 -7.initDataGam
ATTR AGItf [ dataGam: DataGam | | ]
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Gathering tag info for data
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[7
ATTR AGItf [ | | gathDataGam: DataGam ]

SEM Decl
  | Data        loc         .   dgi                 =   mkDGI @tyNm ([@dataTy] `mkArrow` @dataAltTy) @constrs.dataConstrNmL @constrs.dataConstrTagMp @isNewtype
                lhs         .   gathDataGam         =   gamAdd @tyNm @dgi @lhs.gathDataGam
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Tying at toplevel
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[20
SEM AGItf
  | AGItf       expr        .   dataGam             =   @expr.gathDataGam `gamUnion` @lhs.dataGam
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Type of data constructors
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[5
ATTR AllData [ dataTy: Ty | | ]
ATTR AllDataConstr [ | patValGam: ValGam | ]

SEM DataConstr
  | Constr      loc         .   dataConTy           =   @fields.tyL `mkArrow` @lhs.dataTy
                            .   dataConProdTy       =   mkProdApp @fields.tyL
                loc         .   dataConProdTy       :   Ty
                loc         .   dataQuUnConTy       =   let  fvD = ftv @lhs.dataTy
                                                             fvU = ftv @dataConProdTy
                                                        in   mkTyQu TyQu_Forall fvD ([@lhs.dataTy] `mkArrow` mkTyQu TyQu_Exists (fvU \\ fvD) @dataConProdTy)
                lhs         .   patValGam           =   gamUnions
                                                          [ assocLToGam
                                                              [ (@conNm, ValGamInfo @dataConTy)
                                                              , (hsnUn @conNm, ValGamInfo @dataQuUnConTy)
                                                              ]
                                                          , @lhs.patValGam
                                                          ]
%%]

%%[5
SEM Decl
  | Data        loc         .   dataTy              =   @tyNm `mkConApp` @tyVars.tyL
%%]

%%[7
SEM Decl
  | Data        loc         .   dataTy              :=  agFakeDependOn @dataAltTy $ @tyNm `mkConApp` @tyVars.tyL
%%]

%%[7
SEM Decl
  | Data        lhs         .   patValGam           =   gamUnions
                                                          [ gamNoDups @constrs.fldSelGam
                                                          , gamNoDups @constrs.fldUpdGam
                                                          , @constrs.patValGam
                                                          ]
%%]

%%[7
ATTR AllDataConstr [ | | dataAltTyL USE {++} {[]}: {AssocL HsName Ty} ]

SEM DataConstr
  | Constr      loc         .   dataConTy           :=  assocLElts @fields.fldTyL `mkArrow` @lhs.dataTy
                            .   dataConProdTy       :=  let  lbls = zipWith (\p (ml,_) -> maybe p id ml) positionalFldNames @fields.fldTyL
                                                        in   mkTyRec (zipWith (\l (_,t) -> (l,t)) lbls @fields.fldTyL)
                loc         .   dataAltTyL          =   [(@conNm,@dataConProdTy)]

SEM Decl
  | Data        loc         .   dataAltTy           =   mkTySum @constrs.dataAltTyL
                            .   dataTgi             :=  mkTGIData (Ty_Con @tyNm) Ty_Any {- ([@dataTy] `mkArrow` @dataAltTy) -}
%%]

%%[8
ATTR AllDataConstr [ dataAltTy: Ty | | ]
%%]

!!!!! Fix following w.r.t. dataUnConTy
%%[50
SEM DataConstr
  | Constr      loc         .   dataConTy           :=  @eqs.eqTyVarMp |=> (@fields.tyL `mkArrow` @lhs.dataTy)
                            .   eqEqVarMp           =   assocLToVarMp . map (\(v,t) -> (v,Ty_Equal v t)) . varmpToAssocTyL $ @eqs.eqTyVarMp
                            .   dataUnConTy         :=  [@eqEqVarMp |=> @lhs.dataTy] `mkArrow` (@eqs.eqTyVarMp |=> @dataConProdTy)
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Equal constraints for constructors
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[50
ATTR AllDataConstrEq [ | eqTyVarMp: VarMp | ]

SEM DataConstr
  | Constr      eqs         .   eqTyVarMp           =   emptyVarMp

SEM DataConstrEq
  | Eq          lhs         .   eqTyVarMp           =   (tyVar @tyVar.ty `varmpTyUnit` @tyExpr.ty) |=> @lhs.eqTyVarMp
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Ty name
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[7
ATTR AllDataConstr [ tyNm: HsName | | ]

SEM Decl
  | Data        constrs     .   tyNm                =   @tyNm
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Map for tag + arity + fld labels offsets
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[7
SEM DataConstr
%%[[7
  | Constr      loc         .   fldMp               =   let mk = emptyDataFldInfo
                                                            mkfs = foldl (\m (ml,_) -> maybe m (\l -> (l,mk):m) ml) []
%%][8
  | Constr      loc         .   fldMp               =   let mk o = emptyDataFldInfo {dfiOffset = o}
                                                            mkfs = fst . foldl (\(m,o) (ml,_) -> maybe (m,o+1) (\l -> ((l,mk o):m,o+1)) ml) ([],0)
%%]]
                                                        in  Map.fromList $ mkfs $ @fields.fldTyL
%%]

%%[7
ATTR
  AllDataConstr
    [ | | dataConstrTagMp USE {`Map.union`} {Map.empty}: DataConstrTagMp
          dataConstrNmL USE {++} {[]}: {[HsName]}
    ]

SEM DataConstr
  | Constr      lhs         .   dataConstrTagMp     =   @conNm `Map.singleton` @dti
                            .   dataConstrNmL       =   [@conNm]
                loc         .   dti                 =   emptyDataTagInfo
                                                          { dtiFldMp = @fldMp
                                                          , dtiConNm = @conNm
%%[[8
                                                          , dtiCTag  = @ctag
%%]]
%%[[95
                                                          , dtiMbFixityPrio  = @mbFixityPrio
%%]]
                                                          }
%%[[8
                            .   tag                 =   tyRecOffset @conNm @lhs.dataAltTy
                            .   arity               =   length @fields.fldTyL
                            .   ctag                =   CTag @lhs.tyNm @conNm @tag @arity @lhs.maxArity
     			loc			.	ctag				: 	CTag
%%]]
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Maximum arity
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[8
ATTR AllDataConstr [ maxArity: Int | | gathMaxArity USE {`max`} {0}: Int ]

SEM DataConstr
  | Constr      lhs         .   gathMaxArity        =   @arity

SEM Decl
  | Data        constrs     .   maxArity            =   @constrs.gathMaxArity
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Type+label of data fields
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[7
ATTR AllDataField [ | | fldTyL USE {++} {[]}: FldTyL ]

SEM DataField
  | Field       loc         .   fldTyL              =   case @mbLabels of
                                                          Just ls -> zipWith (\l t -> (Just l,t)) ls (repeat @tyExpr.ty)
                                                          _       -> [(Nothing,@tyExpr.ty)]
				loc			.	fldTyL				:	FldTyL
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Gam for selector functions of data fields
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[7
ATTR AllDataField AllDataConstr [ | | fldSelGam USE {`gamUnion`} {emptyGam}: ValGam ]

SEM DataField
  | Field       loc         .   fldSelGam           =   assocLToGam [ (l,ValGamInfo $ [@lhs.dataTy] `mkArrow` t) | (Just l,t) <- @fldTyL ]
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Gam for update functions of data fields
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[7
ATTR AllDataField AllDataConstr [ | | fldUpdGam USE {`gamUnion`} {emptyGam}: ValGam ]

SEM DataField
  | Field       loc         .   fldUpdGam           =   let mk t = [t,fr @lhs.dataTy] `mkArrow` @lhs.dataTy
                                                                 where fv = tyFtvMp t
                                                                       fr dt = dt
                                                        in  assocLToGam [ (hsnFldUpd l,ValGamInfo $ mk t) | (Just l,t) <- @fldTyL ]
%%]
                                                                       fr dt = tyFreshVar (`Map.member` fv) @lUniq dt

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Kind of data fields
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[7
ATTR AllDataField [ | | kiL USE {++} {[]}: TyL ]

SEM DataField
  | Field       lhs         .   kiL                 =   replicate (maybe 1 length @mbLabels) @tyExpr.ki
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Additional info for checks, codegen, etc
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[8
ATTR AllDataConstr [ isNewtype: Bool | | ]

SEM Decl
  | Data        constrs     .   isNewtype           =   @isNewtype
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% DataFieldExpr: additional info for checks, codegen, etc
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[7
SEM DataFieldExpr
  | Con         loc         .   finConTy            =   @lhs.finTyVarMp |=> @ty
%%]

%%[7
ATTR DataFieldExpr [ | | mbConNm: {Maybe HsName} ]

SEM DataFieldExpr
  | Con         lhs         .   mbConNm             =   Just @nm
  | * - Con Upd lhs         .   mbConNm             =   Nothing
%%]

%%[7
ATTR DataFieldExpr [ | | mbDti: {Maybe DataTagInfo} ]

SEM DataFieldExpr
  | Con         loc         .   dti                 =   dgiDtiOfCon @nm @lhs.dgi
                lhs         .   mbDti               =   Just @dti
  | * - Con Upd lhs         .   mbDti               =   Nothing
%%]

%%[7
ATTR DataFieldExpr [ | | fldL: {[HsName]} ]

SEM DataFieldExpr
  | Upd         lhs         .   fldL                =   @nm : @dataFieldExpr.fldL
  | * - Upd     lhs         .   fldL                =   []

SEM Expr
  | DataFields  loc         .   fldL                =   sort @dataFieldExpr.fldL
                            .   fldS                =   Set.fromList @fldL
%%]

%%[7
ATTR DataFieldExpr [ dgi: DataGamInfo | | ]

SEM Expr
  | DataFields  loc         .   dgi                 =   let dgiOf t = maybe emptyDataGamInfo id $ dataGamDgiOfTy t @lhs.dataGam
                                                        in  case (@dataFieldExpr.mbConNm,@fldL) of
                                                              (Just c,_)
                                                                -> dgiOf t
                                                                where (_,t,_) = valGamTyOfDataCon c @lhs.valGam
                                                              (_,(f:_))
                                                                -> dgiOf t
                                                                where (_,t,_) = valGamTyOfDataFld f @lhs.valGam
                                                              _ -> panic "Expr.DataFields.dgi"
                            .   dtiL                =   Map.elems $ dgiConstrTagMp @dgi
                            .   (dtiInFldL,dtiOutFldL)
                                                    =   partition (\i -> @fldS `Set.isSubsetOf` Map.keysSet (dtiFldMp i)) $ @dtiL
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Pattern: additional info for checks, codegen, etc
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[7
ATTR DataFieldPatExpr [ | | dti: DataTagInfo ]

SEM DataFieldPatExpr
  | Con         loc         .   dgi                 =   let (_,t,_) = valGamTyOfDataCon @nm @lhs.valGam
                                                        in  panicJust "DataFieldPatExpr.dgi" $ dataGamDgiOfTy t @lhs.dataGam
                            .   dti                 =   dgiDtiOfCon @nm @dgi
%%]

%%[7
ATTR DataFieldPatExpr [ | | fldL: {[HsName]} ]

SEM DataFieldPatExpr
  | Ext         lhs         .   fldL                =   @nm : @dataFieldPatExpr.fldL
  | * - Ext     lhs         .   fldL                =   []
%%]


