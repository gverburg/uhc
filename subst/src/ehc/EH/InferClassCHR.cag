%%[0
%include lhs2TeX.fmt
%include afp.fmt
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Classes via CHR's
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% CHR store
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[9
ATTR NTPrf [ chrStore: ScopedPredStore | | ]
%%]

%%[20
ATTR AGItf [ chrStore: ScopedPredStore | | gathChrStore: ScopedPredStore ]
%%]

%%[9.initChrStore
SEM AGItf
  | AGItf       loc         .   initChrStore        =   initScopedPredStore
%%]

%%[20 -9.initChrStore
SEM AGItf
  | AGItf       loc         .   initChrStore        =   @lhs.chrStore
%%]

%%[9
SEM AGItf
  | AGItf       loc         .   (instsOuter,instsInner)
                                                    =   partition (\(_,_,_,sc) -> sc == initPredScope) $ Seq.toList @expr.chrInstDeclSq
                            .   (chrStoreOuterScope,gathChrStore)
                                                    =   mkScopedCHR2 @chrFIIn (Seq.toList @expr.chrClassDeclSq) @instsOuter @initChrStore
                            .   (chrStore,_)        =   mkScopedCHR2 @chrFIIn [] @instsInner @chrStoreOuterScope
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Scope
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[9
ATTR NTPrf [ predScope: PredScope | | ]
ATTR
  AllCase AllExpr
%%[[97
  AllPatExpr
%%]]
    [ predSameScopeCounter: Int | | ]
ATTR AllDecl [ | predSameScopeCounter: Int | ]
%%]

%%[9
SEM AGItf
  | AGItf       loc         .   predScope           =   initPredScope
                            .   predSameScopeCounter=   0

SEM Expr
  | Let         decls       .   predSameScopeCounter=   if @lhs.isFirstLet then 0 else @lhs.predSameScopeCounter
  | Lam AppTop  loc         .   (_,predScope)       =   if @implsIsEmpty
                                                        then (0,@lhs.predScope)
                                                        else pscpEnter 0 @lhs.predScope
%%[[12
  | LamImpl     loc         .   (_,predScope)       =   pscpEnter 0 @lhs.predScope
%%]]
  | * - Lam AppTop
%%[[12
    LamImpl
%%]]
                loc         .   predScope           =   @lhs.predScope
%%]

This seems to influence uuagc cycle check:
- when dependent on @imSubsTy, cycles are (correctly) reported
- when like below, infinite loop
- when commented out, i.e. replaced by False, less infinite loop, takes approx. 1 min

%%[9
SEM Expr
  | AppTop Lam  loc         .   implsIsEmpty        =   False -- otherwise AG depends on @knTySubs, creating a cycle
%%]
  | AppTop Lam  loc         .   implsIsEmpty        =   not $ tyIsPredicated @knTySubs

%%[9
SEM Decl
  | Class Instance
                decls       .   predSameScopeCounter=   0

SEM Decl
  | Val Class Instance
                (lhs.predSameScopeCounter,loc.predScope)
                                                    =   pscpEnter @lhs.predSameScopeCounter @lhs.predScope
%%]

%%[12
%%]
SEM Expr
  | LamImpl     loc         .   implsIsEmpty        =   null @knPrL

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Scopes of introduced bindings
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[9 hs
type ScopeGam = Gam HsName PredScope
%%]

%%[9
ATTR AllDecl AllPatExpr [ | | scopeGam USE {`gamUnion`} {emptyGam}: ScopeGam ]

SEM PatExpr
  | Var         lhs         .   scopeGam            =   gamSingleton @nm @lhs.predScope
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% CHREnv
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

The env from the bottom of a let sequence is required because we need (e.g.) type synonyms info.

%%[9
SEM AGItf
  | AGItf       loc         .   chrFIIn             =   @expr.chrFIIn {fiUniq = @lUniq}
%%]

%%[9
SEM Decl
  | Instance    loc         .   chrFIIn             =   emptyFI {fiEnv = @fe}
%%]

%%[9
ATTR Expr [ | | chrFIIn: FIIn ]

SEM Expr
  | Let         loc         .   chrFIIn             =   @body.chrFIIn
  | * - Let     loc         .   chrFIIn             =   emptyFI {fiEnv = @fe}
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Class to CHR
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[9
ATTR AllDecl Expr [ | | chrClassDeclSq USE {`Seq.union`} {Seq.empty}: {Seq.FastSeq (CHRClassDecl Pred RedHowAnnotation)} ]
%%]

%%[9
SEM Decl
  | Class       loc         .   chrClassDecl        =   let off n = tyRecOffset n @clsTyRec
                                                        in  ( map tyPred @ctxtPrTyL
                                                            , tyPred @hdPrTy
                                                            , zipWith (\p n -> RedHow_BySuperClass n (off n) @dictTag) @ctxtPrTyL @supClsNmL
                                                            )
                lhs         .   chrClassDeclSq      =   Seq.singleton @chrClassDecl

SEM Expr
  | Let         loc         .   chrClassDeclSq      =   @decls.chrClassDeclSq `Seq.union` @body.chrClassDeclSq
  | * - Let     lhs         .   chrClassDeclSq      =   Seq.empty
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Instance to CHR
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[9
ATTR NTPrf [ | | chrInstDeclSq USE {`Seq.union`} {Seq.empty}: {Seq.FastSeq (CHRScopedInstanceDecl Pred RedHowAnnotation PredScope)} ]
%%]

%%[9
SEM Decl
  | Instance    loc         .   chrInstDecl         =   let cx = @unfixPrTyVarMp |=> @ctxtPrTyFixL
                                                            hd = @unfixPrTyVarMp |=> @hdPrTyFix
                                                            hdPr = tyPred hd
                                                        in  ( map tyPred cx
                                                            , hdPr
                                                            , RedHow_ByInstance @dictNm hdPr @lhs.predScope
                                                            , @lhs.predScope
                                                            )
                lhs         .   chrInstDeclSq       =   if @inclForElim then Seq.singleton @chrInstDecl else Seq.empty
  | InstanceIntro
                loc         .   chrInstDecl         =   let pr = tyPred @prExpr.ty
                                                        in  ( []
                                                            , pr
                                                            , RedHow_ByInstance @dictNm pr @lhs.predScope
                                                            , @lhs.predScope
                                                            )
                lhs         .   chrInstDeclSq       =   Seq.singleton @chrInstDecl
%%]
