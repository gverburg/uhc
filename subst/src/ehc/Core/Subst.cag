%%[0
%include lhs2TeX.fmt
%include afp.fmt
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Substituting holes
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[9 hs module {%{EH}Core.Subst} import(Data.Maybe,qualified Data.Set as Set,qualified Data.Map as Map,EH.Util.Pretty,{%{EH}Base.Opts},{%{EH}Base.Common},{%{EH}Ty},{%{EH}Core},{%{EH}VarMp},{%{EH}Core.Pretty},{%{EH}Core.FvS})
%%]

%%[9 hs export(coeWipeWeave,coeEvalOn,coeCompose,mkPoisAppCoe,mkImplsAppCoe, mkImplsLamCoe,mkLamBodyCoe,mkPoiLLamCoe)
%%]

%%[9.WRAPPER ag import({Core/AbsSyn})
WRAPPER CExpr
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Code substitution
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[9 hs export(CSubst,emptyCSubst)
data CSubstInfo
	=  CSIExpr      {csiRepl    :: !CExpr                                           }
    |  CSIImpls     {csiAppCoeL :: ![Coe]       , csiLamCoeL    :: ![Coe]           }
    |  CSIBinds     {csiBindL   :: !CBindL                                          }
    deriving Show

type CSubst = Map.Map UID CSubstInfo

emptyCSubst :: CSubst
emptyCSubst = Map.empty
%%]

%%[9 hs export(uidImplsLToCSubst,uidCBindLLToCSubst,uidCExprLToCSubst,poiCExprLToCSubst,cnstrImplsToCSubst,cAppCoeArg)
cAppCoeArg :: CExpr -> CExpr -> CExpr
cAppCoeArg ce coeArg
  =  let  t = wrap_CExpr (sem_CExpr ce) (Inh_CExpr {cSubst_Inh_CExpr = emptyCSubst, coeArg_Inh_CExpr = coeArg})
     in   (cRepl_Syn_CExpr t)

uidCExprLToCSubst :: AssocL UID CExpr -> CSubst
uidCExprLToCSubst = Map.fromList . assocLMapElt CSIExpr

uidCBindLLToCSubst :: AssocL UID CBindL -> CSubst
uidCBindLLToCSubst = Map.fromList . assocLMapElt CSIBinds

poiCExprLToCSubst :: AssocL PredOccId CExpr -> CSubst
poiCExprLToCSubst = uidCExprLToCSubst . assocLMapKey poiId

uidImplsLToCSubst :: AssocL UID ([Coe],[Coe]) -> CSubst
uidImplsLToCSubst = Map.fromList . assocLMapElt (uncurry CSIImpls)

cnstrImplsToCSubst :: EHCOpts -> VarMp -> CSubst
cnstrImplsToCSubst opts c
  =  uidImplsLToCSubst
        [ (iv,(mkImplsAppCoe opts i,mkImplsLamCoe coeId i))
        | (iv,VMIImpls i) <- varmpToAssocL c, let (_,mbTl) = implsPredsMbTail i, isNothing mbTl
        ]
%%]

%%[9 hs
instance PP CSubstInfo where
  pp (CSIExpr       ce   )  = pp ce
  pp (CSIImpls      l r  )  = pp (coeWeaveOn emptyCSubst l r CExpr_CoeArg)
  pp (CSIBinds      b    )  = ppCBindL b
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Code substitution as class
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[9 hs export(CSubstitutable(..))
infixr `cSubstApp`

class CSubstitutable a where
  cSubstApp :: CSubst -> a -> a

instance CSubstitutable CExpr where
  cSubstApp cs ce | Map.null cs
    =  ce
  cSubstApp cs ce
    =  let  t = wrap_CExpr (sem_CExpr ce) (Inh_CExpr {cSubst_Inh_CExpr = cs, coeArg_Inh_CExpr = CExpr_CoeArg})
       in   (cRepl_Syn_CExpr t)

instance CSubstitutable CBind where
  cSubstApp cs (CBind_Bind n e) = CBind_Bind n (cSubstApp cs e)

instance CSubstitutable a => CSubstitutable [a] where
  cSubstApp cs = map (cSubstApp cs)

instance CSubstitutable v => CSubstitutable (k,v) where
  cSubstApp cs (k,v) = (k,cSubstApp cs v)

instance CSubstitutable CSubstInfo where
  cSubstApp  cs  (CSIExpr ce)  = CSIExpr (cSubstApp cs ce)
  cSubstApp  _   csi           = csi

instance CSubstitutable CSubst where
  cSubstApp cs s = cs `Map.union` Map.map (cSubstApp cs) s

%%]

Optionally apply a CSubst.
Temporary, as the CHR solution does not require CSubst.

%%[9 hs export(cSubstOptApp)
cSubstOptApp :: CSubstitutable a => EHCOpts -> CSubst -> a -> a
cSubstOptApp opts = cSubstApp
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Generation
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[9
ATTR AllCodeNT CodeAGItf [ cSubst: CSubst  coeArg: CExpr | | cRepl: SELF ]

SEM CExpr
  | Hole        lhs         .   cRepl       =   case Map.lookup @uid @lhs.cSubst of
                                                  Just (CSIExpr ce)  -> ce
                                                  _                  -> @cRepl
  | HoleLet     lhs         .   cRepl       =   case Map.lookup @bindsUid @lhs.cSubst of
                                                  Just (CSIBinds b)  -> @lhs.cSubst `cSubstApp` mkCExprLetRec b @body.cRepl
                                                  _                  -> @cRepl
  | CoeArg      lhs         .   cRepl       =   @lhs.coeArg
  | ImplsApp ImplsLam
                loc         .   (coeAppL,coeLamL)
                                            =   case Map.lookup @uid @lhs.cSubst of
                                                  Just (CSIImpls ca cl)  -> (ca,cl)
                                                  _                      -> ([],[])
  | ImplsApp    lhs         .   cRepl       =   coeWeaveOn emptyCSubst @coeAppL [] @func.cRepl
  | ImplsLam    lhs         .   cRepl       =   coeWeaveOn emptyCSubst [] @coeLamL @body.cRepl
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Coercion
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[9 hs
coeImplsAppLVarMp :: EHCOpts -> VarMp -> Coe -> [Coe]
coeImplsAppLVarMp opts c coe
  =  case coe of
       CoeImplApp i  -> maybe [coe] (mkImplsAppCoe opts) (varmpImplsLookupCyc i c)
       _             -> [coe]

coeImplsAppRVarMp :: VarMp -> Coe -> [Coe]
coeImplsAppRVarMp c coe
  =  case coe of
       CoeImplLam i  -> maybe [coe] (mkImplsLamCoe coeId) (varmpImplsLookupCyc i c)
       _             -> [coe]

coeEvalOn :: Coe -> CExpr -> CExpr
coeEvalOn coe ce
  =  case coe of
       -- CoeId            -> ce
       Coe  f           -> f ce
       CoeC e           -> e `cAppCoeArg` ce
       CoeImplApp iv    -> CExpr_ImplsApp ce iv
       CoeImplLam iv    -> CExpr_ImplsLam iv ce

coeCompose :: Coe -> Coe -> Coe
coeCompose c1 c2
  =  mkCoe (\e -> c1 `coeEvalOn` (c2 `coeEvalOn` e))

coeWipeWeave :: EHCOpts -> VarMp -> CSubst -> [Coe] -> [Coe] -> Coe
coeWipeWeave opts c cs lCoeL rCoeL
  =  let  (lCoeL',rCoeL')
            = coeWipe cs (concatMap (coeImplsAppLVarMp opts c) lCoeL) (concatMap (coeImplsAppRVarMp c) rCoeL)
     in   CoeC (coeWeaveOn cs lCoeL' rCoeL' CExpr_CoeArg)

coeWeaveOn :: CSubst -> [Coe] -> [Coe] -> CExpr -> CExpr
coeWeaveOn cs lCoeL rCoeL ce
  =  let  ev c e = cs `cSubstApp` (c `coeEvalOn` e)
     in   foldr ev (foldr ev ce (reverse lCoeL)) rCoeL

coeWipe :: CSubst -> [Coe] -> [Coe] -> ([Coe],[Coe])
coeWipe cs l r
  =  let  eval coe = cs `cSubstApp` (coe `coeEvalOn` CExpr_CoeArg)
          w l r =  case (l,r) of
                     (CoeImplApp li:ls,CoeImplLam ri:rs)
                                    | li == ri   -> w ls rs
                                    | otherwise  -> (l,r)
                     (lc:ls,rc:rs)  -- | match      -> w ls rs
                                    | otherwise  -> (CoeC lce : ls, CoeC rce : rs)
                         where  lce    =  eval lc
                                rce    =  eval rc
                                notFreeIn n e
                                       =  not (n `Set.member` cexprFvS e)
                                match  =  case (lce,rce) of
                                            (CExpr_App f (CExpr_Var  ln),CExpr_Lam rn CExpr_CoeArg)
                                              -> ln == rn && notFreeIn ln f
                                            (CExpr_App f (CExpr_Hole li),CExpr_Lam rn CExpr_CoeArg)
                                              -> l  == r  && notFreeIn rn f
                                              where l = show li
                                                    r = show rn
                                            _                       -> False
                     _ -> (l,r)
          (l',r') = w (reverse l) (reverse r)
     in   (reverse l',reverse r')

mkPoisAppCoe :: EHCOpts -> [PredOccId] -> [Coe]
mkPoisAppCoe opts = map (\i -> mkAppCoe [mkCExprPrHole opts i])

mkImplsAppCoe :: EHCOpts -> Impls -> [Coe]
mkImplsAppCoe opts = mkPoisAppCoe opts . implsPrIds

mkPoiLLamCoe :: Coe -> [PredOccId] -> [Coe]
mkPoiLLamCoe onLast poiL
  =  case map (mkLamCoe . poiHNm) poiL of
       l@(_:_)  ->  let  h = init l
                         t = last l
                    in   h ++ [t `coeCompose` onLast]
       _ | coeIsId onLast
                ->  []
         | otherwise
                ->  [onLast]

mkImplsLamCoe :: Coe -> Impls -> [Coe]
mkImplsLamCoe onLast is = mkPoiLLamCoe onLast (implsPrIds is)

mkLamBodyCoe :: Coe -> [Coe] -> [Coe]
mkLamBodyCoe onLast l
  =  case l of
       (_:_)    ->  let  h = init l
                         t = last l
                    in   h ++ [onLast `coeCompose` t]
       _        ->  case onLast `coeEvalOn` CExpr_CoeArg of
                      CExpr_CoeArg  -> []
                      _             -> [onLast]

instance PP Coe where
  pp c = "<" >|< pp (c `coeEvalOn` CExpr_CoeArg) >|< ">"
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% LRCoe coercion for lamda
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[9 hs export(lrcoeWipeWeave,lrcoeForLamTyApp)
lrcoeWipeWeave :: EHCOpts -> VarMp -> CSubst -> LRCoe -> Coe
lrcoeWipeWeave opts cnstr csubst (LRCoe LRCoeId _ _) = coeId
lrcoeWipeWeave opts cnstr csubst lrcoe               = coeWipeWeave opts cnstr csubst (lrcoeLeftL lrcoe) (lrcoeRightL lrcoe)

lrcoeForLamTyApp :: EHCOpts -> UID -> CSubst -> LRCoe -> LRCoe -> LRCoe
lrcoeForLamTyApp opts uniq csubst f a
  = LRCoe k [l] [r] `lrcoeUnion` a
  where n = uidHNm uniq
        r = mkLamCoe n
        (k,l)
          = case f of
              lr@(LRCoe LRCoeOther _ _)
                -> (lrcoeKindOfCoe c, l)
                where l = mkAppCoe [c `coeEvalOn` CExpr_Var n]
                      c = lrcoeWipeWeave opts emptyVarMp csubst lr
              LRCoe LRCoeId _ _
                -> (LRCoeId, l)
                where l = mkAppCoe [CExpr_Var n]

%%]

