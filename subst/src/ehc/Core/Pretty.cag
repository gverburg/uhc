%%[0
%include lhs2TeX.fmt
%include afp.fmt
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Haskell importable interface to Code's Java gen
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[8 hs module {%{EH}Core.Pretty} import(EH.Util.Pretty,{%{EH}Base.Builtin},{%{EH}Base.CfgPP},{%{EH}Base.Opts},{%{EH}Base.Common},{%{EH}Ty},{%{EH}Ty.Pretty},{%{EH}Core},{%{EH}Scanner.Common(coreScanOpts)}) export(ppCModule)
%%]

%%[9 hs import(qualified Data.Map as Map,qualified Data.Set as Set,{%{EH}Ty.Pretty}) export(ppCBindL)
%%]

%%[8.WRAPPER ag import({Core/AbsSyn})
WRAPPER CodeAGItf CExpr
%%]

%%[8 hs
ppCModule :: EHCOpts -> CModule -> PP_Doc
ppCModule opts cmod
  =  let  t = wrap_CodeAGItf (sem_CodeAGItf (CodeAGItf_AGItf cmod)) Inh_CodeAGItf
     in   (pp_Syn_CodeAGItf t)

ppCExpr :: CExpr -> PP_Doc
ppCExpr ce
  =  let  t = wrap_CExpr (sem_CExpr ce) Inh_CExpr
     in   (pp_Syn_CExpr t)

instance PP CExpr where
  pp ce = ppCExpr ce
%%]

%%[8 hs
ppCNm :: HsName -> PP_Doc
ppCNm = cfgppHsName CfgPP_Core
%%]

%%[9 hs
ppCBindL :: CBindL -> PP_Doc
ppCBindL = ppAssocL . map (\(CBind_Bind n v) -> (n,v))
%%]

%%[9 hs
ppHole :: UID -> PP_Doc
ppHole i = "<" >|< pp i >|< ">"
%%]

%%[9 hs
%%]
ppCxBindLMap :: CxBindLMap -> PP_Doc
ppCxBindLMap (CxBindLMap m)
  =  ppAssocLV
  .  assocLMapElt
        (\cbs
            -> ppAssocL . map (\(CBind_Bind n v,i,dpds) -> (n,pp v >-< (ppBracketsCommas . Set.toList $ dpds) >#< "->" >#< pp i)) $ cbs
        )
  .  Map.toList $ m

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Pretty printed code
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[8 hs
ppDef :: (PP a, PP b) => a -> b -> PP_Doc
ppDef n v   = n >-< indent 1 v

ppDef' :: (PP a, PP b) => a -> b -> PP_Doc
ppDef' n v   = ppOr (n >-< indent 1 v) (n >#< v)
-- ppDef' n v   = ppDef n v

ppOr :: (PP a, PP b) => a -> b -> PP_Doc
-- ppOr a b   = join (a >//< b)
ppOr a b   = pp a

ppOr' :: (PP a, PP b) => a -> b -> PP_Doc
-- ppOr' a b   = ppOr a b
ppOr' a b   = pp a

ppLit :: String -> String -> PP_Doc
ppLit kind val = "#" >|< kind >|< pp (show val)

ppTag :: CTag -> PP_Doc
ppTag t = "#Tag" >|< ppCTag' CfgPP_Core t
%%]

%%[8
ATTR CodeAGItf AllCodeNT [ | | pp USE {>-<} {empty} : PP_Doc ]
ATTR CPatBindL CPatL CBindL CAltL [ | | ppL: {[PP_Doc]} ]
ATTR CExpr [ | | lamBodyPP: PP_Doc  lamArgPPL: {[PP_Doc]} ]
ATTR CExpr [ | | appFunPP : PP_Doc  appArgPPL: {[PP_Doc]} ]

SEM CModule
  | Mod         lhs         .   pp          =   "module" >#< ppCNm @moduleNm >#< "=" >-< @expr.pp >-< "-- data type tag map:" >-< ppCTagsMp CfgPP_Core @ctagsMp

SEM CExpr
  | Int         loc         .   pp          =   ppLit "Int"    (show @int)
  | Char        loc         .   pp          =   ppLit "Char"   [@char]
  | String      loc         .   pp          =   ppLit "String" @str
%%[[97
  | Integer     loc         .   pp          =   ppLit "Integer" (show @integer)
%%]
  | Var         loc         .   pp          =   ppCNm @nm
  | App         loc         .   pp          =   let args = reverse $ map ppParens $ @appArgPPL
                                                    fun  = ppParens @appFunPP
                                                in  ppOr (ppDef fun (vlist args))
                                                         (fun >#< (ppSpaces args))
  | Let         loc         .   ppCateg     =   case @categ of
                                                  CBindRec     -> pp " rec"
                                                  CBindStrict  -> pp " !"
                                                  CBindFFI     -> pp " foreign"
                                                  _            -> empty
                            .   pp          =   ppDef ("let" >|< @ppCateg) (ppCurlysSemisBlock @binds.ppL) >#< "in" >-< @body.pp
  | Lam         loc         .   pp          =   ppOr' (ppDef ("\\" >|< ppSpaces @lamArgPPL >#< "->") (@lamBodyPP))
                                                      ("\\" >|< ppSpaces @lamArgPPL >#< "->" >#< @lamBodyPP)
  | Case        loc         .   pp          =   "case" >#< @expr.pp >#< "of"
                                                >-< indent 1 (ppCurlysSemisBlock @alts.ppL >-< ppCurlysSemisBlock [ppDef "default" @dflt.pp])
  | Tup         loc         .   pp          =   ppTag @tag
  | TupDel      loc         .   pp          =   ppDef (ppParens @expr.pp) ("-=" >|< ppCurlysCommas' [ppTag @tag,@offset.pp,ppCNm @nm])
  | TupIns      loc         .   pp          =   ppDef (ppParens @expr.pp) (ppDef ("+=" >|< ppCurlysCommas' [ppTag @tag,@offset.pp,ppCNm @nm]) (ppParens @fldExpr.pp))
  | TupUpd      loc         .   pp          =   ppDef (ppParens @expr.pp) (ppDef (":=" >|< ppCurlysCommas' [ppTag @tag,@offset.pp,ppCNm @nm]) (ppParens @fldExpr.pp))
  | CaseAltFail loc			.	pp			=	pp "FAIL" >#< @caseId

SEM CExpr
  | Lam         loc         .   lamBodyPP   =   @body.lamBodyPP
                            .   lamArgPPL   =   ppCNm @arg : @body.lamArgPPL
  | * - Lam     lhs         .   lamBodyPP   =   @pp
                            .   lamArgPPL   =   []

SEM CExpr
  | App         loc         .   appFunPP    =   @func.appFunPP
                            .   appArgPPL   =   @arg.pp : @func.appArgPPL
  | * - App     lhs         .   appFunPP    =   @pp
                            .   appArgPPL   =   []

SEM CBind
  | Bind        lhs         .   pp          =   ppDef (ppCNm @nm >#< "=") (@expr.pp)
  | FFI         lhs         .   pp          =   ppDef (ppCNm @nm >#< "=")
                                                      ("foreign" >#< ppCurlysCommasBlock [pp (show @callconv),pp (show @safety),pp (show @impEnt),ppTyWithCfg' CfgPP_HI @ty])

SEM CBindL
  | Nil         lhs         .   ppL         =   []
  | Cons        lhs         .   ppL         =   @hd.pp : @tl.ppL

SEM CAlt
  | Alt         lhs         .   pp          =   ppDef (@pat.pp >#< "->") (@expr.pp)

SEM CAltL
  | Nil         lhs         .   ppL         =   []
  | Cons        lhs         .   ppL         =   @hd.pp : @tl.ppL

SEM CPat
  | Int         lhs         .   pp          =   ppCNm @pnm >#< ppLit "Int"    (show @int)
  | Char        lhs         .   pp          =   ppCNm @pnm >#< ppLit "Char"   [@char]
  | Var         lhs         .   pp          =   ppCNm @pnm
  | Con         lhs         .   pp          =   ppDef (ppCNm @pnm >#< ppTag @tag)
                                                      (ppCurly (@rest.pp >|< "|" >|< ppCommas' @binds.ppL))

SEM CPatL
  | Nil         lhs         .   ppL         =   []
  | Cons        lhs         .   ppL         =   @hd.pp : @tl.ppL

SEM CPatBind
  | Bind        lhs         .   pp          =   ppCurlysCommas' [ppCNm @lbl,@offset.pp,ppCNm @nm] >|< "=" >|< @pat.pp

SEM CPatRest
  | Var         lhs         .   pp          =   ppCNm @nm

SEM CPatBindL
  | Nil         lhs         .   ppL         =   []
  | Cons        lhs         .   ppL         =   @hd.pp : @tl.ppL
%%]
  | Undef       lhs         .   pp          =   pp hsnUnknown

  | TupSplit    lhs         .   pp          =   (cpatNmEither ((>|< "@") . pp) (const empty) @pnm)
                                                >|< ppParens (@pat.pp >|< "|">|< pp @tag >|< ":" >|< @offset.pp >|< "=" >|< @fldPat.pp)

%%[9
SEM CExpr
  | Hole        loc         .   pp          =   ppHole @uid
  | HoleLet     loc         .   pp          =   "let --" >#< ppHole @bindsUid >-< ppDef "in" @body.pp
  | CoeArg      loc         .   pp          =   pp "<_>"
  | ImplsApp    loc         .   pp          =   ppDef (@func.pp >#< "-- Impl") (ppHole @uid)
  | ImplsLam    loc         .   pp          =   ppDef ("\\" >|< ppHole @uid >#< "-- Impl") ("->" >#< @body.pp)
%%]

