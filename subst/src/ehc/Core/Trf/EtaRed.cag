%%[0
%include lhs2TeX.fmt
%include afp.fmt
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Eta reduce
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Note:
removal of CaseAltFail is done here.
No special reason except it is the first transformation.

%%[8 hs module {%{EH}Core.Trf.EtaRed} import(Data.Maybe,qualified Data.Set as Set,qualified Data.Map as Map)
%%]

%%[8 hs import({%{EH}Base.Common},{%{EH}Core},{%{EH}Ty}) export(cmodTrfEtaRed)
%%]

%%[8.WRAPPER ag import({Core/AbsSyn},{Core/CommonLev},{Core/Trf/CommonFv})
WRAPPER CodeAGItf
%%]

%%[99
PRAGMA strictcase
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Haskell itf
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[8 hs
cmodTrfEtaRed :: CModule -> CModule
cmodTrfEtaRed cmod
  =  let  t = wrap_CodeAGItf (sem_CodeAGItf (CodeAGItf_AGItf cmod)) Inh_CodeAGItf
     in   cTrf_Syn_CodeAGItf t
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Maybe an app
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[8 hs
type MbApp = Maybe ((CExpr,FvS),CExpr)
%%]

%%[8
ATTR CExpr [ | | mbApp: MbApp  mbFunAppL: {[MbApp]} ]

SEM CExpr
  | App         lhs         .   mbApp       =   case @func.mbTupApp of
                                                  Just _  -> Nothing
                                                  Nothing -> Just ((@func.cTrf,@func.fvS),@arg.cTrf)
                            .   mbFunAppL   =   @func.mbApp : @func.mbFunAppL
  | Lam         lhs         .   (mbApp,mbFunAppL)
                                            =   case @body.mbFunAppL of
                                                  (f:fs) | @isMatch
                                                    -> (f,fs)
                                                  _ -> (Nothing,@body.mbFunAppL)
  | * - App Lam lhs         .   mbApp       =   Nothing
  | * - App Lam lhs         .   mbFunAppL   =   []
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Transformation
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[8
ATTR AllCodeNT [ | | cTrf: SELF ]
ATTR CodeAGItf [ | | cTrf: CModule ]

SEM CExpr
  | Lam         (loc.cNew,loc.isMatch)      =   case @body.mbApp of
                                                  Just ((f,fFvS),CExpr_Var a) | a == @arg && not (a `Set.member` fFvS)
                                                    -> (f,True)
                                                  _ -> (@cTrf,False)
                lhs         .   cTrf        =   @cNew
  | CaseAltFail lhs         .   cTrf        =   @errorExpr.cTrf
%%]

