%%[0
%include lhs2TeX.fmt
%include afp.fmt
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Common AG for Core transformations
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Level of id's
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[8
ATTR AllCodeNT [ levMp: LevMp | | ]

SEM CodeAGItf
  | AGItf       module      .   levMp       =   Map.empty

SEM CExpr
  | Lam         body        .   levMp       =   Map.insert @arg @lev @lhs.levMp
  | Let         loc         .   maxBindLev  =   fvsLev @lhs.levMp cLevModule @binds.fvS
                (loc.strLev,binds.levMp)    =   case @categ of
                                                    CBindStrict -> (const @lhs.lev,@lhs.levMp)
                                                    CBindRec    -> (const @maxBindLev,(Map.fromList . zipWith (\l n -> (n,l)) (repeat @maxBindLev) . Map.keys $ @binds.levOfMp) `Map.union` @lhs.levMp)
                                                    _           -> (id,@lhs.levMp)
                body        .   levMp       =   Map.map @strLev @binds.levOfMp `Map.union` @lhs.levMp

SEM CAlt
  | Alt         expr        .   levMp       =   Map.fromList (zip @pat.nmL (repeat @lev)) `Map.union` @lhs.levMp
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Intro level of id's
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[8
ATTR AllCodeNT [ introLevMp: LevMp | | ]

SEM CodeAGItf
  | AGItf       module      .   introLevMp  =   Map.empty

SEM CExpr
  | Lam         body        .   introLevMp  =   Map.insert @arg @lev @lhs.introLevMp
  | Let         loc         .   introLevMp  =   Map.map (const @lhs.lev) @binds.bindsIntroLevMp `Map.union` @lhs.introLevMp

SEM CAlt
  | Alt         expr        .   introLevMp  =   Map.fromList (zip @pat.nmL (repeat @lev)) `Map.union` @lhs.introLevMp
%%]

%%[8
ATTR AllBind [ | | bindsIntroLevMp USE {`Map.union`} {Map.empty}: LevMp ]

SEM CBind
  | Bind        lhs         .   bindsIntroLevMp
                                            =   Map.singleton @nm @lhs.lev
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Level of expr
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[8
ATTR AllCodeNT [ | | levOf USE {`max`} {cLevModule}: Int ]

SEM CExpr
  | Var         lhs         .   levOf       =   Map.findWithDefault cLevExtern @nm @lhs.levMp
  | App         loc         .   levOf       =   @func.levOf `max` @arg.levOf
  | Case        loc         .   levOf       =   @expr.levOf `max` @alts.levOf `max` @dflt.levOf
  | TupDel      loc         .   levOf       =   @expr.levOf `max` @offset.levOf
  | TupIns TupUpd
                loc         .   levOf       =   @expr.levOf `max` @offset.levOf `max` @fldExpr.levOf
  | Lam         loc         .   levOf       =   fvsLev @lhs.levMp cLevModule @body.fvS
  | Let         loc         .   levOf       =   fvsLev @lhs.levMp cLevModule @fvS
%%[[20
  | String      loc         .   levOf       =   cLevIntern
%%]]

SEM CAlt
  | Alt         lhs         .   levOf       =   fvsLev @lhs.levMp cLevModule @expr.fvS

ATTR AllBind [ | | levOfMp USE {`Map.union`} {Map.empty}: LevMp ]

SEM CBind
  | Bind        lhs         .   levOfMp     =   Map.singleton @nm @expr.levOf
%%]

