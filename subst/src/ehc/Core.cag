%%[0
%include lhs2TeX.fmt
%include afp.fmt
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Haskell importable interface to Code
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[8 hs module {%{EH}Core} import({%{EH}Base.Builtin},{%{EH}Base.Common},{%{EH}Base.Opts},Data.List,EH.Util.Pretty)
%%]

%%[8 hs export(CodeAGItf(..), CModule(..), CExpr(..), CBind(..), CBindL, CBindCateg(..), CPatRest(..), CAlt(..), CAltL, CPat(..), CPatL, CPatBind(..), CPatBindL) 
%%]

%%[8 hs export(RPatNm(..))
%%]

%%[8 hs import(qualified Data.Map as Map,qualified Data.Set as Set,{%{EH}Ty}) export(FvS,FvSMp,LevMp,fvLev,fvsLev)
%%]

%%[8 hs export(mkCMod)
%%]

%%[8 hs export(CaseFailSubst)
%%]

%%[9 hs import(Data.Maybe)
%%]

%%[9 hs export(cbindLNub)
%%]

%%[20 hs export(cModMerge)
%%]

%%[8 ag import({Core/AbsSyn})
DERIVING *     : Show, Eq
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Abstract syntax for encoding case+pattern rewrite info
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[8 hs export(RAlt(..),RPat(..),RPatConBind(..),RPatBind(..))
data RAlt
  = RAlt_Alt			{ rcaPats :: ![RPat], raaExpr :: !CExpr }

data RPat
  = RPat_Var			{ rcpPNm :: !RPatNm }
  | RPat_Con			{ rcpPNm :: !RPatNm, rcpTag :: !CTag, rcpBinds :: !RPatConBind }
  | RPat_Int			{ rcpPNm :: !RPatNm, rcpInt :: !Int }
  | RPat_Char			{ rcpPNm :: !RPatNm, rcpChar :: !Char }
  | RPat_Irrefutable	{ rcpPNm :: !RPatNm, rcpCBindL :: ![CBind] }
%%[[97
  | RPat_BoolExpr		{ rcpPNm :: !RPatNm, rcpExpr :: !CExpr }
%%]]

data RPatConBind
  = RPatConBind_One		{ rpcbRest :: !CPatRest, rpcbBinds :: ![RPatBind] }
  | RPatConBind_Many	{ rpcbConBinds :: ![RPatConBind] }

data RPatBind
  = RPatBind_Bind		{ rpbLbl :: !HsName, rpbOffset :: !CExpr, rpbNm :: !HsName, rpbPat :: !RPat }
%%]

%%[8 hs export(rcaPat,raltLPatNms)
rcaPat :: RAlt -> RPat
rcaPat = head . rcaPats

raltLPatNms :: [RAlt] -> [RPatNm]
raltLPatNms = nub . sort . map (rcpPNm . rcaPat)
%%]

%%[8 hs export(rcaTag)
rpatConTag :: RPat -> CTag
rpatConTag (RPat_Int  _ _   )  = ctagInt
rpatConTag (RPat_Char _ _   )  = ctagChar
rpatConTag p                   = rcpTag p

rcaTag :: RAlt -> CTag
rcaTag = rpatConTag . head . rcaPats
%%]

%%[8 hs export(raltIsVar,raltIsConst)
raltIsVar :: RAlt -> Bool
raltIsVar (RAlt_Alt (RPat_Var _ : _) _)  = True
raltIsVar _                              = False

raltIsConst :: RAlt -> Bool
raltIsConst (RAlt_Alt (p : _) _)
  = c p
  where c (RPat_Int   _ _) = True
        c (RPat_Char  _ _) = True
        c _                = False
%%]

%%[8 hs export(raltIsConMany)
raltIsConMany :: RAlt -> Bool
raltIsConMany (RAlt_Alt (RPat_Con _ _ (RPatConBind_Many _) : _) _) = True
raltIsConMany _                                                    = False
%%]

%%[8 hs export(raltIsIrrefutable)
raltIsIrrefutable :: RAlt -> Bool
raltIsIrrefutable (RAlt_Alt (RPat_Irrefutable _ _ : _) _) = True
raltIsIrrefutable _                                       = False
%%]

%%[97 hs export(raltIsBoolExpr)
raltIsBoolExpr :: RAlt -> Bool
raltIsBoolExpr (RAlt_Alt (RPat_BoolExpr _ _ : _) _)  = True
raltIsBoolExpr _                                     = False
%%]

%%[8 hs export(rpatConBindUnFlatten)
rpatConBindUnFlatten :: [RPatConBind] -> RPatConBind
rpatConBindUnFlatten [b] = b
rpatConBindUnFlatten bs  = RPatConBind_Many bs
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Conversion from Rxxx -> Cxxx
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[8 hs export(rpat2CPat)
rpat2CPat :: RPat -> CPat
rpat2CPat p
  = case p of
      RPat_Var      n       -> CPat_Var (rpatNmNm n)
      RPat_Con      n t b   -> CPat_Con (rpatNmNm n) t r bs
                            where (r,bs) = rpatConBind2CPatConBind b
      RPat_Int      n v     -> CPat_Int (rpatNmNm n) v
      RPat_Char     n v     -> CPat_Char (rpatNmNm n) v
%%[[97
      RPat_BoolExpr n v     -> CPat_BoolExpr (rpatNmNm n) v
%%]]
%%]

%%[8 hs export(rpatConBind2CPatConBind,rpatBind2CPatBind)
rpatConBind2CPatConBind :: RPatConBind -> (CPatRest,[CPatBind])
rpatConBind2CPatConBind b
  = case b of
  	  RPatConBind_One 	r bs 	-> (r,map rpatBind2CPatBind bs)
  	  RPatConBind_Many 	bs 		-> head (map rpatConBind2CPatConBind bs)

rpatBind2CPatBind :: RPatBind -> CPatBind
rpatBind2CPatBind (RPatBind_Bind l o n p) = CPatBind_Bind l o n (rpat2CPat p)
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Tuple operator info
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[10 hs export(cTupLbl)
cTupLbl :: CExpr -> HsName
cTupLbl e
  =  case e of
         CExpr_TupIns _ _ l _ _ -> l
         CExpr_TupUpd _ _ l _ _ -> l
         CExpr_TupDel _ _ l _   -> l
%%]

%%[10 hs export(cTupTag)
cTupTag :: CExpr -> CTag
cTupTag e
  =  case e of
         CExpr_TupIns _ t _ _ _ -> t
         CExpr_TupUpd _ t _ _ _ -> t
         CExpr_TupDel _ t _ _   -> t
%%]

%%[10 hs export(cTupOff)
cTupOff :: CExpr -> CExpr
cTupOff e
  =  case e of
         CExpr_TupIns _ _ _ o _ -> o
         CExpr_TupUpd _ _ _ o _ -> o
         CExpr_TupDel _ _ _ o   -> o
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Binding category
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[8 hs
data CBindCateg = CBindRec | CBindStrict | CBindPlain | CBindFFI deriving (Show,Eq)
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Remove duplicate bindings
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[9 hs
cbindLNub :: CBindL -> CBindL
cbindLNub = nubBy (\(CBind_Bind n1 _) (CBind_Bind n2 _) -> n1 == n2)
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Name of a pattern var/con
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[8 hs
data RPatNm
  = RPatNmOrig {rpatNmNm :: !HsName}
  | RPatNmUniq {rpatNmNm :: !HsName}
  deriving (Ord,Eq)

instance Show RPatNm where
  show pnm = show (rpatNmNm pnm)
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Construction
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[8 hs export(mkCExprLet,mkCExprLet',mkCExprLetRec,mkCExprLam,mkCExprApp,mkCExprStrictIn)
mkCExprLet' :: Bool -> CBindCateg -> CBindL -> CExpr -> CExpr
mkCExprLet' merge c bs e
  = if null bs
    then e
    else case e of
           CExpr_Let c' bs' e' | merge && c' == c
             -> CExpr_Let c (bs++bs') e'
           _ -> CExpr_Let c bs e

mkCExprLet :: CBindCateg -> CBindL -> CExpr -> CExpr
mkCExprLet c bs e = mkCExprLet' False c bs e

mkCExprLetRec :: CBindL -> CExpr -> CExpr
mkCExprLetRec = mkCExprLet CBindRec

mkCExprLam :: [HsName] -> CExpr -> CExpr
mkCExprLam as e = foldr (\n e -> CExpr_Lam n e) e as

mkCExprApp :: CExpr -> [CExpr] -> CExpr
mkCExprApp f as = foldl (\f a -> CExpr_App f a) f as

mkCExprStrictIn :: HsName -> CExpr -> (CExpr -> CExpr) -> CExpr
mkCExprStrictIn nm e mkC = CExpr_Let CBindStrict [CBind_Bind nm e] (mkC (CExpr_Var nm))
%%]

%%[8 hs
mkCMod :: CExpr -> CModule
mkCMod e = CModule_Mod (hsnFromString "") e []
%%]

%%[97 hs export(mkCIf)
mkCIf :: EHCOpts -> HsName -> CExpr -> CExpr -> CExpr -> CExpr
mkCIf opts cn c t f
  = mkCExprStrictIn cn c
    $ (\c -> CExpr_Case c
               [ CAlt_Alt (CPat_Con hsnUnknown (ctagFalse opts) CPatRest_Empty []) f
               , CAlt_Alt (CPat_Con hsnUnknown (ctagTrue  opts) CPatRest_Empty []) t
               ]
               (cundefined opts)
      )
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Inspection/deconstruction
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[8 hs export(cexprVar)
cexprVar :: CExpr -> HsName
cexprVar (CExpr_Var n) = n
cexprVar _             = hsnUnknown
%%]

%%[8 hs export(cexprTupFld)
cexprTupFld :: CExpr -> CExpr
cexprTupFld (CExpr_TupIns _ _ _ _ e) = e
cexprTupFld _                        = CExpr_Var hsnUnknown
%%]

%%[8 hs export(cexprIsEvaluated)
cexprIsEvaluated :: CExpr -> Bool
cexprIsEvaluated (CExpr_Int  _) = True
cexprIsEvaluated (CExpr_Char _) = True
cexprIsEvaluated _              = False
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Operator construction, expressed in terms of primitives
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[8 hs export(caddint)
caddint :: EHCOpts -> CExpr -> Int -> CExpr
caddint opts e i
  = if i == 0
    then e
    else case e of
           CExpr_Int i' -> CExpr_Int $ i+i'
           _            -> CExpr_Var (ehbnPrimAddInt $ ehcOptBuiltinNames opts) `mkCExprApp` [e,CExpr_Int i]
%%]

%%[8 hs export(cgtint)
cgtint :: EHCOpts -> CExpr -> Int -> CExpr
cgtint opts e i = CExpr_Var (ehbnPrimGtInt $ ehcOptBuiltinNames opts) `mkCExprApp` [e,CExpr_Int i]
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% String construction
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[8 hs export(cstring)
cstring :: EHCOpts -> String -> CExpr
cstring opts m = CExpr_Var (ehbnPackedStringToString $ ehcOptBuiltinNames opts) `mkCExprApp` [CExpr_String m]
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Integer construction
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[97 hs export(cinteger)
cinteger :: EHCOpts -> Integer -> CExpr
cinteger opts i = CExpr_Var (ehbnPackedStringToInteger $ ehcOptBuiltinNames opts) `mkCExprApp` [CExpr_String $ show $ i]
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Error
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[8 hs export(cerror,cundefined)
cerror :: EHCOpts -> String -> CExpr
cerror opts m = CExpr_Var (ehbnError $ ehcOptBuiltinNames opts) `mkCExprApp` [cstring opts m]

cundefined :: EHCOpts -> CExpr
cundefined opts = CExpr_Var (ehbnUndefined $ ehcOptBuiltinNames opts)
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Misc
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[8 hs export(caltTag) 
cpatConTag :: CPat -> CTag
cpatConTag (CPat_Con  _ t _ _)  = t
cpatConTag (CPat_Int  _ _    )  = ctagInt
cpatConTag (CPat_Char _ _    )  = ctagChar

caltTag :: CAlt -> CTag
caltTag (CAlt_Alt p _) = cpatConTag p
%%]

%%[97 hs export(ctagTrue, ctagFalse)
ctagTrue, ctagFalse :: EHCOpts -> CTag
ctagTrue  opts = CTag (ehbnDataBool $ ehcOptBuiltinNames opts) (ehbnBoolTrue  $ ehcOptBuiltinNames opts) 1 0 0		-- this makes it hardcoded, ideally dependent on datatype def itself !!
ctagFalse opts = CTag (ehbnDataBool $ ehcOptBuiltinNames opts) (ehbnBoolFalse $ ehcOptBuiltinNames opts) 0 0 0		-- this makes it hardcoded, ideally dependent on datatype def itself !!
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Support for transformations
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[8 hs
type FvS = HsNameS
type FvSMp = Map.Map HsName FvS
%%]

%%[8 hs export(cLevModule,cLevExtern)
cLevModule, cLevExtern :: Int
cLevModule = 0
cLevExtern = 0
%%]

%%[20 hs export(cLevIntern)
cLevIntern :: Int
cLevIntern = 1
%%]

%%[8 hs
type LevMp = Map.Map HsName Int

fvLev :: LevMp -> HsName -> Int
fvLev lm n = Map.findWithDefault cLevExtern n lm

fvsLev :: LevMp -> Int -> FvS -> Int
fvsLev lm lDflt fvs = foldr (\n l -> fvLev lm n `max` l) lDflt $ Set.toList $ fvs

%%]
levMpAdd :: LevMp -> FvSMp -> LevMp
levMpAdd lm fvm = Map.map (fvsLev lm) fvm `Map.union` lm

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Known function arity
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[8 hs export(CArityMp)
type CArityMp = Map.Map HsName Int
%%]

%%[8 hs export(arityMpLookupLam,arityMpLookupCaf)
arityMpLookupLam :: HsName -> CArityMp -> Maybe Int
arityMpLookupLam n m
  = case Map.lookup n m of
      j@(Just a) | a > 0 -> j
      _                  -> Nothing

arityMpLookupCaf :: HsName -> CArityMp -> Maybe Int
arityMpLookupCaf n m
  = case Map.lookup n m of
      j@(Just a) | a == 0 -> j
      _                   -> Nothing
%%]

%%[8 hs export(arityMpFilterLam,arityMpFilterCaf)
arityMpFilterLam :: CArityMp -> CArityMp
arityMpFilterLam = Map.filter (>0)

arityMpFilterCaf :: CArityMp -> CArityMp
arityMpFilterCaf = Map.filter (==0)
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Name to offset (in a record)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[20 hs export(HsName2OffsetMp,HsName2OffsetMpMp)
type HsName2OffsetMp = Map.Map HsName Int
type HsName2OffsetMpMp = Map.Map HsName (Int,HsName2OffsetMp)
%%]

%%[20 hs export(offMpMpKeysSet)
offMpMpKeysSet :: HsName2OffsetMpMp -> Set.Set HsName
offMpMpKeysSet m = Set.unions [ Map.keysSet m' | (_,m') <- Map.elems m ]
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Hole construction
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[9 hs export(mkCExprPrHole,mkCExprHole)
mkCExprHole :: EHCOpts -> UID -> CExpr
mkCExprHole opts = CExpr_Var . mkHNm

mkCExprPrHole :: EHCOpts -> PredOccId -> CExpr
mkCExprPrHole opts = mkCExprHole opts . poiId

mkCExprLetHole :: UID -> CExpr -> CExpr
mkCExprLetHole i b = i `CExpr_HoleLet` b
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Coercion
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[9 hs export(Coe(..), mkCoe, coeId, coeIsId, mkAppCoe, mkLamCoe, mkLamLetCoe, mkLetRecCoe)
data Coe = Coe !(CExpr -> CExpr) | CoeC !CExpr | CoeImplApp !ImplsVarId | CoeImplLam !ImplsVarId

coeId :: Coe
coeId = CoeC CExpr_CoeArg

coeIsId :: Coe -> Bool
coeIsId (CoeC CExpr_CoeArg) = True
coeIsId _                   = False

mkCoe :: (CExpr -> CExpr) -> Coe
mkCoe = Coe

mkAppCoe :: [CExpr] -> Coe
mkAppCoe eL = mkCoe (\e -> e `mkCExprApp` eL)

mkLamCoe :: HsName -> Coe
mkLamCoe n = mkCoe (\e -> n `CExpr_Lam` e)

mkLamLetCoe :: HsName -> UID -> Coe
mkLamLetCoe n i = mkCoe (\e -> n `CExpr_Lam` mkCExprLetHole i e)

mkLetRecCoe :: CBindL -> Coe
mkLetRecCoe [] = coeId
mkLetRecCoe b  = mkCoe (\e -> mkCExprLet CBindRec b e)

instance Show Coe where
  show _ = "COE"
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Coercion for lamda
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

A LRCoe represents a coercion in a much more finegrained manner:
- a right Coe list, a list of coercions for building the rhs side of a subsumption, which must be the lambda
- a left Coe list a list of coercions for building the lhs side of a subsumption, which must be an application or other expr using the args of the left Coe

%%[9 hs export(LRCoeKind(..),lrcoeKindOfCoe)
data LRCoeKind = LRCoeId | LRCoeOther deriving Eq

lrcoeKindAnd :: LRCoeKind -> LRCoeKind -> LRCoeKind
lrcoeKindAnd LRCoeId LRCoeId = LRCoeId
lrcoeKindAnd _       _       = LRCoeOther

lrcoeKindOfCoe :: Coe -> LRCoeKind
lrcoeKindOfCoe c = if coeIsId c then LRCoeId else LRCoeOther
%%]

%%[9 hs export(LRCoe(..),emptyLRCoe)
data LRCoe
  = LRCoe
      { lrcoeKind		:: LRCoeKind
      , lrcoeLeftL		:: [Coe]
      , lrcoeRightL 	:: [Coe]
      }

emptyLRCoe :: LRCoe
emptyLRCoe = LRCoe LRCoeId [] []
%%]

%%[9 hs export(lrcoeIsId)
lrcoeIsId :: LRCoe -> Bool
lrcoeIsId c = lrcoeKind c == LRCoeId
%%]

%%[9 hs export(mkLRCoe,mkIdLRCoe,lrcoeLSingleton,lrcoeRSingleton,lrcoeLFromList,lrcoeRFromList)
mkLRCoe :: Coe -> Coe -> LRCoe
mkLRCoe l r = LRCoe LRCoeOther [l] [r]

mkIdLRCoe' :: Coe -> Coe -> LRCoe
mkIdLRCoe' l r = LRCoe LRCoeId [l] [r]

mkIdLRCoe :: HsName -> LRCoe
mkIdLRCoe n = mkIdLRCoe' (mkAppCoe [CExpr_Var n]) (mkLamCoe n)

lrcoeLFromList :: [Coe] -> LRCoe
lrcoeLFromList c = LRCoe LRCoeOther c []

lrcoeRFromList :: [Coe] -> LRCoe
lrcoeRFromList c = LRCoe LRCoeOther [] c

lrcoeLSingleton :: Coe -> LRCoe
lrcoeLSingleton c = LRCoe (lrcoeKindOfCoe c) [c] []

lrcoeRSingleton :: Coe -> LRCoe
lrcoeRSingleton c = LRCoe (lrcoeKindOfCoe c) [] [c]
%%]

%%[9 hs export(lrcoeUnion)
lrcoeUnion :: LRCoe -> LRCoe -> LRCoe
lrcoeUnion (LRCoe k1 l1 r1) (LRCoe k2 l2 r2) = LRCoe (lrcoeKindAnd k1 k2) (l1 ++ l2) (r1 ++ r2)
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Module merge
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[20 hs
cModMerge :: [CModule] -> CModule
cModMerge mL
  = foldr1 cmb mL
  where get (CExpr_Let c b e) = CExpr_Let c b . get e
        get  _                = id
        cmb (CModule_Mod m1 e1 t1) (CModule_Mod m2 e2 t2)
          = CModule_Mod m2 (get e1 e2) (t1++t2)
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Subst to replace CaseAltFail
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[8 hs
type CaseFailSubst = Map.Map UID CExpr
%%]

