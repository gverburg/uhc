%%[doesWhat doclatex

Eliminate unnecessary evaluations.

%%]

%%[(8 codegen grin) ag import({GrinCode/AbsSyn})
%%]

%%[(8 codegen grin) hs module {%{EH}GrinCode.Trf.EvalElim}
%%]

%%[(8 codegen grin) hs import(qualified Data.Set as Set,qualified Data.Map as Map)
%%]

-- for debugging:
%%[(8 codegen grin) hs import(EH.Util.Pretty,EH.Util.Utils)
%%]
%%[(8 codegen grin) hs import(Debug.Trace)
%%]

%%[(8 codegen grin) hs import({%{EH}Base.Builtin}, {%{EH}Base.Common}, {%{EH}GrinCode.Common}, {%{EH}GrinCode})
%%]

%%[(8 codegen grin) hs import(qualified {%{EH}Config} as Cfg)
%%]

%%[(8 codegen grin) ag import({GrinCode/Trf/CommonAliasAG},{GrinCode/Trf/CommonFreeVar},{GrinCode/Trf/CommonWillEval})
%%]

%%[(8 codegen grin) hs export(grEvalElim)
grEvalElim :: GrModule -> GrModule
grEvalElim grmod
  = trf_Syn_GrAGItf t
  where t = wrap_GrAGItf (sem_GrAGItf $ GrAGItf_AGItf grmod)
            $ Inh_GrAGItf
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Wrapper
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 codegen grin).wrapper
WRAPPER GrAGItf
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Is name evaluated already evaluated? Then eval can be avoided.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 codegen grin) hs
data IsEval
  = IsEval_EvalToNode
  | IsEval_EvalToPointer
  | IsEval_Apply    !HsName !GrValL
  | IsEval_None
  deriving Eq

isEvalEvaluated :: IsEval -> Bool
isEvalEvaluated IsEval_None          = False
isEvalEvaluated IsEval_EvalToPointer = False
isEvalEvaluated _                    = True

type IsEvalMp = Map.Map HsName IsEval
%%]

For debugging
%%[(8 codegen grin) hs
instance Show IsEval where
  show IsEval_EvalToNode = "IsEval_EvalToNode"
  show IsEval_EvalToPointer = "IsEval_EvalToPointer"
  show IsEval_None = "IsEval_None"
  show (IsEval_Apply f _) = "IsEval_Apply " ++ show f
%%]

%%[(8 codegen grin)
ATTR AllExpr [ isEvalMp: IsEvalMp | | ]

SEM GrExpr
  | Seq         body        .   isEvalMp        =   -- trace ("pat=" ++ show @pat.trf ++ " alias=" ++ show @pat.nmAlias ++ " isEval: " ++ show @expr.isEval) $
                                                    case @pat.nmAlias of
                                                      NmAlias_Nm nmp | isEvalEvaluated @expr.isEval
                                                        -> Map.insert nmp @expr.isEval @lhs.isEvalMp
                                                      _ -> @lhs.isEvalMp `Map.difference` Map.fromList (zip @pat.introNmL @pat.introNmL)

SEM GrBind
  | Bind        expr        .   isEvalMp        =   Map.empty

SEM GrGlobal
  | Global      val         .   isEvalMp        =   Map.empty

SEM GrAlt
  | Alt         expr        .   isEvalMp        =   @lhs.isEvalMp `Map.difference` Map.fromList (zip @pat.introNmL @pat.introNmL)
%%]

%%[(8 codegen grin)
ATTR GrExpr GrVal [ | | isEval: IsEval ]

SEM GrExpr
  | FFI Call Eval
                lhs         .   isEval          =   IsEval_EvalToNode
  | App         lhs         .   isEval          =   case @appTrf of
                                                      GrExpr_App f as -> IsEval_Apply f as
  | * - FFI Call Eval App
        Store Unit
                lhs         .   isEval          =   IsEval_None

SEM GrVal
  | LitInt      lhs         .   isEval          =   IsEval_EvalToPointer
  | Var         lhs         .   isEval          =   maybe IsEval_None
                                                          id 
                                                          (Map.lookup @nm @lhs.isEvalMp)
  | * - Node LitInt Var
                lhs         .   isEval          =   IsEval_None
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Free vars
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 codegen grin)
ATTR GrExpr [ fviMp: FvInfoMp | | ]

SEM GrExpr
  | Seq         expr        .   fviMp           =   @gathBodyFviMp

SEM GrAlt
  | Alt         expr        .   fviMp           =   @expr.gathFviMp

SEM GrBind
  | Bind        expr        .   fviMp           =   @expr.gathFviMp
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Will eval redefinition to introduce fake dependency 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 codegen grin)
SEM GrBind
  | Bind        expr        .   willEval        =   False
                expr        .   gathFviMp       <   expr.willEval
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Transformation: 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 codegen grin)
ATTR GrAGItf [ | | trf: GrModule ]
ATTR AllNT [ | | trf: SELF ]
%%]

%%[(8 codegen grin)
ATTR GrVal [ | | mbGrExpr: {Maybe GrExpr} ]

SEM GrVal
  | Node        (lhs.mbGrExpr,lhs.isEval)       =   case (@tag.trf,@fldL.trf) of
                                                      (GrTag_Fun nm,_) | @lhs.willEval                  -- a to be evaluated saturated call closure -> immediate call
                                                        -> (Just $ GrExpr_Call nm @fldL.trf, IsEval_EvalToNode)
                                                      (GrTag_App _,(GrVal_Var f:fs)) | False && @lhs.willEval       -- a to be evaluated apply closure -> immediate apply
                                                        -> (Just $ GrExpr_Seq (GrExpr_Eval f) (GrPatLam_Var f') (GrExpr_App f fs),IsEval_Apply f' fs)
                                                        where f' = hsnSuffix f "!"
                                                      (GrTag_Con _ _ _,_)                               -- constructor node is evaluated
                                                        -> (Nothing, IsEval_EvalToPointer)
                                                      (GrTag_Rec ,_)                                    -- record as well
                                                        -> (Nothing, IsEval_EvalToPointer)
                                                      (GrTag_PApp nMiss nm,_)                           -- partial app also, cannot be evaluated further, unless 0 missing
                                                        | @lhs.willEval && nMiss == 0
                                                          -> (Just $ GrExpr_Call nm @fldL.trf, IsEval_EvalToNode)
                                                        | otherwise
                                                          -> (Nothing, IsEval_EvalToPointer)
                                                      (t,_)
                                                        -> (Nothing, IsEval_None)
  | * - Node    lhs         .   mbGrExpr        =   Nothing
%%]

%%[(8 codegen grin)
SEM GrExpr
  | Store Unit  lhs         .   trf             =   maybe @trf id @val.mbGrExpr
  | Eval        lhs         .   trf             =   let a = Map.lookup @nm @lhs.isEvalMp
                                                    in  -- trace ("isEval: " ++ show @nm ++ " = " ++ show a) $ 
                                                        case a of
                                                          Just e | isEvalEvaluated e
                                                            -> GrExpr_Unit (GrVal_Var @nm)
                                                          _ -> @trf
  | App         loc         .   appTrf          =   case Map.lookup @nm @lhs.isEvalMp of
                                                      Just (IsEval_Apply f as) | not $ @nm `Map.member` @lhs.fviMp
                                                        -> GrExpr_App f (as ++ @argL.trf)
                                                      _ -> @trf
                lhs         .   trf             =   @appTrf
%%]

