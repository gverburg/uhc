%%[0
%include lhs2TeX.fmt
%include afp.fmt
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Strict Analizer
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[8
ATTR AllExpr [ knPhi : Ann  | | ]

ATTR AllExpr [ annTyGam : AnnTyGam | | strGam : AnnGam ]

ATTR AllExpr [ | | infAnnTy : AnnTy ]

ATTR AllPatExpr [ | | bndVars USE {++} {[]} : { [ HsName ] } ]

ATTR Decls [ knPhi : Ann  | annTyGam : AnnTyGam |  strGam : AnnGam  bndVars : { [ HsName ] } ]

ATTR Decl [ knPhi : Ann  | annTyGam : AnnTyGam | strGam : AnnGam bndVars USE {++} {[]} : { [ HsName ] }  ]

ATTR CaseAlts [ knPhi : Ann  annTyGam : AnnTyGam | |  infAnnTy : AnnTy strGam : AnnGam  end : { Bool } ]

ATTR CaseAlt  [ knPhi : Ann  annTyGam : AnnTyGam | |  infAnnTy : AnnTy strGam : AnnGam  ]

%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Strict Analizer
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[8

SEM AGItf 
  | AGItf       expr        .   knPhi               =   PhiEmpty 
                expr        .   annTyGam            =   emptyGam

SEM Expr
  | IConst      lhs         .   strGam              =   emptyGam
                lhs         .   infAnnTy            =   AnyTy
  | CConst      lhs         .   strGam              =   emptyGam
                lhs         .   infAnnTy            =   AnyTy
  | SConst      lhs         .   strGam              =   emptyGam
                lhs         .   infAnnTy            =   AnyTy
  | Undefined   lhs         .   strGam              =   emptyGam
                lhs         .   infAnnTy            =   anotateTy (@lhs.finTyVarMp |=> @ty)


  | Con         lhs         .   strGam              =   emptyGam
                lhs         .   infAnnTy            =   AnyTy

  | AppTop      lhs         .   strGam              =   @expr.strGam
                lhs         .   infAnnTy            =   @expr.infAnnTy 
  | Parens      lhs         .   strGam              =   @expr.strGam
                lhs         .   infAnnTy            =   @expr.infAnnTy 

  | Var         lhs         .   strGam              =   gamAdd @nm @lhs.knPhi emptyGam
                lhs         .   infAnnTy            =   case gamLookup @nm @lhs.annTyGam of
                                                         Just tau -> tau 
                                                         _        -> anotateTy (@lhs.finTyVarMp |=> @ty)
  | Let         body        .   knPhi               =   Strict
                loc         .   gam2                =   @body.strGam

                loc         .   x                   =   head @decls.bndVars
                loc         .   phi0                =   case gamLookup @loc.x @loc.gam2 of
                                                            Just phi -> phi
                                                            Nothing  -> Lazy
                decls       .   knPhi               =   @lhs.knPhi `join` @loc.phi0

                body        .   annTyGam            =   gamAddGam @decls.annTyGam @lhs.annTyGam

                lhs         .   infAnnTy            =   @body.infAnnTy
                lhs         .   strGam              =   gamSplitConj @decls.strGam (gamContaintment @lhs.knPhi (gamDel @loc.x @loc.gam2))

  | App         (loc.phi0, loc.tau)                 =   case substAnnArrow @arg.infAnnTy @func.infAnnTy of
                                                          (AnnArrow _ phi t) -> (phi,t)
                                                          _ -> error "Strictness Analysis Error: 1"

                arg         .   knPhi               =   @lhs.knPhi `join` @loc.phi0

                lhs         .   strGam              =   gamSplitConj @func.strGam @arg.strGam
                lhs         .   infAnnTy            =   @loc.tau
  | Lam         body        .   knPhi               =   Strict
                loc         .   x                   =   head @arg.bndVars
                loc         .   phi0                =   case gamLookup @loc.x @body.strGam of
                                                            Just phi -> phi
                                                            Nothing  -> Lazy

                lhs         .   infAnnTy            =   case anotateTy (@lhs.finTyVarMp |=> @ty) of
                                                           (AnnArrow t1 _ _) -> AnnArrow t1 @loc.phi0 @body.infAnnTy
                                                           _ -> error "Strictness Analysis Error: 2"
                lhs         .   strGam              =   gamContaintment @lhs.knPhi (gamDel @loc.x @body.strGam)
                                                         
  | Case        expr        .   knPhi               =   Strict
                lhs         .   strGam              =   gamSplitConj @expr.strGam @alts.strGam
                lhs         .   infAnnTy            =   @alts.infAnnTy 


SEM Decls
  | Nil         lhs     .  strGam    =   emptyGam
                lhs     .  annTyGam  =   @lhs.annTyGam
                lhs     .  bndVars   =   []
  | Cons        lhs     .  strGam    =   gamAddGam @hd.strGam   @tl.strGam
                lhs     .  annTyGam  =   gamAddGam @hd.annTyGam @tl.annTyGam
                lhs     .  bndVars   =   @hd.bndVars ++ @tl.bndVars


SEM Decl
  | Val         lhs     .  strGam    =  @expr.strGam
                lhs     .  annTyGam  =  gamAdd (head @patExpr.bndVars) @expr.infAnnTy @lhs.annTyGam
                lhs     .  bndVars   =  @patExpr.bndVars  


SEM CaseAlts
  | Nil         lhs     .  end       =   True
                lhs     .  strGam    =   emptyGam
                lhs     .  infAnnTy  =   AnyTy
  | Cons        lhs     .  end       =   False
                lhs     .  strGam    =   if @tl.end 
                                            then @hd.strGam 
                                            else gamSplitDisj @hd.strGam  @tl.strGam
                lhs     .  infAnnTy  =   @hd.infAnnTy -- todo: unify the types?

SEM CaseAlt
  | Pat         lhs     .  strGam    =   foldr  (\x g -> gamDel x g) @expr.strGam @patExpr.bndVars
                lhs     .  infAnnTy  =   @expr.infAnnTy


SEM PatExpr
  | Var         lhs     .  bndVars   =  [ @nm ]
  | AppTop      lhs     .  bndVars   =  @patExpr.bndVars
  | Parens      lhs     .  bndVars   =  @patExpr.bndVars

%%]

