%%[0
%include lhs2TeX.fmt
%include afp.fmt
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Type inferencing for PatExpr
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Arity of pattern app
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(1 hmtyinfer).arity
ATTR PatExpr [ | | arity: Int ]

SEM PatExpr
  | App         lhs         .  arity                =   @func.arity + 1
  | Con Var AppTop IConst CConst
                lhs         .  arity                =   0
%%]

%%[(5 hmtyinfer)
SEM PatExpr
  | SConst      lhs         .  arity                =   0
%%]

%%[(7 hmtyinfer)
SEM PatExpr
  | Rec DataFields
                lhs         .  arity                =   0
%%]

%%[(97 hmtyinfer)
SEM PatExpr
  | Expr        lhs         .  arity                =   0
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Destruction function, known ty
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(2 hmtyinfer).patFunTy
ATTR PatExpr [ | | patFunTy USE {`const`} {Ty_Any}: Ty ]
%%]

-- generated from ruler rules into EHRulerRules, was 2.patFunTy
%%[(5 hmtyinfer).patFunTy
SEM PatExpr
  | Con         loc         .   patFunTy            =   let  prTy = mkTyFreshProdFrom @lUniq (hsnProdArity @nm)
                                                        in   ([prTy] `mkArrow` prTy)
  | App         lhs         .   patFunTy            =   @func.patFunTy
  | AppTop      loc         .   patFunTy            =   @patExpr.patFunTy
%%]

%%[(5 hmtyinfer).patFunTy
SEM PatExpr
  | Con         loc         .   (ty_g_,nmErrs)      =   valGamLookupTy (hsnUn @nm) @lhs.valGam
                            .   (tvarv1_,tvarv2_)   =   let  [a,r] = mkNewTyVarL 2 @lUniq in (a,r)
                            .   knTyShape           =   [@loc.tvarv1_] `mkArrow` @loc.tvarv2_
                            .   fo_fitP_            =   fitsIn instFIOpts @fe @lUniq2 emptyVarMp @ty_g_ @loc.knTyShape
                            .   tyVarMp_p_          =   foVarMp @fo_fitP_
                            .   patFunTy            :=  @tyVarMp_p_ |=> foTy @fo_fitP_
                loc         .   lUniq2              :   UNIQUEREF gUniq
%%]

GADT: deconstructor signature will be a function with a product (with possibly equality constraints) as value.
      match with this additional information such that the equality constraints will be stripped off by the fitsIn function.
%%[(16 hmtyinfer).patFunTy
SEM PatExpr
  | Con
      loc.knTyShape := [@loc.tvarv1_] `mkArrow` (hsnRec `mkConApp` [@loc.tvarv2_])
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Distribution of known ty
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(1 hmtyinfer).knTy
ATTR AllPatExpr [ knTy: Ty | | ]
ATTR PatExpr [ knTyL: TyL | | ]
%%]

-- generated from ruler rules into EHRulerRules, was 1.knTy.App
%%[(5 hmtyinfer).knTy.App

-- Note: knProdTy is later replaced by @loc.patFunTy which is based on the signature of the deconstructor

SEM PatExpr
  | AppTop      loc         .  knProdTy             =   @lhs.knTy
                            .  prodTyL              =   tyProdArgs @knProdTy
                            .  (knTyL,arityErrs)
                                                    =   case @loc.prodTyL of
                                                            tL | @patExpr.arity == length tL
                                                                ->  (reverse tL,[])
                                                            _   ->  (repeat Ty_Any
                                                                    ,  [rngLift @range Err_PatArity
                                                                         @knProdTy @patExpr.arity])
  | App         loc         .  (knArgTy,knTyL)
                                                    =   hdAndTl @lhs.knTyL
                func        .  knTy                 =   Ty_Any
                arg         .  knTy                 =   @knArgTy
%%]

%%[(1 hmtyinfer).knTy.Init
SEM Decl
  | Val         patExpr     .  knTyL                =   []

SEM Expr
  | Lam         arg         .  knTyL                =   []
%%]

-- generated from ruler rules into EHRulerRules, was 1.knTy
%%[(5 hmtyinfer).knTy
SEM PatExpr
  | AppTop      loc         .  (knPatTy,knProdTy)   :=  tyArrowArgRes @patFunTy
  | Con         loc         .  knPatTy              :=  @tvarv1_
%%]

%%[(5 hmtyinfer)
SEM CaseAlt
  | Pat         patExpr     .  knTyL                =   []
%%]

%%[(7 hmtyinfer)
SEM RecPatExpr
  | Ext Expr    patExpr     .  knTyL                =   []

SEM DataFieldPatExpr
  | Ext         patExpr     .  knTyL                =   []
%%]

%%[(12 hmtyinfer)
SEM Expr
  | LamImpl     arg         .  knTyL                =   []
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Temporary (20081021), reintroduction of previously ruler generated AG
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

-- between variant 5 .. 99, reconstruction of AG rules, getting rid of ruler3 until Arie's ruler4 can be used
%%[(5 noHmTyRuler hmtyinfer)
SEM PatExpr
%%[[5
  | SConst      loc         .   constTy             =   tyString
%%][11
  | SConst      loc         .   constTy             =   Ty_Con (ehbnPrelString $ ehcOptBuiltinNames @lhs.opts)
%%]]
%%]

%%[(5 noHmTyRuler hmtyinfer)
SEM PatExpr
  | SConst      loc         .   fo_                 =   fitsIn @lhs.fiOpts @fe @lUniq @lhs.tyVarMp @lhs.knTy @constTy
                lhs         .   patFunTy            =   Ty_Any
                loc         .   ty                  =   @constTy
                lhs         .   tyVarMp             =   foVarMp @fo_ |=> @lhs.tyVarMp
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Type of PatExpr
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

-- generated from ruler rules into EHRulerRules, was 1.xxx
%%[(5 hmtyinfer).xxx
SEM PatExpr
  | Var VarAs   loc         .   ty                  =   @lhs.knTy
                            .   varTy               =   @ty
                            .   addToGam            =   if @lhs.inclVarBind && @nm /= hsnWild
                                                        then  \g ->  gamAdd @nm
                                                                       (ValGamInfo @varTy) g
                                                        else  id
  | Var         lhs         .   valGam              =   @addToGam @lhs.valGam
  | VarAs       lhs         .   valGam              =   @addToGam @patExpr.valGam
%%]

%%[(2 hmtyinfer).tyNtyVarMp
ATTR AllPatExpr [ | tyVarMp: VarMp | ty: Ty ]
%%]

-- generated from ruler rules into EHRulerRules, was 2.Var
%%[(5 hmtyinfer).Var
SEM PatExpr
  | Var VarAs   loc         .   ty                  :=  tyEnsureNonAny @lUniq @lhs.knTy
  | VarAs       patExpr     .   knTy                =   @ty
%%]

-- generated from ruler rules into EHRulerRules, was 4.Var
-- 20080421 - AD, this does not match ruler rules anymore: ty sig from tySigGam is now also used for fitsIn
%%[(5 hmtyinfer).Var
SEM PatExpr
  | Var VarAs   loc         .   (ty_g_,_)           =   valGamLookupTy @nm @lhs.tySigGam
                            .   ty_kn_              =   tyEnsureNonAny @lUniq @lhs.knTy
                            .   fo_                 =   fitsIn @lhs.fiOpts @fe @lUniq_4_fo @lhs.tyVarMp @ty_kn_ @ty_g_
                            .   ty                  :=  tyInst1Exists @lUniq2 (foTy @fo_)
                loc         .   lUniq2              :   UNIQUEREF gUniq
                loc         .   lUniq_4_fo          :   UNIQUEREF gUniq
  | Var         lhs         .   tyVarMp             =   foVarMp @fo_ |=> @lhs.tyVarMp
  | VarAs       patExpr     .   tyVarMp             =   foVarMp @fo_ |=> @lhs.tyVarMp
%%]
SEM PatExpr
  | Var VarAs   loc         .   (ty_g_,_)           =   valGamLookupTy @nm @lhs.tySigGam
                            .   ty_kn_              =   tyEnsureNonAny @lUniq @lhs.knTy
                            .   ty                  :=  tyInst1Exists @lUniq2 @ty_kn_

%%[(9 hmtyinfer).Var
SEM PatExpr
  | Var         loc         .   ty_kn_              :=  tyEnsureNonAnyImpl @lUniq @lhs.knTy
%%]

-- generated from ruler rules into EHRulerRules, was 4.TypeAs
-- 20070205 - AD, this does not match ruler rules anymore: options to fit, type expr is passed further on, uninstantiated
-- 20070620 - AD, matches ruler rules
%%[(5 hmtyinfer).TypeAs
SEM PatExpr
  | TypeAs      loc         .   ty_q_               =   @tyExpr.ty
                            .   fo_                 =   fitsIn @lhs.fiOpts @fe @lUniq_4_fo @lhs.tyVarMp @lhs.knTy @ty_q_
                loc         .   lUniq_4_fo          :   UNIQUEREF gUniq
                patExpr     .   tyVarMp             =   foVarMp @fo_ |=> @lhs.tyVarMp
                            .   knTy                =   foTy @fo_
%%]

-- generated from ruler rules into EHRulerRules, was 2.Rest
%%[(5 hmtyinfer).Rest
SEM PatExpr
  | AppTop      loc         .   fo_fitR_            =   @lhs.knTy `fitsIn` @knPatTy
                            .   ty                  =   foTy @fo_fitR_
                patExpr     .   tyVarMp             =   foVarMp @fo_fitR_ |=> @lhs.tyVarMp
  | Con         loc         .   ty                  =   Ty_Any
%%]

-- generated from ruler rules into EHRulerRules, was 2.Rest
%%[(5 hmtyinfer).Rest
SEM PatExpr
  | IConst      loc         .   ty                  =   tyInt
  | CConst      loc         .   ty                  =   tyChar
%%]

-- generated from ruler rules into EHRulerRules, was 4.Rest
%%[(5 hmtyinfer).Rest
SEM PatExpr
  | AppTop      loc         .   fo_fitR_            :=  fitsIn @lhs.fiOpts @fe @lUniq @lhs.tyVarMp @lhs.knTy @knPatTy
  | Con         loc         .   fo_fitR_            :=  fitsIn @lhs.fiOpts @fe @lUniq3 (@tyVarMp_p_ |=> @lhs.tyVarMp) @lhs.knTy @tvarv1_
                            .   ty_r_               =   foTy @fo_fitR_
                            .   ty                  :=  @ty_r_
                lhs         .   tyVarMp             =   foVarMp @fo_fitR_ |=> @tyVarMp_p_ |=> @lhs.tyVarMp
                loc         .   lUniq3              :   UNIQUEREF gUniq
%%]

%%[(97 hmtyinfer)
SEM PatExpr
  | Expr        loc         .   eqFldNm             =   ehbnClassEqFldEq $ ehcOptBuiltinNames @lhs.opts
                            .   (eqTy,nmErrs)       =   valGamLookupTy @eqFldNm @lhs.valGam
                            .   knExprTy            =   mkTyVar @lUniq
                            .   fo_                 =   fitsIn strongFIOpts @fe @lUniq_97_fitsIn_ty @lhs.tyVarMp
                                                            @eqTy
                                                            ([@knExprTy,@lhs.knTy] `mkArrow` (semCon $ ehbnDataBool $ ehcOptBuiltinNames @lhs.opts))
                expr        .   knTy                =   @knExprTy
                            .   tyVarMp             =   foVarMp @fo_ |=> @lhs.tyVarMp
                loc         .   lUniq_97_fitsIn_ty  :   UNIQUEREF gUniq
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Data based records
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(7 hmtyinfer)
SEM DataFieldPatExpr
  | Ext         loc         .   (gTy,nmErrs)        =   valGamLookupTy @nm @lhs.valGam
                            .   knFldTy             =   mkNewTyVar @lUniq
                            .   fo_                 =   fitsIn @lhs.fiOpts @fe @lUniq2 @lhs.tyVarMp @gTy ([@lhs.knTy] `mkArrow` @knFldTy)
                dataFieldPatExpr
                            .   tyVarMp             =   foVarMp @fo_ |=> @lhs.tyVarMp
                patExpr     .   knTy                =   @knFldTy
                loc         .   ty                  =   @dataFieldPatExpr.ty
                loc         .   lUniq               :   UNIQUEREF gUniq
                loc         .   lUniq2              :   UNIQUEREF gUniq
  | Con         loc         .   (gTy,nmErrs)        =   valGamLookupTy (hsnUn @nm) @lhs.valGam
                            .   tyvar               =   mkTyVar @lUniq
                            .   knTyShape           =   [@lhs.knTy] `mkArrow` @loc.tyvar
                            .   fo_                 =   fitsIn @lhs.fiOpts @fe @lUniq2 @lhs.tyVarMp @gTy @loc.knTyShape
                            .   ty                  =   @lhs.knTy
                lhs         .   tyVarMp             =   foVarMp @fo_ |=> @lhs.tyVarMp
                loc         .   lUniq               :   UNIQUEREF gUniq
                loc         .   lUniq2              :   UNIQUEREF gUniq
%%]

GADT: deconstructor signature will be a function with a product (with possibly equality constraints) as value.
      match with this additional information such that the equality constraints will be stripped off by the fitsIn function.
%%[(16 hmtyinfer)
SEM DataFieldPatExpr
  | Con
      loc.knTyShape := [@lhs.knTy] `mkArrow` (hsnRec `mkConApp` [@loc.tyvar])
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Row based records
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(7 hmtyinfer)
SEM RecPatExpr
  | Empty       loc         .   fo_                 =   fitsIn (@lhs.fiOpts) @fe @lUniq @lhs.tyVarMp @lhs.knTy tyRecEmpty
                            .   ty                  =   foTy @fo_
                lhs         .   tyVarMp             =   foVarMp @fo_ |=> @lhs.tyVarMp
                loc         .   lUniq               :   UNIQUEREF gUniq
  | Ext         loc         .   (extTy,recTy,rowTy,patTy)
                                                    =   let  [r,e] = mkNewTyVarL 2 @lUniq
                                                             ext = hsnRec `mkConApp` [r]
                                                        in   (ext, ext `mkTyRecExt` [(@nm,e)], r, e)
                            .   fo_                 =   fitsIn (@lhs.fiOpts) @fe @lUniq2 @lhs.tyVarMp @lhs.knTy @recTy
                            .   ty                  =   foTy @fo_
                recPatExpr  .   knTy                =   @extTy
                            .   tyVarMp             =   foVarMp @fo_ |=> @lhs.tyVarMp
                patExpr     .   knTy                =   @patTy
                loc         .   lUniq               :   UNIQUEREF gUniq
                loc         .   lUniq2              :   UNIQUEREF gUniq
%%]

