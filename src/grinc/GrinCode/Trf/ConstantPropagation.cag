%%[0
%include lhs2TeX.fmt
%include afp.fmt
%%]

%%[8 import({GrinCode/AbsSyn})
%%]

%%[8.wrapper
WRAPPER GrAGItf
%%]

%%[8 hs module {%{GRIN}GrinCode.Trf.Identity} import({%{EH}Base.Common}, {%{EH}GrinCode}) export(identity)
constantPropagation :: HptMap -> GrModule -> GrModule
constantPropagation hptMap grmod  =  let t = wrap_GrAGItf (sem_GrAGItf (GrAGItf_AGItf grmod))
                                                       (Inh_GrAGItf { hptMap_Inh_GrAGItf  =  hptMap
                                                                    }
                                                       )
                                  in grTrf_Syn_GrAGItf t
%%]

%%[8
ATTR GrAGItf [ hptMap: HptMap | | grTrf: GrModule ]
ATTR AllGrNT [ hptMap: HptMap | | grTrf: SELF, localhptMap : HptMap ]

SEM GrExpr
  | Seq	     @body . localhptMap = @expr . localhptMap

%%]

%%[8

{-
%%%%%%%%%%%%%%%%%%%
%% case branches %%
%%%%%%%%%%%%%%%%%%%

ATTR GrExpr GrAltL GrAlt [ | | scrutinee: GrVal ]
SEM GrExpr
  | Case     @altL . scrutinee = @val

SEM GrAlt
  | Alt	     @expr . localhptMap = (lhs.scrutinee, @pat) : lhs.localhptMap -- TODO

%%%%%%%%%%%%%%%%%%%%%%%%%
%% constant operations %%
%%%%%%%%%%%%%%%%%%%%%%%%%

SEM GrExpr
  | FFI	     lhs . argL
-}

%%]

% vim:ts=4:et:
